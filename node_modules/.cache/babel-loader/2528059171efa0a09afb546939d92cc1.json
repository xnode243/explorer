{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTableSimple, BTr, BTd, BTabs, BTab, BTbody } from 'bootstrap-vue';\nimport { abbr, getStakingValidatorByHex, isHexAddress, isStringArray, isToken, percent, tokenFormatter } from '@/libs/utils';\nimport VueMarkdown from 'vue-markdown';\nimport ArrayFieldComponent from './ArrayFieldComponent.vue';\nexport default {\n  name: 'ObjectFieldComponent',\n  components: {\n    BTableSimple: BTableSimple,\n    BTr: BTr,\n    BTd: BTd,\n    BTabs: BTabs,\n    BTab: BTab,\n    BTbody: BTbody,\n    ArrayFieldComponent: ArrayFieldComponent,\n    VueMarkdown: VueMarkdown\n  },\n  props: {\n    tablefield: {\n      type: [Array, Object],\n      default: function _default() {}\n    },\n    small: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      options: {\n        markdownIt: {\n          linkify: true\n        },\n        linkAttributes: {\n          attrs: {\n            target: '_blank',\n            rel: 'noopener'\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    formatObject: function formatObject(value) {\n      // console.log(value, typeof (value) === 'object', Object.keys(value))\n      // if (typeof (value) === 'object' && Object.keys(value).length === 1) {\n      //   console.log(value)\n      //   return value[Object.keys(value)[0]]\n      // }\n      return value;\n    },\n    formatTitle: function formatTitle(v) {\n      return String(v).replaceAll('_', ' ');\n    },\n    isObjectText: function isObjectText(v) {\n      return String(v).startsWith('{') && String(v).endsWith('}');\n    },\n    toObject: function toObject(v) {\n      return JSON.parse(v);\n    },\n    formatText: function formatText(v) {\n      return abbr(v, 60);\n    },\n    eval_value: function eval_value(value) {\n      return Array.from(value);\n    },\n    isTokenField: function isTokenField(value) {\n      return value ? isToken(value) : false;\n    },\n    isHex: function isHex(value) {\n      return value ? isHexAddress(value) : false;\n    },\n    formatHexAddress: function formatHexAddress(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    },\n    isArrayText: function isArrayText(value) {\n      return value ? isStringArray(value) : false;\n    },\n    formatTokens: function formatTokens(value) {\n      return tokenFormatter(value);\n    },\n    addNewLine: function addNewLine(value) {\n      var percentage = /^0\\.\\d+/;\n\n      if (percentage.test(value)) {\n        return \"\".concat(percent(value), \"%\");\n      }\n\n      return value ? value.replace(/(?:\\\\[rn])+/g, '\\n') : '-';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}