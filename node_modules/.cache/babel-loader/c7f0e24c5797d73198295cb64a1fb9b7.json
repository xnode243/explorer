{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BInputGroupAppend, BFormSelectOption } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nexport default {\n  name: 'DepositDialogue',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormSelectOption: BFormSelectOption,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    proposalId: {\n      type: Number,\n      required: true\n    },\n    proposalTitle: {\n      type: String,\n      required: true\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      token: null,\n      amount: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.gov.v1beta1.MsgDeposit',\n        value: {\n          depositor: this.address,\n          proposalId: String(this.proposalId),\n          amount: [{\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }]\n        }\n      }];\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Deposit',\n      historyName: 'deposit'\n    });\n  },\n  methods: {\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.token);\n    },\n    format: function format(v) {\n      return formatToken(v);\n    },\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}