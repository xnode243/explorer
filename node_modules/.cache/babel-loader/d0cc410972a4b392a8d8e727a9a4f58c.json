{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, BCard, BButton, BPopover, BTable, BSpinner } from 'bootstrap-vue';\nimport { CoinGeckoMap, getPairName } from '@/libs/osmos';\nimport { formatTokenDenom } from '@/libs/utils';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport Place from './components/KlineTrade/Place.vue'; // import Kline from './components/kline/index.vue'\n\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BButton: BButton,\n    BPopover: BPopover,\n    BTable: BTable,\n    BSpinner: BSpinner,\n    Place: Place,\n    BCard: BCard,\n    FeatherIcon: FeatherIcon\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    var poolid = to.params.poolid;\n    this.init(poolid);\n    next(); // }\n  },\n  data: function data() {\n    return {\n      loading: true,\n      error: '',\n      base: '',\n      target: '',\n      fields: ['pair', 'price', 'change'],\n      show: false,\n      pools: [],\n      current: {},\n      denomTrace: [],\n      klineData: [],\n      marketData: {},\n      high24: 0,\n      low24: 0\n    };\n  },\n  computed: {\n    pairs: function pairs() {\n      var _this = this;\n\n      var pairs = this.pools.map(function (x) {\n        var pair = x.poolAssets.map(function (t) {\n          if (t.token.denom.startsWith('ibc/')) {\n            return formatTokenDenom(_this.denomTrace[t.token.denom] ? _this.denomTrace[t.token.denom].base_denom : ' ');\n          }\n\n          return formatTokenDenom(t.token.denom);\n        });\n        return {\n          id: x.id,\n          pair: pair,\n          price: _this.getPrice(pair),\n          change: _this.getChanges(pair)\n        };\n      });\n      return pairs;\n    },\n    latestPrice: function latestPrice() {\n      return this.getPrice([this.base, this.target]);\n    },\n    changesIn24H: function changesIn24H() {\n      return this.getChanges([this.base, this.target]);\n    },\n    marketChartData: function marketChartData() {\n      if (this.marketData && this.marketData.prices) {\n        var labels = this.marketData.prices.map(function (x) {\n          return x[0];\n        });\n        var data = this.marketData.prices.map(function (x) {\n          return x[1];\n        });\n        return {\n          labels: labels,\n          datasets: [{\n            label: 'Price',\n            data: data,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1,\n            pointStyle: 'dash',\n            barThickness: 15\n          }]\n        };\n      }\n\n      return {\n        labels: [],\n        datasets: []\n      };\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    var poolid = this.$route.params.poolid;\n    this.$http.osmosis.getDenomTraces().then(function (x) {\n      _this2.denomTrace = x;\n\n      _this2.$http.osmosis.getPools().then(function (pools) {\n        _this2.pools = pools;\n\n        _this2.init(poolid);\n      });\n    });\n  },\n  methods: {\n    getPrice: function getPrice(symbol) {\n      var p1 = this.$store.state.chains.quotes[symbol[0]];\n      var p2 = this.$store.state.chains.quotes[symbol[1]];\n      return p1 && p2 ? (p1.usd / p2.usd).toFixed(4) : '-';\n    },\n    getChanges: function getChanges(symbol) {\n      var p1 = this.$store.state.chains.quotes[symbol[0]];\n      var p2 = this.$store.state.chains.quotes[symbol[1]];\n      return p1 && p2 ? (p1.usd_24h_change / p2.usd_24h_change).toFixed(2) : '-';\n    },\n    init: function init(poolid) {\n      var _this3 = this;\n\n      this.high24 = 0;\n      this.low24 = 0;\n      this.current = this.pools.find(function (p) {\n        return p.id === poolid;\n      }) || this.pools[0];\n      this.base = getPairName(this.current, this.denomTrace, 'base');\n      this.target = getPairName(this.current, this.denomTrace, 'target');\n      this.$http.osmosis.getMarketData(CoinGeckoMap[this.base], CoinGeckoMap[this.target]).then(function (res) {\n        _this3.marketData = res;\n        _this3.loading = false;\n        var start = Date.now() - 8.64e+7;\n        res.prices.forEach(function (x) {\n          if (x[0] > start) {\n            if (x[1] > _this3.high24) {\n              // eslint-disable-next-line prefer-destructuring\n              _this3.high24 = x[1];\n            }\n\n            if (x[1] < _this3.low24 || _this3.low24 === 0) {\n              // eslint-disable-next-line prefer-destructuring\n              _this3.low24 = x[1];\n            }\n          }\n        });\n      }).catch(function (e) {\n        _this3.error = \"This feature is not avalable in your country. \\n\\u8FD9\\u4E2A\\u529F\\u80FD\\u5C1A\\u672A\\u5BF9\\u4F60\\u7684\\u56FD\\u5BB6\\u5F00\\u653E\\u3002\".concat(e);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}