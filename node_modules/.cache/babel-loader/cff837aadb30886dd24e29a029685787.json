{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable } from 'bootstrap-vue';\nimport { getStakingValidatorByHex, isHexAddress, isToken, percent, toDay, tokenFormatter } from '@/libs/utils';\nexport default {\n  name: 'ArrayFieldComponent',\n  components: {\n    BTable\n  },\n  props: {\n    tablefield: {\n      type: [Array, Object],\n      default: () => []\n    }\n  },\n  computed: {\n    items() {\n      if (this.tablefield.length > 0 && typeof this.tablefield[0] === 'string') {\n        return this.tablefield.map(x => ({\n          array: x\n        }));\n      }\n\n      return this.tablefield;\n    }\n\n  },\n  methods: {\n    eval_value(value) {\n      if (typeof value === 'string') {\n        return JSON.parse(value);\n      }\n\n      return value;\n    },\n\n    isTokenField(value) {\n      return isToken(value);\n    },\n\n    isArrayText(value) {\n      const has = String(value).startsWith('[') && String(value).endsWith(']');\n      return has;\n    },\n\n    formatText(value) {\n      const reg = /^\\d{4}.\\d{1,2}.\\d{1,2}T\\d{2}:\\d{2}:.+Z$/;\n      const percentage = /^0\\.\\d+/;\n\n      if (reg.test(value)) {\n        return toDay(value);\n      }\n\n      if (percentage.test(value)) {\n        return `${percent(value)}%`;\n      } // if (value.length > 40) {\n      //   return value.substring(0, 40).concat('...')\n      // }\n\n\n      return value;\n    },\n\n    formatTokens(value) {\n      return tokenFormatter(value);\n    },\n\n    isHex(value) {\n      return isHexAddress(value);\n    },\n\n    formatHexAddress(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}