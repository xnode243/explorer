{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BButton, BAvatar, BRow, BCol, BTable, BCardFooter, VBTooltip, VBModal, BBadge, BPagination } from 'bootstrap-vue';\nimport { percent, formatToken, StakingParameters, Validator, operatorAddressToAccount, consensusPubkeyToHexAddress, toDay, abbrMessage, abbrAddress } from '@/libs/utils';\nimport { keybase } from '@/libs/fetch';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport StakingAddressComponent from './components/staking/StakingAddressComponent.vue';\nimport StakingCommissionComponent from './components/staking/StakingCommissionComponent.vue';\nimport StakingRewardComponent from './components/staking/StakingRewardComponent.vue';\nexport default {\n  components: {\n    BCard,\n    BButton,\n    BRow,\n    BCol,\n    BAvatar,\n    BCardFooter,\n    BBadge,\n    BPagination,\n    BTable,\n    StakingAddressComponent,\n    StakingCommissionComponent,\n    StakingRewardComponent,\n    OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip\n  },\n\n  data() {\n    return {\n      commission: {\n        series: [90],\n        completed: 89,\n        inProgress: 64\n      },\n      selfDelegation: {\n        balance: {\n          amount: 0\n        }\n      },\n      latestHeight: 0,\n      accountAddress: '-',\n      hexAddress: '-',\n      stakingPool: {},\n      mintInflation: 0,\n      stakingParameter: new StakingParameters(),\n      validator: new Validator(),\n      address: null,\n      userData: {},\n      blocks: Array.from('0'.repeat(100)).map(x => [Boolean(x), Number(x)]),\n      distribution: {},\n      transactions: {}\n    };\n  },\n\n  computed: {\n    txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(x => ({\n          height: Number(x.height),\n          txhash: x.txhash,\n          msgs: abbrMessage(x.tx.body.messages),\n          time: toDay(x.timestamp)\n        }));\n      }\n\n      return [];\n    }\n\n  },\n\n  created() {\n    this.$http.getStakingPool().then(res => {\n      this.stakingPool = res;\n    });\n    this.$http.getStakingParameters().then(res => {\n      this.stakingParameter = res;\n    });\n    this.$http.getMintingInflation().then(res => {\n      this.mintInflation = res;\n    });\n    this.address = this.$route.params.address;\n    this.initial();\n  },\n\n  mounted() {\n    const elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', () => {\n      this.initial();\n    });\n  },\n\n  methods: {\n    initial() {\n      this.$http.getStakingValidator(this.address).then(data => {\n        this.validator = data;\n        this.processAddress(data.operator_address, data.consensus_pubkey);\n        this.$http.getTxsBySender(this.accountAddress).then(res => {\n          this.transactions = res;\n        });\n        const {\n          identity\n        } = data.description;\n        keybase(identity).then(d => {\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            this.$set(this.validator, 'avatar', d.them[0].pictures.primary.url);\n            this.$store.commit('cacheAvatar', {\n              identity,\n              url: d.them[0].pictures.primary.url\n            });\n          }\n        });\n      });\n      this.$http.getValidatorDistribution(this.address).then(res => {\n        this.distribution = res;\n      });\n    },\n\n    pageload(v) {\n      this.$http.getTxsBySender(this.accountAddress, v).then(res => {\n        this.transactions = res;\n      });\n    },\n\n    formatHash: abbrAddress,\n\n    timeFormat(value) {\n      return toDay(value);\n    },\n\n    percentFormat(value) {\n      return percent(value);\n    },\n\n    processAddress(operAddress, consensusPubkey) {\n      this.accountAddress = operatorAddressToAccount(operAddress);\n      this.hexAddress = consensusPubkeyToHexAddress(consensusPubkey);\n      this.$http.getStakingDelegatorDelegation(this.accountAddress, operAddress).then(d => {\n        this.selfDelegation = d;\n      });\n    },\n\n    tokenFormatter(token) {\n      return formatToken({\n        amount: token,\n        denom: this.stakingParameter.bond_denom\n      });\n    },\n\n    apr(rate) {\n      return `${percent((1 - rate) * this.mintInflation)} %`;\n    },\n\n    fetch_status(item, lastHeight) {\n      return this.$http.getBlockByHeight(item[1]).then(res => {\n        if (item[1] !== lastHeight) {\n          const sigs = res.block.last_commit.signatures.find(s => s.validator_address === this.hexAddress);\n          const block = this.blocks.find(b => b[1] === item[1]);\n\n          if (typeof block !== 'undefined') {\n            this.$set(block, 0, typeof sigs !== 'undefined');\n          }\n        }\n      });\n    },\n\n    fetch_latest() {\n      this.$http.getLatestBlock().then(res => {\n        const sigs = res.block.last_commit.signatures.find(s => s.validator_address === this.hexAddress);\n        const block = this.blocks.find(b => b[1] === res.block.last_commit.height);\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (this.blocks.length > 999) this.blocks.shift();\n          this.blocks.push([typeof sigs !== 'undefined', res.block.last_commit.height]);\n        }\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}