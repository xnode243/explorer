{"ast":null,"code":"import _asyncToGenerator from \"/root/explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nimport { BAvatar, BModal, BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BForm, BButton, BInputGroupAppend, BFormCheckbox, BOverlay, BAlert } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { extractAccountNumberAndSequence, getLocalAccounts, setLocalTxHistory, sign, timeIn } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport WalletInputVue from './WalletInput.vue';\nimport Delegate from './components/Delegate.vue';\nimport Redelegate from './components/Redelegate.vue';\nimport Withdraw from './components/Withdraw.vue';\nimport Unbond from './components/Unbond.vue';\nimport Transfer from './components/Transfer.vue';\nimport IBCTransfer from './components/IBCTransfer.vue';\nimport Vote from './components/Vote.vue';\nimport WithdrawCommission from './components/WithdrawCommission.vue';\nimport GovDeposit from './components/GovDeposit.vue';\nimport TransactionResult from './TransactionResult.vue';\nexport default {\n  name: 'DelegateDialogue',\n  components: {\n    BAlert: BAlert,\n    BAvatar: BAvatar,\n    BModal: BModal,\n    BRow: BRow,\n    BCol: BCol,\n    BForm: BForm,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    BFormCheckbox: BFormCheckbox,\n    vSelect: vSelect,\n    BButton: BButton,\n    BInputGroupAppend: BInputGroupAppend,\n    BOverlay: BOverlay,\n    WalletInputVue: WalletInputVue,\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    Delegate: Delegate,\n    Redelegate: Redelegate,\n    Withdraw: Withdraw,\n    Unbond: Unbond,\n    Transfer: Transfer,\n    IBCTransfer: IBCTransfer,\n    Vote: Vote,\n    WithdrawCommission: WithdrawCommission,\n    GovDeposit: GovDeposit,\n    TransactionResult: TransactionResult\n  },\n  directives: {\n    Ripple: Ripple\n  },\n  props: {\n    type: {\n      type: String,\n      default: ''\n    },\n    modalId: {\n      type: String,\n      default: 'operation-modal'\n    },\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    },\n    proposalId: {\n      type: Number,\n      default: null\n    },\n    proposalTitle: {\n      type: String,\n      default: null\n    },\n    selectedChainName: {\n      type: String,\n      default: null\n    },\n    toAddress: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      modalTitle: '',\n      historyName: '',\n      selectedValidator: null,\n      token: '',\n      chainId: '',\n      balance: [],\n      IBCDenom: {},\n      error: null,\n      showDismissibleAlert: false,\n      sequence: 1,\n      accountNumber: 0,\n      advance: false,\n      fee: '900',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      gas: '250000',\n      memo: '',\n      blockingMsg: this.address ? 'You are not the owner' : 'No available account found.',\n      actionName: 'Send',\n      showResult: false,\n      txHash: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    feeDenoms: function feeDenoms() {\n      if (!this.balance) return [];\n      return this.balance.filter(function (item) {\n        return !item.denom.startsWith('ibc');\n      });\n    },\n    accounts: function accounts() {\n      var accounts = getLocalAccounts();\n      var selectedWallet = this.$store.state.chains.defaultWallet;\n      return accounts ? accounts[selectedWallet] : null;\n    },\n    isOwner: function isOwner() {\n      var _this = this;\n\n      if (this.accounts) {\n        this.updateWallet(this.accounts.device);\n\n        if (this.accounts.address.findIndex(function (x) {\n          return x.addr === _this.selectedAddress;\n        }) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    selectedAddress: function selectedAddress() {\n      if (this.address) {\n        return this.address;\n      }\n\n      if (this.accounts) {\n        var _this$accounts;\n\n        var chain = this.$store.state.chains.selected.chain_name;\n        var selectedAddress = (_this$accounts = this.accounts) === null || _this$accounts === void 0 ? void 0 : _this$accounts.address.find(function (x) {\n          return x.chain === chain;\n        });\n        return selectedAddress === null || selectedAddress === void 0 ? void 0 : selectedAddress.addr;\n      }\n\n      return null;\n    },\n    selectedChain: function selectedChain() {\n      var config = null;\n      var allChains = localStorage.getItem('chains');\n\n      if (allChains && this.selectedChainName) {\n        config = JSON.parse(allChains)[this.selectedChainName];\n      }\n\n      return config;\n    }\n  },\n  methods: {\n    initialize: function initialize() {\n      var _this2 = this;\n\n      if (this.isOwner && this.selectedAddress) {\n        var _this$$store$state$ch, _this$$store$state$ch2, _this$$store$state$ch3;\n\n        this.$http.getLatestBlock().then(function (ret) {\n          _this2.chainId = ret.block.header.chain_id;\n          var notSynced = timeIn(ret.block.header.time, 10, 'm');\n\n          if (notSynced) {\n            _this2.error = 'Client is not synced or blockchain is halted';\n          } else {\n            _this2.error = null;\n          }\n        });\n        this.$http.getAuthAccount(this.selectedAddress).then(function (ret) {\n          var account = extractAccountNumberAndSequence(ret);\n          _this2.accountNumber = account.accountNumber;\n          _this2.sequence = account.sequence;\n        });\n        this.$http.getBankBalances(this.selectedAddress, this.selectedChain).then(function (res) {\n          if (res.balances && res.balances.length > 0) {\n            _this2.balance = res.balances.reverse();\n\n            var token = _this2.balance.find(function (i) {\n              return !i.denom.startsWith('ibc');\n            });\n\n            _this2.token = token.denom;\n            if (token) _this2.feeDenom = token.denom;\n          }\n        });\n        this.fee = ((_this$$store$state$ch = this.$store.state.chains.selected) === null || _this$$store$state$ch === void 0 ? void 0 : _this$$store$state$ch.min_tx_fee) || '1000';\n        this.feeDenom = ((_this$$store$state$ch2 = this.$store.state.chains.selected) === null || _this$$store$state$ch2 === void 0 ? void 0 : (_this$$store$state$ch3 = _this$$store$state$ch2.assets[0]) === null || _this$$store$state$ch3 === void 0 ? void 0 : _this$$store$state$ch3.base) || '';\n      }\n    },\n    componentUpdate: function componentUpdate(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3[key] = obj[key];\n      });\n    },\n    handleOk: function handleOk(bvModalEvt) {\n      var _this4 = this;\n\n      bvModalEvt.preventDefault();\n\n      if (!this.fee) {\n        this.error = 'fee is required';\n        return;\n      }\n\n      if (!this.feeDenom) {\n        this.error = 'fee symbol is required';\n        return;\n      }\n\n      if (!this.accountNumber) {\n        this.error = 'Account number is required';\n        return;\n      }\n\n      if (!this.sequence) {\n        this.error = 'Sequence is required';\n        return;\n      }\n\n      if (!this.chainId) {\n        this.error = 'Chain Id is required';\n        return;\n      }\n\n      this.$refs.simpleRules.validate().then(function (ok) {\n        if (ok) {\n          _this4.sendTx().then(function (ret) {\n            _this4.error = ret;\n          });\n        }\n      });\n    },\n    resetModal: function resetModal() {\n      this.feeDenom = '';\n      this.error = null;\n      this.showResult = false;\n    },\n    sendTx: function sendTx() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var txMsgs, txFee, signerData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                txMsgs = _this5.$refs.component.msg;\n\n                if (!(txMsgs.length === 0)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _this5.error = 'No delegation found';\n                return _context.abrupt(\"return\", '');\n\n              case 4:\n                if (_this5.accountNumber) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _this5.error = 'Account number should not be empty!';\n                return _context.abrupt(\"return\", '');\n\n              case 7:\n                txFee = {\n                  amount: [{\n                    amount: _this5.fee,\n                    denom: _this5.feeDenom\n                  }],\n                  gas: _this5.gas\n                };\n                signerData = {\n                  accountNumber: _this5.accountNumber,\n                  sequence: _this5.sequence,\n                  chainId: _this5.chainId\n                };\n                sign(_this5.wallet, _this5.chainId, _this5.selectedAddress, txMsgs, txFee, _this5.memo, signerData).then(function (bodyBytes) {\n                  _this5.showResult = true;\n\n                  _this5.$http.broadcastTx(bodyBytes, _this5.selectedChain).then(function (res) {\n                    _this5.txHash = res.tx_response.txhash;\n                    setLocalTxHistory({\n                      chain: _this5.$store.state.chains.selected,\n                      op: _this5.historyName,\n                      hash: res.tx_response.txhash,\n                      time: new Date()\n                    });\n                  }).catch(function (e) {\n                    _this5.showResult = false;\n                    _this5.error = e;\n                    _this5.showDismissibleAlert = true;\n                  });\n                }).catch(function (e) {\n                  _this5.showResult = false;\n                  _this5.error = e;\n                  _this5.showDismissibleAlert = true;\n                });\n                return _context.abrupt(\"return\", '');\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    updateWallet: function updateWallet(v) {\n      if (v && v === 'address') {\n        this.wallet = 'keplr';\n      } else {\n        this.wallet = v;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}