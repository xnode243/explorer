{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardTitle, BFormTextarea } from 'bootstrap-vue';\nimport { fromBase64, toHex } from '@cosmjs/encoding';\nexport default {\n  components: {\n    BCard,\n    BCardTitle,\n    BFormTextarea\n  },\n\n  data() {\n    const {\n      rpc,\n      snapshot_provider\n    } = this.$store.state.chains.selected;\n    let servers = '';\n\n    if (rpc && Array.isArray(rpc) && rpc.length > 0) {\n      let serv = rpc;\n\n      if (serv.length === 1) {\n        serv = serv.concat(serv);\n      }\n\n      servers = serv.map(x => {\n        const url = new URL(x);\n\n        if (url.port === '') {\n          return `${url.protocol}//${url.hostname}:${url.protocol.startsWith('https') ? '443' : '80'}`;\n        }\n\n        return `${url.protocol}//${url.hostname}:${url.port}`;\n      }).join(',');\n    } // eslint-disable-next-line camelcase\n\n\n    const peers = snapshot_provider;\n    const providers = peers ? `# Comma separated list of nodes to keep persistent connections to \\npersistent_peers = \"${peers}\" ` : 'OMG！ There is NO available providers, but you can try it.';\n    return {\n      app_version: '',\n      snapshot_provider,\n      servers,\n      providers,\n      height: 0,\n      hash: '',\n      error: [],\n      state: '',\n      valid: false,\n      daemon: '',\n      snapshot: `[state-sync]\n# snapshot-interval specifies the block interval at which local state sync snapshots are\n# taken (0 to disable). Must be a multiple of pruning-keep-every.\nsnapshot-interval = 1000\n\n# snapshot-keep-recent specifies the number of recent snapshots to keep and serve (0 to keep all). Each snapshot is about 500MiB\nsnapshot-keep-recent = 2`\n    };\n  },\n\n  created() {\n    const interval = 1000;\n    this.$http.getLatestBlock().then(l => {\n      const {\n        height\n      } = l.block.header;\n\n      if (height > interval * 3) {\n        this.$http.getBlockByHeight(Math.trunc((height - 3 * interval) / interval) * interval).then(x => {\n          this.hash = toHex(fromBase64(x.block_id.hash));\n          this.height = x.block.header.height;\n          this.state = `[statesync]\nenable = true\nrpc_servers = \"${this.servers}\"\ntrust_height = ${this.height}\ntrust_hash = \"${this.hash}\"\ntrust_period = \"168h\"  # 2/3 of unbonding time`;\n          this.check();\n        });\n      }\n\n      this.$http.getNodeInfo().then(res => {\n        this.app_version = res.application_version.version;\n        this.daemon = res.application_version.app_name;\n      }).catch();\n    });\n  },\n\n  methods: {\n    check() {\n      this.valid = true;\n      this.error = [];\n      this.state.split('\\n').forEach(element => {\n        const v = this.kv(element);\n\n        if (v[0] === 'trust_height' && Number(v[1]) < 1) {\n          this.valid = false;\n          this.error.push('Trust Height should be set.');\n        }\n\n        if (v[0] === 'trust_hash' && v[1].length < 10) {\n          this.valid = false;\n          this.error.push('Trust Hash is invalid.');\n        }\n\n        if (v[0] === 'rpc_servers') {\n          if (v[1].indexOf(',') > 1) {\n            v[1].replace(/\"/g, '').split(',').forEach(host => {\n              const re = /^(.)+:\\d+$/g;\n\n              if (!re.test(host)) {\n                this.valid = false;\n                this.error.push(`\"${host}\" is not a valid host. Make sure that the port is added.`);\n              }\n            }); // valid = true\n          } else {\n            this.valid = false;\n            this.error.push('No RPC serser is configured.');\n          }\n        }\n      });\n      return this.valid;\n    },\n\n    kv(line) {\n      if (line && line.indexOf('=') > 0) {\n        const s = line.split('=');\n        return [s[0].trim(), s[1].trim()];\n      }\n\n      return [];\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}