{"ast":null,"code":"import _asyncToGenerator from \"/root/explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/root/explorer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n\n/*\n * @Description: file\n * @Autor: dingyiming\n * @Date: 2021-11-20 15:26:27\n * @LastEditors: dingyiming\n * @LastEditTime: 2021-11-20 15:33:07\n */\nimport { isTestnet } from '@/libs/utils';\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nvar chains = {};\nvar coingecko = {};\n\nvar configs = require.context('../../chains/mainnet', false, /\\.json$/);\n\nif (isTestnet()) {\n  configs = require.context('../../chains/testnet', false, /\\.json$/);\n}\n\nvar update = {};\nconfigs.keys().forEach(function (k) {\n  var c = configs(k);\n  c.chain_name = String(c.chain_name).toLowerCase();\n  update[c.chain_name] = c;\n\n  if (Array.isArray(c.assets)) {\n    c.assets.forEach(function (x) {\n      if (x.coingecko_id && x.coingecko_id !== '') coingecko[x.coingecko_id] = String(x.symbol).toUpperCase();\n    });\n  }\n});\nchains = update;\nlocalStorage.setItem('chains', JSON.stringify(update));\nvar selected = chains.cosmos;\nvar avatarcache = localStorage.getItem('avatars');\nexport default {\n  namespaced: true,\n  state: {\n    config: chains,\n    selected: selected,\n    avatars: avatarcache ? JSON.parse(avatarcache) : {},\n    height: 0,\n    ibcChannels: {},\n    quotes: {},\n    defaultWallet: localStorage.getItem('default-wallet'),\n    denoms: {},\n    ibcPaths: {}\n  },\n  getters: {\n    getchains: function getchains(state) {\n      return state.chains;\n    },\n    getAvatarById: function getAvatarById(state) {\n      return function (id) {\n        return state.avatars[id];\n      };\n    }\n  },\n  mutations: {\n    setup_sdk_version: function setup_sdk_version(state, info) {\n      state.chains.config[info.chain_name].sdk_version = info.version;\n    },\n    select: function select(state, args) {\n      state.chains.selected = state.chains.config[args.chain_name];\n    },\n    cacheAvatar: function cacheAvatar(state, args) {\n      state.chains.avatars[args.identity] = args.url;\n      localStorage.setItem('avatars', JSON.stringify(state.chains.avatars));\n    },\n    setHeight: function setHeight(state, height) {\n      state.chains.height = height;\n    },\n    setChannels: function setChannels(state, _ref) {\n      var chain = _ref.chain,\n          channels = _ref.channels;\n      state.chains.ibcChannels[chain] = channels;\n    },\n    setQuotes: function setQuotes(state, quotes) {\n      state.quotes = quotes;\n    },\n    setDefaultWallet: function setDefaultWallet(state, defaultWallet) {\n      if (defaultWallet && defaultWallet.length > 0) {\n        localStorage.setItem('default-wallet', defaultWallet);\n        state.chains.defaultWallet = defaultWallet;\n      } else {\n        state.chains.defaultWallet = null;\n      }\n    },\n    setIBCDenoms: function setIBCDenoms(state, denoms) {\n      state.denoms = _objectSpread(_objectSpread({}, state.denoms), denoms);\n    },\n    setIBCPaths: function setIBCPaths(state, paths) {\n      state.ibcPaths = paths;\n    }\n  },\n  actions: {\n    getQuotes: function getQuotes(context) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var keys, currencies;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // fetch('https://price.ping.pub/quotes').then(data => data.json()).then(data => {\n                //   context.commit('setQuotes', data)\n                // })\n                keys = Object.keys(coingecko);\n\n                if (keys.length > 0) {\n                  currencies = 'usd,cny,eur,jpy,krw,sgd,hkd';\n                  fetch(\"https://api.coingecko.com/api/v3/simple/price?include_24hr_change=true&vs_currencies=\".concat(currencies, \"&ids=\").concat(keys.join(','))).then(function (data) {\n                    return data.json();\n                  }).then(function (data) {\n                    // use symbol as key instead of coingecko id\n                    var quotes = {};\n\n                    if (data && Object.keys(data)) {\n                      Object.keys(data).forEach(function (k) {\n                        quotes[coingecko[k]] = data[k];\n                      });\n                    }\n\n                    context.commit('setQuotes', quotes);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getAllIBCDenoms: function getAllIBCDenoms(context, _this) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.$http.getAllIBCDenoms().then(function (x) {\n                  var denomsMap = {};\n                  var pathsMap = {};\n                  x.denom_traces.forEach(function (trace) {\n                    var hash = toHex(sha256(new TextEncoder().encode(\"\".concat(trace.path, \"/\").concat(trace.base_denom))));\n                    var ibcDenom = \"ibc/\".concat(hash.toUpperCase());\n                    denomsMap[ibcDenom] = trace.base_denom;\n                    var path = trace.path.split('/');\n\n                    if (path.length >= 2) {\n                      pathsMap[ibcDenom] = {\n                        channel_id: path[path.length - 1],\n                        port_id: path[path.length - 2]\n                      };\n                    }\n                  });\n                  context.commit('setIBCDenoms', denomsMap);\n                  context.commit('setIBCPaths', pathsMap);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}