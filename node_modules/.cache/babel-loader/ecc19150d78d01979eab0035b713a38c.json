{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BProgress, BProgressBar } from 'bootstrap-vue';\nexport default {\n  components: {\n    BProgress: BProgress,\n    BProgressBar: BProgressBar\n  },\n  props: {\n    hash: {\n      type: String,\n      default: null\n    },\n    selectedChain: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      isLoading: true,\n      succeed: false,\n      error: '',\n      checkTimes: 0\n    };\n  },\n  computed: {\n    progresBar: function progresBar() {\n      // success: [100, 0, 0]\n      // fail: [50, 50, 0]\n      // pending: [0, 0, 100]\n      if (!this.hash) {\n        return [0, 0, 100];\n      }\n\n      if (this.succeed) {\n        return [100, 0, 0];\n      }\n\n      return [50, 0, 50];\n    },\n    txUrl: function txUrl() {\n      var chain = this.selectedChain ? this.selectedChain.chain_name : this.$store.state.chains.selected.chain_name;\n      return \"/\".concat(chain, \"/tx/\").concat(this.hash);\n    }\n  },\n  mounted: function mounted() {\n    this.timer = setInterval(this.trace, 6000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    trace: function trace() {\n      var _this = this;\n\n      if (this.hash) {\n        this.error = null;\n        this.$http.getTxs(this.hash, this.selectedChain).then(function (res) {\n          if (res.code === 0) {\n            _this.succeed = true;\n            _this.isLoading = false;\n            clearInterval(_this.timer);\n            var elem = document.getElementById('txevent');\n\n            if (elem) {\n              var event = new Event('txcompleted', res);\n              elem.dispatchEvent(event);\n            }\n          } else if (res.code !== 3) {\n            // code 3 is tx unconfirmed(not founded).\n            _this.error = res.raw_log;\n            clearInterval(_this.timer);\n          }\n        }, function () {\n          // error statement\n          _this.checkTimes += 1;\n\n          if (_this.checkTimes > 5) {\n            clearInterval(_this.timer);\n            _this.error = 'Timeout';\n          }\n        }).catch(function (e) {\n          _this.error = e;\n          clearInterval(_this.timer);\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}