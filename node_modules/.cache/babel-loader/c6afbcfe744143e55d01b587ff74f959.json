{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VBTooltip, BCard, BAvatar, BRow, BCol } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { formatToken, getCachedValidators, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, tokenFormatter } from '@/libs/utils';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nexport default {\n  components: {\n    BAvatar: BAvatar,\n    BCard: BCard,\n    BRow: BRow,\n    BCol: BCol,\n    FeatherIcon: FeatherIcon\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple: Ripple\n  },\n  data: function data() {\n    return {\n      address: '',\n      selectedValidator: '',\n      accounts: [],\n      delegations: [],\n      rewards: {},\n      operationModalType: '',\n      ibcDenoms: {},\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency()\n    };\n  },\n  computed: {\n    formatedDelegations: function formatedDelegations() {\n      var _this = this;\n\n      var conf = this.$http.getSelectedConfig();\n      var decimal = conf.assets[0].exponent || '6';\n      return this.delegations.map(function (x) {\n        return {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: _this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance, {}, decimal),\n          reward: _this.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n        };\n      });\n    },\n    groupedDelegations: function groupedDelegations() {\n      var _this2 = this;\n\n      var group = {};\n      var conf = this.$http.getSelectedConfig();\n      var decimal = conf.assets[0].exponent || '6';\n      this.delegations.forEach(function (x) {\n        var d = {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: _this2.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance, {}, decimal),\n          reward: _this2.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n        };\n\n        if (group[x.keyname]) {\n          group[x.keyname].push(d);\n        } else {\n          group[x.keyname] = [d];\n        }\n      });\n      return group;\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    selectValue: function selectValue(type, v) {\n      this.operationModalType = type;\n      this.address = v.delegator_address;\n      this.selectedValidator = v.validator.validator;\n      return v;\n    },\n    findMoniker: function findMoniker(chain, addr) {\n      var vals = JSON.parse(getCachedValidators(chain));\n\n      if (vals) {\n        var val = vals.find(function (x) {\n          return x.operator_address === addr;\n        });\n\n        if (val) {\n          return val.description.moniker;\n        }\n      }\n\n      return addr;\n    },\n    findReward: function findReward(delegator, validator) {\n      var _this$rewards$delegat;\n\n      var reward = ((_this$rewards$delegat = this.rewards[delegator]) === null || _this$rewards$delegat === void 0 ? void 0 : _this$rewards$delegat.rewards.find(function (x) {\n        return x.validator_address === validator;\n      })) || null;\n\n      if (reward) {\n        return tokenFormatter(reward.reward, this.ibcDenoms);\n      }\n\n      return '-';\n    },\n    getPrice: function getPrice(denom) {\n      var quote = this.$store.state.chains.quotes[denom];\n      return quote ? quote[this.currency2] : 0;\n    },\n    toCurrency: function toCurrency(token) {\n      var _this3 = this;\n\n      var profit = 0;\n      token.split(', ').forEach(function (r) {\n        var t = r.trim().replace(/,/, '').split(' ');\n        profit += Number(t[0]) * _this3.getPrice(t[1]);\n      });\n      return numberWithCommas(profit.toFixed(2));\n    },\n    init: function init() {\n      var _this4 = this;\n\n      this.accounts = getLocalAccounts();\n      var chains = getLocalChains();\n\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(function (acc) {\n          _this4.accounts[acc].address.forEach(function (add) {\n            var chain = chains[add.chain];\n\n            _this4.$http.getStakingReward(add.addr, chain).then(function (res) {\n              _this4.rewards[add.addr] = res;\n              res.total.forEach(function (t) {\n                if (t.denom.startsWith('ibc')) {\n                  _this4.$http.getIBCDenomTrace(t.denom, chain).then(function (denom) {\n                    _this4.$set(_this4.ibcDenoms, t.denom, denom);\n                  });\n                }\n              });\n            });\n\n            _this4.$http.getStakingDelegations(add.addr, chain).then(function (res) {\n              if (res.delegation_responses && res.delegation_responses.length > 0) {\n                var delegation = res.delegation_responses.map(function (x) {\n                  var x2 = x;\n                  x2.keyname = acc;\n                  x2.chain = chain;\n                  return x2;\n                });\n                _this4.delegations = _this4.delegations.concat(delegation);\n              }\n            }).catch(function () {});\n          });\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}