{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardBody, BCardFooter, BButton, BTable, BTableSimple, BTr, BTd, BCardTitle, BCardHeader, BProgressBar, BProgress, BTooltip, BBadge, BFormSelect, BFormSelectOption, BInputGroup, BInputGroupPrepend } from 'bootstrap-vue';\nimport FlipCountdown from 'vue2-flip-countdown'; // import fetch from 'node-fetch'\n\nimport { getCachedValidators, getStakingValidatorByAccount, percent as _percent, tokenFormatter } from '@/libs/utils';\nimport { Proposal, Proposer } from '@/libs/data';\nimport dayjs from 'dayjs';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue'; // import { formatToken } from '@/libs/data/data'\n\nexport default {\n  components: {\n    BCard: BCard,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BCardFooter: BCardFooter,\n    BButton: BButton,\n    BTable: BTable,\n    BTableSimple: BTableSimple,\n    BCardHeader: BCardHeader,\n    BTr: BTr,\n    BTd: BTd,\n    BProgressBar: BProgressBar,\n    BProgress: BProgress,\n    BTooltip: BTooltip,\n    BBadge: BBadge,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    BInputGroup: BInputGroup,\n    BInputGroupPrepend: BInputGroupPrepend,\n    ObjectFieldComponent: ObjectFieldComponent,\n    FlipCountdown: FlipCountdown,\n    OperationModal: OperationModal\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      blocktime: 6,\n      tallyParam: null,\n      latest: {},\n      next: null,\n      proposal: new Proposal(),\n      proposer: new Proposer(),\n      totalPower: 0,\n      deposits: [],\n      votes: [],\n      operationModalType: '',\n      from: '../gov',\n      votes_fields: [{\n        key: 'voter',\n        sortable: true,\n        formatter: function formatter(v) {\n          return _this.formatAddress(v);\n        }\n      }, {\n        key: 'option',\n        sortable: true,\n        formatter: function formatter(value) {\n          switch (value) {\n            case 1:\n            case 'VOTE_OPTION_YES':\n              return 'Yes';\n\n            case 2:\n            case 'VOTE_OPTION_ABSTAIN':\n              return 'Abstain';\n\n            case 3:\n            case 'VOTE_OPTION_NO':\n              return 'No';\n\n            case 4:\n            case 'VOTE_OPTION_NO_WITH_VETO':\n              return 'No With Veto';\n\n            default:\n              return value;\n          }\n        }\n      }],\n      deposit_fields: [{\n        key: 'depositor',\n        formatter: function formatter(v) {\n          return _this.formatAddress(v);\n        }\n      }, {\n        key: 'amount',\n        sortable: true,\n        formatter: tokenFormatter\n      }]\n    };\n  },\n  computed: {\n    upgradeTime: function upgradeTime() {\n      if (this.proposal.type.indexOf('SoftwareUpgrade') > 0) {\n        var _this$proposal, _this$latest;\n\n        if (Number(((_this$proposal = this.proposal) === null || _this$proposal === void 0 ? void 0 : _this$proposal.contents.plan.height) || 0) > 0 && (_this$latest = this.latest) !== null && _this$latest !== void 0 && _this$latest.block) {\n          var _this$latest$block, _this$latest$block$he;\n\n          var blocks = Number(this.proposal.contents.plan.height) - Number(((_this$latest$block = this.latest.block) === null || _this$latest$block === void 0 ? void 0 : (_this$latest$block$he = _this$latest$block.header) === null || _this$latest$block$he === void 0 ? void 0 : _this$latest$block$he.height) || 0);\n\n          if (blocks > 0) {\n            var endtime = dayjs().add(blocks * this.blocktime, 'second').format('YYYY-MM-DD HH:mm:ss');\n            return endtime;\n          }\n        }\n\n        return dayjs(this.proposal.contents.plan.time).format('YYYY-MM-DD HH:mm:ss');\n      }\n\n      return '0001-01-01 00:00:00';\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$http.getGovernanceParameterTallying().then(function (res) {\n      _this2.tallyParam = res;\n    });\n    var pid = this.$route.params.proposalid;\n\n    if (this.$route.query.from) {\n      this.from = this.$route.query.from;\n    }\n\n    this.$http.getLatestBlock().then(function (res) {\n      _this2.latest = res;\n    });\n    this.$http.getGovernance(pid).then(function (p) {\n      if (p.status === 2) {\n        _this2.$http.getStakingPool().then(function (pool) {\n          _this2.totalPower = pool.bondedToken;\n\n          _this2.$http.getGovernanceTally(pid, 0).then(function (t) {\n            return p.updateTally(t);\n          });\n        });\n      }\n\n      _this2.proposal = p;\n    });\n\n    if (!getCachedValidators()) {\n      this.$http.getValidatorList();\n    } // this.$http.getGovernanceProposer(pid).then(res => {\n    //   this.proposer = res\n    // })\n\n\n    this.$http.getGovernanceDeposits(pid).then(function (res) {\n      _this2.deposits = res;\n    }).catch(function () {});\n    this.$http.getGovernanceVotes(pid).then(function (res) {\n      _this2.votes = res;\n      _this2.next = res.pagination ? res.pagination.next_key : null;\n    });\n  },\n  methods: {\n    scaleWidth: function scaleWidth(p) {\n      if (this.tallyParam) {\n        if (p.status === 2) {\n          return Number(this.tallyParam.quorum) * Number(this.tallyParam.threshold) * (1 - p.tally.abstain) * 100;\n        }\n\n        return Number(this.tallyParam.threshold) * (1 - p.tally.abstain) * 100;\n      }\n\n      return 50;\n    },\n    percent: function percent(v) {\n      return _percent(v);\n    },\n    formatDate: function formatDate(v) {\n      return dayjs(v).format('YYYY-MM-DD HH:mm');\n    },\n    formatToken: function formatToken(v) {\n      return tokenFormatter(v, {});\n    },\n    loadVotes: function loadVotes() {\n      var _this3 = this;\n\n      if (this.next) {\n        var pid = this.$route.params.proposalid;\n        var next = this.next;\n        this.next = null;\n        this.$http.getGovernanceVotes(pid, next).then(function (res) {\n          _this3.$set(_this3.votes, 'votes', _this3.votes.votes.concat(res.votes));\n\n          _this3.next = res.pagination ? res.pagination.next_key : null;\n        });\n      }\n    },\n    formatAddress: function formatAddress(v) {\n      return getStakingValidatorByAccount(this.$http.config.chain_name, v);\n    },\n    openModal: function openModal(type) {\n      this.operationModalType = type;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}