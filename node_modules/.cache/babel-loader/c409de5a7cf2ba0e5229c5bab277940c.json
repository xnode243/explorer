{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable global-require */\nimport { BLink, BAvatar, BRow, BCol, BCard, BCardText, BCardTitle, BDropdown, BDropdownItem } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport VuexyLogo from '@core/layouts/components/Logo.vue';\nimport store from '@/store/index';\nimport { timeIn, toDay, getLocalChains } from '@/libs/utils';\nimport AppFooter from '@/@core/layouts/components/AppFooter.vue';\nimport FullHeader from './components/FullHeader.vue';\nexport default {\n  components: {\n    BLink,\n    BAvatar,\n    BRow,\n    BCol,\n    BCard,\n    BCardText,\n    BCardTitle,\n    BDropdown,\n    BDropdownItem,\n    VuexyLogo,\n    AppFooter,\n    FullHeader\n  },\n  directives: {\n    Ripple\n  },\n\n  data() {\n    const chains = this.$store.state.chains.config;\n    return {\n      chains,\n      downImg: require('@/assets/images/pages/under-maintenance.svg')\n    };\n  },\n\n  computed: {\n    imgUrl() {\n      if (store.state.appConfig.layout.skin === 'dark') {\n        // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n        this.downImg = require('@/assets/images/pages/under-maintenance-dark.svg');\n        return this.downImg;\n      }\n\n      return this.downImg;\n    }\n\n  },\n\n  beforeCreate() {\n    const keys = Object.keys(getLocalChains());\n\n    if (keys.length === 1) {\n      this.$router.push(`/${keys[0]}`);\n    }\n  },\n\n  methods: {\n    fetch(k) {\n      const chain = this.chains[k];\n\n      if (chain.api) {\n        const index = localStorage.getItem(`${chain.chain_name}-api-index`) || 0;\n        const host = Array.isArray(chain.api) ? chain.api[index] : chain.api;\n        fetch(`${host}/blocks/latest`).then(res => res.json()).then(b => {\n          const {\n            header\n          } = b.block;\n          this.$set(chain, 'height', header.height);\n          this.$set(chain, 'time', toDay(header.time));\n          this.$set(chain, 'variant', timeIn(header.time, 3, 'm') ? 'danger' : 'success');\n        });\n      }\n    },\n\n    visibilityChanged(isVisible, chain) {\n      this.isVisible = isVisible;\n      const idle = this.chains[chain.chain_name];\n\n      if (isVisible && !idle.loaded) {\n        this.$set(idle, 'loaded', true);\n        this.fetch(chain.chain_name);\n      }\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}