{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  name: 'Redelegate',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    vSelect: vSelect,\n    BInputGroupAppend: BInputGroupAppend,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      selectedAddress: this.address,\n      unbundValidators: [],\n      validators: [],\n      toValidator: null,\n      token: '',\n      amount: null,\n      delegations: [],\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    valOptions: function valOptions() {\n      var options = [];\n      var vals = this.validators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"\".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      var unbunded = this.unbundValidators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"* \".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n    tokenOptions: function tokenOptions() {\n      var _this = this;\n\n      var conf = this.$http.getSelectedConfig();\n      var decimal = conf.assets[0].exponent || '6';\n      if (!this.delegations) return [];\n      return this.delegations.filter(function (x) {\n        return x.delegation.validator_address === _this.validatorAddress;\n      }).map(function (x) {\n        return {\n          value: x.balance.denom,\n          label: formatToken(x.balance, {}, decimal)\n        };\n      });\n    },\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',\n        value: {\n          delegatorAddress: this.address,\n          validatorSrcAddress: this.validatorAddress,\n          validatorDstAddress: this.toValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Redelegate Token',\n      historyName: 'redelegate'\n    });\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this2 = this;\n\n      this.$http.getValidatorList().then(function (v) {\n        _this2.validators = v;\n      });\n      this.$http.getValidatorUnbondedList().then(function (v) {\n        _this2.unbundValidators = v;\n      });\n      this.$http.getStakingDelegations(this.address).then(function (res) {\n        _this2.delegations = res.delegation_responses;\n\n        _this2.delegations.forEach(function (x) {\n          if (x.delegation.validator_address === _this2.validatorAddress) {\n            _this2.token = x.balance.denom;\n\n            _this2.$emit('update', {\n              feeDenom: x.balance.denom\n            });\n          }\n        });\n      });\n    },\n    format: function format(v) {\n      return formatToken(v);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.token);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}