{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BLink, BNavbarNav, BMedia, BMediaAside, BAvatar, BMediaBody, VBTooltip, BButton, BDropdown, BDropdownItem, BDropdownDivider } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport DarkToggler from '@core/layouts/components/app-navbar/components/DarkToggler.vue';\nimport Locale from '@core/layouts/components/app-navbar/components/Locale.vue';\nimport SearchBar from '@core/layouts/components/app-navbar/components/SearchBar.vue'; // import CartDropdown from '@core/layouts/components/app-navbar/components/CartDropdown.vue'\n\nimport { getLocalAccounts, timeIn, toDay } from '@/libs/utils'; // import UserDropdown from '@core/layouts/components/app-navbar/components/UserDropdown.vue'\n\nexport default {\n  components: {\n    BLink,\n    BNavbarNav,\n    BAvatar,\n    BMedia,\n    BMediaAside,\n    BMediaBody,\n    BButton,\n    BDropdown,\n    BDropdownItem,\n    BDropdownDivider,\n    // Navbar Components\n    DarkToggler,\n    Locale,\n    SearchBar // CartDropdown,\n    // UserDropdown,\n\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple\n  },\n  props: {\n    toggleVerticalMenuActive: {\n      type: Function,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      variant: 'success',\n      tips: 'Synced',\n      index: 0,\n      chainid: ''\n    };\n  },\n\n  computed: {\n    walletName() {\n      const key = this.$store?.state?.chains?.defaultWallet;\n      return key || 'Wallet';\n    },\n\n    selected_chain() {\n      this.block();\n      return this.$store.state.chains.selected;\n    },\n\n    chainVariant() {\n      return this.variant;\n    },\n\n    currentApi() {\n      return this.index + 1 > this.apiOptions.length ? this.apiOptions[0] : this.apiOptions[this.index];\n    },\n\n    apiOptions() {\n      const conf = this.$store.state.chains.selected;\n\n      if (Array.isArray(conf.api)) {\n        return conf.api;\n      }\n\n      return [conf.api];\n    },\n\n    accounts() {\n      let accounts = getLocalAccounts() || {};\n      accounts = Object.entries(accounts).map(v => ({\n        wallet: v[0],\n        address: v[1].address.find(x => x.chain === this.selected_chain.chain_name)\n      })).filter(v => v.address); // accounts > 0 and wallet not setted, pick the first one as default\n\n      if (accounts.length > 0 && accounts.findIndex(x => x.wallet === this.walletName) < 0) {\n        this.updateDefaultWallet(accounts[0].wallet);\n      }\n\n      if (accounts.findIndex(x => x.wallet === this.walletName) < 0 && this.walletName !== 'Wallet') {\n        this.updateDefaultWallet(null);\n      }\n\n      return accounts;\n    }\n\n  },\n  methods: {\n    formatAddr(v) {\n      return v.substring(0, 10).concat('...', v.substring(v.length - 10));\n    },\n\n    updateDefaultWallet(v) {\n      this.$store.commit('setDefaultWallet', v);\n    },\n\n    change(v) {\n      this.index = v;\n      const conf = this.$store.state.chains.selected;\n      localStorage.setItem(`${conf.chain_name}-api-index`, v);\n      window.location.reload();\n    },\n\n    block() {\n      const conf = this.$store.state.chains.selected;\n      const s = localStorage.getItem(`${conf.chain_name}-api-index`) || 0;\n      this.index = Number(s);\n      this.$store.commit('setHeight', 0);\n      this.$http.getLatestBlock().then(block => {\n        this.chainid = block.block.header.chain_id;\n        this.$store.commit('setHeight', Number(block.block.header.height));\n\n        if (timeIn(block.block.header.time, 1, 'm')) {\n          this.variant = 'danger';\n          this.tips = `Halted ${toDay(block.block.header.time, 'from')}, Height: ${this.$store.state.chains.height} `;\n        } else {\n          this.variant = 'success';\n          this.tips = 'Synced';\n        }\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}