{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    vSelect: vSelect,\n    BInputGroupAppend: BInputGroupAppend,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedAddress: this.address,\n      availableAddress: [],\n      validators: [],\n      unbundValidators: [],\n      selectedValidator: this.validatorAddress,\n      token: '',\n      amount: null,\n      selectedChain: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    valOptions: function valOptions() {\n      var options = [];\n      var vals = this.validators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"\".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      var unbunded = this.unbundValidators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"* \".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n        value: {\n          delegatorAddress: this.selectedAddress,\n          validatorAddress: this.selectedValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Delegate Token',\n      historyName: 'delegate'\n    });\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this = this;\n\n      this.$http.getValidatorList().then(function (v) {\n        _this.validators = v;\n\n        if (!_this.selectedValidator) {\n          var r = Math.random();\n          var index = (r * v.length).toFixed();\n          _this.selectedValidator = v[index].operator_address;\n        }\n      });\n      this.$http.getValidatorUnbondedList().then(function (v) {\n        _this.unbundValidators = v;\n      });\n    },\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.token);\n    },\n    format: function format(v) {\n      var conf = this.$http.getSelectedConfig();\n      var decimal = conf.assets[0].exponent || '6';\n      return formatToken(v, this.IBCDenom, decimal);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}