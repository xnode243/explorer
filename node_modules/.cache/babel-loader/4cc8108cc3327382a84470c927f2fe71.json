{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VBTooltip, BTabs, BTab, BRow, BCol, BCard, BCardFooter, BBadge, BCardTitle, BProgress, BProgressBar, BTooltip, BAvatar } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { getLocalAccounts, getLocalChains, percent, ProposalTally, tokenFormatter } from '@/libs/utils';\nimport dayjs from 'dayjs';\nimport WalletUpgradeEvents from './WalletUpgradeEvents.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nexport default {\n  components: {\n    BAvatar,\n    BTab,\n    BTabs,\n    BRow,\n    BCol,\n    BCard,\n    BCardFooter,\n    BCardTitle,\n    BBadge,\n    BProgress,\n    BProgressBar,\n    BTooltip,\n    WalletUpgradeEvents,\n    ObjectFieldComponent\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple\n  },\n\n  data() {\n    return {\n      islive: true,\n      proposals: [],\n      descId: null,\n      tally: {},\n      // voters: [], // need to be query.\n      votes: [] // votes of voters\n\n    };\n  },\n\n  computed: {\n    list() {\n      return this.proposals.map(x => {\n        const x2 = x;\n        x2.tally = this.tally[`${x.chain.chain_name}-${x.id}`] || new ProposalTally();\n        x2.votes = this.votes.filter(v => v.vote.proposal_id === x.id);\n        return x2;\n      }).sort((a, b) => dayjs(b.voting_start_time).unix() - dayjs(a.voting_start_time).unix());\n    }\n\n  },\n\n  created() {\n    this.init();\n  },\n\n  beforeDestroy() {\n    this.islive = false;\n  },\n\n  methods: {\n    description(v) {\n      this.descId = v === this.descId ? null : v;\n    },\n\n    color(v) {\n      switch (v) {\n        case 'VOTE_OPTION_YES':\n          return 'success';\n\n        case 'VOTE_OPTION_NO':\n          return 'warning';\n\n        case 'VOTE_OPTION_NOWITHVETO':\n          return 'danger';\n\n        case 'VOTE_OPTION_ABSTAIN':\n          return 'info';\n\n        default:\n          return 'danger';\n      }\n    },\n\n    keyname(addr) {\n      const key = Object.values(this.accounts).find(k => k.address.findIndex(a => a.addr === addr) > -1);\n      return key ? key.name : addr.substring(addr.length - 6);\n    },\n\n    formatType(v) {\n      const txt = String(v).replace('Proposal', '');\n      const index = txt.lastIndexOf('.');\n      return index > 0 ? txt.substring(index + 1) : txt;\n    },\n\n    percent: v => percent(v),\n    formatDate: v => dayjs(v).format('YYYY-MM-DD'),\n    formatToken: v => tokenFormatter(v, {}),\n    formatOption: v => {\n      const start = String(v).lastIndexOf('_');\n\n      if (start > 0) {\n        return String(v).substring(start + 1);\n      }\n\n      return v;\n    },\n\n    init() {\n      this.accounts = getLocalAccounts();\n\n      if (this.accounts) {\n        const chains = getLocalChains();\n        const toQuery = {};\n        Object.keys(this.accounts).forEach(acc => {\n          this.accounts[acc].address.forEach(add => {\n            const conf = chains[add.chain];\n\n            if (conf) {\n              if (toQuery[add.chain]) {\n                toQuery[add.chain].addresses.push(add.addr);\n              } else {\n                toQuery[add.chain] = {\n                  conf,\n                  addresses: [add.addr]\n                };\n              }\n            }\n          });\n        });\n        Object.values(toQuery).forEach(item => {\n          this.fetchProposals(item);\n        });\n      }\n    },\n\n    fetchProposals(item) {\n      if (this.islive) {\n        let promise = Promise.resolve(); // identities.forEach(item => {\n        //   promise = promise.then(() => new Promise(resolve => {\n        //     this.avatar(item, resolve)\n        //   }))\n        // })\n\n        this.$http.getGovernanceListByStatus(2, item.conf).then(data => {\n          data.proposals.forEach(p => {\n            const p2 = p;\n            p2.chain = item.conf;\n            this.proposals.push(p2);\n            item.addresses.forEach(a => {\n              // this.fetchMyVote(p.id, a, item.conf)\n              // this.voters.push({ pid: p.id, addr: a, conf: item.conf })\n              promise = promise.then(() => new Promise(resolve => {\n                this.fetchMyVote(p.id, a, item.conf, resolve);\n              }));\n            });\n          });\n          this.updateTally(data.proposals, item.conf);\n        }, err => {\n          throw new Error(err);\n        });\n      }\n    },\n\n    fetchMyVote(pid, addr, conf, resolve) {\n      if (this.islive) {\n        this.$http.getGovernanceProposalVote(pid, addr, conf).then(data => {\n          resolve();\n          const x = data;\n          x.keyname = this.keyname(data.vote.voter);\n          this.votes.push(x);\n        }).catch(() => {\n          resolve();\n        });\n      }\n    },\n\n    updateTally(voting, chain) {\n      if (voting.length > 0) {\n        voting.forEach(p => this.$http.getGovernanceTally(p.id, 0, chain).then(update => {\n          this.$set(this.tally, `${chain.chain_name}-${p.id}`, update);\n        }));\n      }\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}