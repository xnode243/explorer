{"ast":null,"code":"import _asyncToGenerator from \"/root/explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nimport { BAvatar, BModal, BRow, BCol, BInputGroup, BInputGroupAppend, BInputGroupPrepend, BFormInput, BFormGroup, BFormSelect, BForm, BFormRadioGroup, BFormRadio, BFormCheckbox } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getLocalAccounts, getUnitAmount, setLocalTxHistory, sign, timeIn } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport { coin } from '@cosmjs/amino';\nimport { getChainConfigForSymbol } from '@/libs/osmos';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BAvatar: BAvatar,\n    BModal: BModal,\n    BRow: BRow,\n    BCol: BCol,\n    BForm: BForm,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormRadioGroup: BFormRadioGroup,\n    BFormRadio: BFormRadio,\n    BFormCheckbox: BFormCheckbox,\n    BInputGroupPrepend: BInputGroupPrepend,\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent\n  },\n  props: {\n    symbol: {\n      type: String,\n      default: function _default() {\n        return '';\n      }\n    },\n    denomTrace: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      address: '',\n      // from address for deposit / to address for withdraw\n      addressOptions: [],\n      chainId: '',\n      selectedChain: '',\n      balance: {},\n      token: '',\n      amount: null,\n      memo: '',\n      recipient: null,\n      fee: '800',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      error: null,\n      sequence: 1,\n      accountNumber: 0,\n      account: [],\n      IBCDenom: {},\n      gas: '200000',\n      advance: false,\n      paths: {},\n      destination: {},\n      channels: [],\n      timeoutHeight: {},\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  methods: {\n    recipientAddress: function recipientAddress() {\n      var chain = this.$route.params.chain;\n      var accounts = getLocalAccounts();\n      var current = this.$store.state.chains.defaultWallet;\n\n      if (accounts && accounts[current]) {\n        var acc = accounts[current].address.find(function (x) {\n          return x.chain === chain;\n        });\n\n        if (acc) {\n          this.recipient = acc.addr;\n        }\n      }\n\n      this.selectedChain = getChainConfigForSymbol(this.symbol);\n    },\n    computeAccount: function computeAccount() {\n      var _this = this;\n\n      this.recipientAddress();\n      var accounts = getLocalAccounts();\n      this.addressOptions = [];\n\n      if (accounts) {\n        var values = Object.values(accounts);\n\n        for (var i = 0; i < values.length; i += 1) {\n          var addr = values[i].address.find(function (x) {\n            return x.chain === _this.selectedChain.chain_name;\n          });\n\n          if (addr) {\n            if (this.addressOptions.length === 0) this.address = addr.addr;\n            this.addressOptions.push({\n              value: addr.addr,\n              text: addr.addr\n            });\n          }\n        }\n      }\n\n      return [];\n    },\n    init: function init() {\n      var _this2 = this;\n\n      this.destination = null;\n      this.token = '';\n      this.computeAccount();\n      this.loadBalance();\n\n      if (this.denomTrace) {\n        var part = this.denomTrace.path.split('/');\n        this.$http.getIBCChannel(part[1], part[0]).then(function (data) {\n          _this2.destination = data.channel.counterparty;\n          _this2.timeoutHeight = data.proof_height;\n        });\n      }\n    },\n    loadBalance: function loadBalance() {\n      var _this3 = this;\n\n      if (this.address) {\n        this.$http.getBankBalances(this.address, this.selectedChain).then(function (res) {\n          if (res && res.length > 0) {\n            _this3.balance = res.find(function (x) {\n              return formatTokenDenom(x.denom) === _this3.symbol;\n            });\n            _this3.denom = _this3.balance.denom;\n            _this3.feeDenom = _this3.balance.denom;\n          }\n        });\n        this.$http.getLatestBlock(this.selectedChain).then(function (ret) {\n          _this3.chainId = ret.block.header.chain_id;\n          var notSynced = timeIn(ret.block.header.time, 10, 'm');\n\n          if (notSynced) {\n            _this3.error = 'Client is not synced or blockchain is halted';\n          } else {\n            _this3.error = null;\n          }\n        });\n        this.$http.getAuthAccount(this.address, this.selectedChain).then(function (ret) {\n          if (ret.value.base_vesting_account) {\n            _this3.accountNumber = ret.value.base_vesting_account.base_account.account_number;\n            _this3.sequence = ret.value.base_vesting_account.base_account.sequence;\n            if (!_this3.sequence) _this3.sequence = 0;\n          } else {\n            _this3.accountNumber = ret.value.account_number;\n            _this3.sequence = ret.value.sequence ? ret.value.sequence : 0;\n          }\n        });\n      }\n    },\n    handleOk: function handleOk(bvModalEvt) {\n      var _this4 = this;\n\n      // console.log('send')\n      // Prevent modal from closing\n      bvModalEvt.preventDefault(); // Trigger submit handler\n      // this.handleSubmit()\n\n      this.send().then(function (ret) {\n        // console.log(ret)\n        _this4.error = ret;\n      });\n    },\n    resetModal: function resetModal() {\n      this.feeDenom = '';\n      this.error = null;\n    },\n    format: function format(v) {\n      return formatToken(v, {}, 6, false);\n    },\n    send: function send() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var timeout, txMsgs, txFee, signerData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this5.destination) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _this5.error = 'You have to select a destination';\n                return _context.abrupt(\"return\");\n\n              case 3:\n                timeout = dayjs().add(4, 'hour');\n                txMsgs = [{\n                  typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n                  value: {\n                    sourcePort: _this5.destination.port_id,\n                    sourceChannel: _this5.destination.channel_id,\n                    token: coin(Number(getUnitAmount(_this5.amount, _this5.denomTrace.base_denom)), _this5.denomTrace.base_denom),\n                    sender: _this5.address,\n                    receiver: _this5.recipient,\n                    // timeoutHeight: {\n                    //   revisionNumber: '0',\n                    //   revisionHeight: '0',\n                    // },\n                    timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n                  }\n                } // {\n                //   type: 'cosmos-sdk/MsgTransfer',\n                //   value: {\n                //     source_port: this.destination.port_id,\n                //     source_channel: this.destination.channel_id,\n                //     token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n                //     sender: this.address,\n                //     receiver: this.recipient,\n                //     timeout_height: {\n                //       revision_number: String(this.timeoutHeight.revision_number),\n                //       revision_height: String(200 + parseInt(this.timeoutHeight.revision_height, 10)),\n                //     },\n                //     timeout_timestamp: '0',\n                //   },\n                // },\n                ];\n                txFee = {\n                  amount: [{\n                    amount: _this5.fee,\n                    denom: _this5.feeDenom\n                  }],\n                  gas: _this5.gas\n                };\n                signerData = {\n                  accountNumber: _this5.accountNumber,\n                  sequence: _this5.sequence,\n                  chainId: _this5.chainId\n                };\n                sign(_this5.wallet, _this5.chainId, _this5.address, txMsgs, txFee, _this5.memo, signerData).then(function (bodyBytes) {\n                  _this5.$http.broadcastTx(bodyBytes, _this5.selectedChain).then(function (res) {\n                    setLocalTxHistory({\n                      op: 'ibc_sender',\n                      hash: res.txhash,\n                      time: new Date()\n                    });\n\n                    _this5.$bvModal.hide('trading-deposte-window');\n\n                    _this5.$toast({\n                      component: ToastificationContent,\n                      props: {\n                        title: 'Transaction sent!',\n                        icon: 'EditIcon',\n                        variant: 'success'\n                      }\n                    });\n                  }).catch(function (e) {\n                    _this5.error = e;\n                  });\n                }).catch(function (e) {\n                  _this5.error = e;\n                }); // Send tokens\n                // return client.sendTokens(this.address, this.recipient, sendCoins, this.memo)\n                // return\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}