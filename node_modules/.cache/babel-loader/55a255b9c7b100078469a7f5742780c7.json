{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\n// eslint-disable-next-line object-curly-newline\nimport { ref, watch, inject, computed } from '@vue/composition-api';\nimport store from '@/store';\nimport { isNavGroupActive } from '@core/layouts/utils';\nexport default function useVerticalNavMenuGroup(item) {\n  // ------------------------------------------------\n  // isVerticalMenuCollapsed\n  // ------------------------------------------------\n  var isVerticalMenuCollapsed = computed(function () {\n    return store.state.verticalMenu.isVerticalMenuCollapsed;\n  });\n  watch(isVerticalMenuCollapsed, function (val) {\n    /* eslint-disable no-use-before-define */\n    // * Handles case if routing is done outside of vertical menu\n    // i.e. From Customizer Collapse or Using Link\n    if (!isMouseHovered.value) {\n      if (val) isOpen.value = false;else if (!val && isActive.value) isOpen.value = true;\n    }\n    /* eslint-enable */\n\n  }); // ------------------------------------------------\n  // isMouseHovered\n  // ------------------------------------------------\n\n  var isMouseHovered = inject('isMouseHovered'); // Collapse menu when menu is collapsed and show on open\n\n  watch(isMouseHovered, function (val) {\n    if (isVerticalMenuCollapsed.value) {\n      // * we have used `val && val && isActive.value` to only open active menu on mouseEnter and close all menu on mouseLeave\n      // * If we don't use `isActive.value` with `val` it can open other groups which are not active as well\n      // eslint-disable-next-line no-use-before-define\n      isOpen.value = val && isActive.value;\n    }\n  }); // ------------------------------------------------\n  // openGroups\n  // ------------------------------------------------\n\n  var openGroups = inject('openGroups'); // Collapse other groups if one group is opened\n\n  watch(openGroups, function (currentOpenGroups) {\n    var clickedGroup = currentOpenGroups[currentOpenGroups.length - 1]; // If current group is not clicked group or current group is not active => Proceed with closing it\n    // eslint-disable-next-line no-use-before-define\n\n    if (clickedGroup !== item.title && !isActive.value) {\n      // If clicked group is not child of current group\n      // eslint-disable-next-line no-use-before-define\n      if (!doesHaveChild(clickedGroup)) isOpen.value = false;\n    }\n  }); // ------------------------------------------------\n  // isOpen\n  // ------------------------------------------------\n\n  var isOpen = ref(false);\n  watch(isOpen, function (val) {\n    // if group is opened push it to the array\n    if (val) openGroups.value.push(item.title);\n  });\n\n  var updateGroupOpen = function updateGroupOpen(val) {\n    // eslint-disable-next-line no-use-before-define\n    isOpen.value = val;\n  }; // ------------------------------------------------\n  // isActive\n  // ------------------------------------------------\n\n\n  var isActive = ref(false);\n  watch(isActive, function (val) {\n    /*\n      If menu is collapsed and not hovered(optional) then don't open group\n    */\n    if (val) {\n      if (!isVerticalMenuCollapsed.value) isOpen.value = val;\n    } else {\n      isOpen.value = val;\n    }\n  });\n\n  var updateIsActive = function updateIsActive() {\n    isActive.value = isNavGroupActive(item.children);\n  }; // ------------------------------------------------\n  // Other Methods\n  // ------------------------------------------------\n\n\n  var doesHaveChild = function doesHaveChild(title) {\n    return item.children.some(function (child) {\n      return child.title === title;\n    });\n  };\n\n  return {\n    isOpen: isOpen,\n    isActive: isActive,\n    updateGroupOpen: updateGroupOpen,\n    openGroups: openGroups,\n    isMouseHovered: isMouseHovered,\n    updateIsActive: updateIsActive\n  };\n}","map":null,"metadata":{},"sourceType":"module"}