{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/*\n * @Description: file\n * @Autor: dingyiming\n * @Date: 2021-11-22 21:20:10\n * @LastEditors: dingyiming\n * @LastEditTime: 2021-11-25 00:45:16\n */\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nimport fetch from 'node-fetch';\nimport { formatTokenDenom, getLocalChains } from './utils';\nexport const poolIds = {\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  13: true,\n  15: true,\n  461: true,\n  482: true,\n  497: true,\n  498: true,\n  548: true // 557: true,\n  // 558: true,\n  // 571: true,\n  // 572: true,\n\n};\nexport const CoinGeckoMap = {\n  ATOM: ['cosmos'],\n  OSMO: ['osmosis'],\n  IRIS: ['iris-network'],\n  AKT: ['akash-network'],\n  LUNA: ['terra-luna'],\n  UST: ['terrausd'],\n  KRT: ['terra-krw'],\n  BAND: ['band-protocol'],\n  CRO: ['crypto-com-chain'],\n  KAVA: ['kava'],\n  OKT: ['okexchain'],\n  CTK: ['certik'],\n  XPRT: ['persistence'],\n  REGEN: ['regen'],\n  SCRT: ['secret'],\n  DVPN: ['sentinel'],\n  ION: ['ion'],\n  ROWAN: ['sifchain'],\n  IOV: ['starname'],\n  BTSG: ['bitsong'],\n  NGM: ['e-money'],\n  EEUR: ['e-money-eur'],\n  LIKE: ['likecoin'],\n  JUNO: ['juno-network'],\n  STGZ: ['stargaze-protocol'],\n  VDL: ['vidulum'],\n  XKI: ['ki'],\n  INJ: ['injective-protocol']\n};\nexport function getChainConfigForSymbol(symbol) {\n  const key = CoinGeckoMap[symbol];\n\n  if (key) {\n    const confs = getLocalChains();\n    return Object.values(confs).find(x => x.coingecko === key[0]);\n  }\n\n  return null;\n}\nexport function getPairName(pool, denomTrace, type = 'base', isFormat = true) {\n  const index = type === 'base' ? 0 : 1;\n\n  if (pool && pool.poolAssets) {\n    const denom = pool.poolAssets[index].token.denom.startsWith('ibc') ? denomTrace[pool.poolAssets[index].token.denom]?.base_denom : pool.poolAssets[index].token.denom;\n    return isFormat ? formatTokenDenom(denom) : denom;\n  }\n\n  return '-';\n}\nexport default class OsmosAPI {\n  preHandler() {\n    this.version = '';\n  }\n\n  async get(url) {\n    const chains = getLocalChains();\n    const conf = chains.osmosis;\n    const index = this.getApiIndex(conf);\n    this.host = Array.isArray(conf.api) ? conf.api[index] : conf.api;\n    return fetch(`${this.host}${url}`).then(res => res.json());\n  }\n\n  getApiIndex(config = null) {\n    const conf = config || this.config;\n    const index = Number(localStorage.getItem(`${conf.chain_name}-api-index`) || 0);\n    return index < conf.api.length ? index : 0;\n  }\n\n  async getMarketData(from, to, days = 14) {\n    if (from && to) {\n      this.exe_time = '';\n      return Promise.all([fetch(`https://api.coingecko.com/api/v3/coins/${from}/market_chart?vs_currency=usd&days=${days}`).then(res => res.json()), fetch(`https://api.coingecko.com/api/v3/coins/${to}/market_chart?vs_currency=usd&days=${days}`).then(res => res.json())]).then(data => {\n        const output = [];\n\n        if (data.length >= 2) {\n          data[0].prices.forEach((x, i) => {\n            if (data[1].prices[i]) {\n              output.push([x[0], (x[1] / data[1].prices[i][1]).toFixed(6)]);\n            }\n          });\n        }\n\n        return {\n          prices: output\n        };\n      });\n    }\n\n    return {\n      prices: []\n    };\n  }\n\n  async getOHCL4Pairs(from, to) {\n    if (from && to) {\n      this.exe_time = '';\n      return Promise.all([fetch(`https://api.coingecko.com/api/v3/coins/${from}/ohlc?vs_currency=usd&days=1`).then(res => res.json()), fetch(`https://api.coingecko.com/api/v3/coins/${to}/ohlc?vs_currency=usd&days=1`).then(res => res.json())]).then(ohlc => {\n        const output = [];\n        ohlc[0].forEach((e, i) => {\n          const price = [e[0]];\n\n          for (let j = 1; j <= 4; j += 1) {\n            price.push(e[j] / ohlc?.[1]?.[i]?.[j]);\n          }\n\n          output.push(price);\n        });\n        const result = [];\n\n        for (let i = 0; i < output.length; i += 1) {\n          const itemArr = output[i];\n          result.push([itemArr[0], itemArr[1], // open\n          itemArr[2], // high\n          itemArr[3], // low\n          itemArr[4], // close\n          0 // volume\n          ]);\n        }\n\n        return result;\n      });\n    }\n\n    return null;\n  } // Custom Module\n\n\n  async getPools() {\n    const tradeable = [];\n    Object.keys(poolIds).forEach(k => {\n      if (poolIds[k]) {\n        tradeable.push(k);\n      }\n    });\n    return this.get('/osmosis/gamm/v1beta1/pools?pagination.limit=700').then(res => {\n      const output = res.pools.filter(x => tradeable.includes(x.id));\n      return output;\n    });\n  }\n\n  async getDenomTraces() {\n    return this.get('/ibc/apps/transfer/v1/denom_traces?pagination.limit=500').then(x => {\n      const combined = {};\n      x.denom_traces.forEach(item => {\n        const k = 'ibc/'.concat(toHex(sha256(new TextEncoder('utf-8').encode(`${item.path}/${item.base_denom}`))).toUpperCase());\n        combined[k] = item;\n      });\n      return combined;\n    });\n  }\n\n  async getIncentivesPools() {\n    return this.get('/osmosis/pool-incentives/v1beta1/incentivized_pools?pagination.limit=700');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}