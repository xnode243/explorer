{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable, BMedia, BAvatar, BBadge, BCard, BCardHeader, BCardTitle, VBTooltip, BCardBody, BButton, BFormRadioGroup, BFormGroup, BCardFooter } from 'bootstrap-vue';\nimport { percent, StakingParameters, formatToken } from '@/libs/utils';\nimport { keybase } from '@/libs/fetch';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport DownloadExcel from 'vue-json-excel';\nexport default {\n  components: {\n    BCard: BCard,\n    BTable: BTable,\n    BMedia: BMedia,\n    BAvatar: BAvatar,\n    BBadge: BBadge,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BButton: BButton,\n    BFormRadioGroup: BFormRadioGroup,\n    BFormGroup: BFormGroup,\n    BCardFooter: BCardFooter,\n    OperationModal: OperationModal,\n    DownloadExcel: DownloadExcel\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      islive: true,\n      validator_address: null,\n      mintInflation: 0,\n      stakingPool: 1,\n      stakingParameters: new StakingParameters(),\n      validators: [],\n      delegations: [],\n      changes: {},\n      latestPower: {},\n      previousPower: {},\n      excelCols: {\n        Validator: 'description.moniker',\n        Identity: 'description.identity',\n        Website: 'description.website',\n        'Operator Address': 'operator_address',\n        Status: 'status',\n        'Bonded Tokens': 'tokens',\n        'Formated Bonded Tokens': {\n          field: 'tokens',\n          callback: function callback(value) {\n            return _this.tokenFormatter(value, _this.stakingParameters.bond_denom);\n          }\n        },\n        Percent: {\n          field: 'tokens',\n          callback: function callback(value) {\n            return _this.percent(value / _this.stakingPool);\n          }\n        },\n        '24h Changes': 'changes',\n        'Unbonding Height': 'unbonding_height',\n        'Unbonding Time': 'unbonding_time'\n      },\n      validator_fields: [{\n        key: 'index',\n        label: '#',\n        tdClass: 'd-none d-md-block',\n        thClass: 'd-none d-md-block'\n      }, {\n        key: 'description',\n        label: 'Validator'\n      }, {\n        key: 'tokens',\n        label: 'Voting Power',\n        sortable: true,\n        tdClass: 'text-right',\n        thClass: 'text-right',\n        sortByFormatted: true\n      }, {\n        key: 'changes',\n        label: '24H Changes'\n      }, {\n        key: 'commission',\n        formatter: function formatter(value) {\n          return \"\".concat(percent(value.rate), \"%\");\n        },\n        tdClass: 'text-right',\n        thClass: 'text-right'\n      }, {\n        key: 'operation',\n        label: '',\n        tdClass: 'text-right',\n        thClass: 'text-right'\n      }],\n      statusOptions: [{\n        text: 'Active',\n        value: 'active'\n      }, {\n        text: 'Inactive',\n        value: 'inactive'\n      }],\n      selectedStatus: 'active',\n      isInactiveLoaded: false,\n      inactiveValidators: []\n    };\n  },\n  computed: {\n    pingVals: function pingVals() {\n      return this.list.filter(function (x) {\n        return x.description.identity === '1FA0C152D18D9E60';\n      });\n    },\n    list: function list() {\n      var _this2 = this;\n\n      var tab = this.selectedStatus === 'active' ? this.validators : this.inactiveValidators;\n      return tab.map(function (x) {\n        var xh = x;\n\n        if (Object.keys(_this2.latestPower).length > 0 && Object.keys(_this2.previousPower).length > 0) {\n          var latest = _this2.latestPower[x.consensus_pubkey.key] || 0;\n          var previous = _this2.previousPower[x.consensus_pubkey.key] || 0;\n          xh.changes = latest - previous;\n        }\n\n        return xh;\n      });\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    this.$http.getStakingPool().then(function (pool) {\n      _this3.stakingPool = pool.bondedToken;\n    }); // set\n\n    this.$http.getStakingParameters().then(function (res) {\n      _this3.stakingParameters = res;\n    });\n    this.initial();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this4.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this5 = this;\n\n      this.$http.getValidatorList().then(function (res) {\n        var identities = [];\n        var temp = res;\n\n        for (var i = 0; i < temp.length; i += 1) {\n          var identity = temp[i].description.identity;\n\n          var url = _this5.$store.getters['chains/getAvatarById'](identity);\n\n          if (url) {\n            temp[i].avatar = url;\n          } else if (identity && identity !== '') {\n            identities.push(identity);\n          }\n        } // fetch avatar from keybase\n\n\n        var promise = Promise.resolve();\n        identities.forEach(function (item) {\n          promise = promise.then(function () {\n            return new Promise(function (resolve) {\n              _this5.avatar(item, resolve);\n            });\n          });\n        });\n        _this5.validators = temp;\n\n        _this5.getPreviousPower(_this5.validators.length);\n      });\n    },\n    getPreviousPower: function getPreviousPower(length) {\n      var _this6 = this;\n\n      this.$http.getValidatorListByHeight('latest', 0).then(function (data) {\n        var height = Number(data.block_height);\n\n        if (height > 14400) {\n          height -= 14400;\n        } else {\n          height = 1;\n        }\n\n        data.validators.forEach(function (x) {\n          _this6.$set(_this6.latestPower, x.pub_key.key, Number(x.voting_power));\n        });\n\n        for (var offset = 100; offset < length; offset += 100) {\n          _this6.$http.getValidatorListByHeight('latest', offset).then(function (latest) {\n            latest.validators.forEach(function (x) {\n              _this6.$set(_this6.latestPower, x.pub_key.key, Number(x.voting_power));\n            });\n          });\n        }\n\n        for (var _offset = 0; _offset < length; _offset += 100) {\n          _this6.$http.getValidatorListByHeight(height, _offset).then(function (previous) {\n            previous.validators.forEach(function (x) {\n              _this6.$set(_this6.previousPower, x.pub_key.key, Number(x.voting_power));\n            });\n          });\n        }\n      });\n    },\n    getValidatorListByStatus: function getValidatorListByStatus() {\n      var _this7 = this;\n\n      if (this.isInactiveLoaded) return;\n      var statusList = ['BOND_STATUS_UNBONDED', 'BOND_STATUS_UNBONDING'];\n      statusList.forEach(function (status) {\n        _this7.$http.getValidatorListByStatus(status).then(function (res) {\n          var identities = [];\n          var temp = res;\n\n          for (var i = 0; i < temp.length; i += 1) {\n            var identity = temp[i].description.identity;\n\n            var url = _this7.$store.getters['chains/getAvatarById'](identity);\n\n            if (url) {\n              temp[i].avatar = url;\n            } else if (identity && identity !== '') {\n              identities.push(identity);\n            }\n          } // fetch avatar from keybase\n\n\n          var promise = Promise.resolve();\n          identities.forEach(function (item) {\n            promise = promise.then(function () {\n              return new Promise(function (resolve) {\n                _this7.avatar(item, resolve);\n              });\n            });\n          });\n          _this7.inactiveValidators = _this7.inactiveValidators.concat(res);\n        });\n      });\n      this.isInactiveLoaded = true;\n    },\n    selectValidator: function selectValidator(da) {\n      this.validator_address = da;\n    },\n    percent: percent,\n    tokenFormatter: function tokenFormatter(amount, denom) {\n      return formatToken({\n        amount: amount,\n        denom: denom\n      }, {}, 0);\n    },\n    rankBadge: function rankBadge(data) {\n      if (this.selectedStatus === 'inactive') return 'primary';\n      var index = data.index,\n          item = data.item;\n\n      if (index === 0) {\n        window.sum = 0;\n      }\n\n      var rank = window.sum / this.stakingPool;\n      window.sum += item.tokens; // sum up after the calculating.\n\n      if (rank < 0.333) {\n        return 'danger';\n      }\n\n      if (rank < 0.67) {\n        return 'warning';\n      }\n\n      return 'primary';\n    },\n    avatar: function avatar(identity, resolve) {\n      var _this8 = this;\n\n      if (this.islive) {\n        keybase(identity).then(function (d) {\n          resolve();\n\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            var pic = d.them[0].pictures;\n\n            if (pic) {\n              var list = _this8.selectedStatus === 'active' ? _this8.validators : _this8.inactiveValidators;\n              var validator = list.find(function (u) {\n                return u.description.identity === identity;\n              });\n\n              _this8.$set(validator, 'avatar', pic.primary.url);\n\n              _this8.$store.commit('cacheAvatar', {\n                identity: identity,\n                url: pic.primary.url\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}