{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VBTooltip, BCard, BAvatar, BRow, BCol } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { formatToken, getCachedValidators, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, tokenFormatter } from '@/libs/utils';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nexport default {\n  components: {\n    BAvatar,\n    BCard,\n    BRow,\n    BCol,\n    FeatherIcon\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple\n  },\n\n  data() {\n    return {\n      address: '',\n      selectedValidator: '',\n      accounts: [],\n      delegations: [],\n      rewards: {},\n      operationModalType: '',\n      ibcDenoms: {},\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency()\n    };\n  },\n\n  computed: {\n    formatedDelegations() {\n      const conf = this.$http.getSelectedConfig();\n      const decimal = conf.assets[0].exponent || '6';\n      return this.delegations.map(x => ({\n        validator: {\n          logo: x.chain.logo,\n          validator: x.delegation.validator_address,\n          moniker: this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n          chain: x.chain.chain_name\n        },\n        delegator: x.keyname,\n        delegator_address: x.delegation.delegator_address,\n        delegation: formatToken(x.balance, {}, decimal),\n        reward: this.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n      }));\n    },\n\n    groupedDelegations() {\n      const group = {};\n      const conf = this.$http.getSelectedConfig();\n      const decimal = conf.assets[0].exponent || '6';\n      this.delegations.forEach(x => {\n        const d = {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance, {}, decimal),\n          reward: this.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n        };\n\n        if (group[x.keyname]) {\n          group[x.keyname].push(d);\n        } else {\n          group[x.keyname] = [d];\n        }\n      });\n      return group;\n    }\n\n  },\n\n  created() {\n    this.init();\n  },\n\n  methods: {\n    selectValue(type, v) {\n      this.operationModalType = type;\n      this.address = v.delegator_address;\n      this.selectedValidator = v.validator.validator;\n      return v;\n    },\n\n    findMoniker(chain, addr) {\n      const vals = JSON.parse(getCachedValidators(chain));\n\n      if (vals) {\n        const val = vals.find(x => x.operator_address === addr);\n\n        if (val) {\n          return val.description.moniker;\n        }\n      }\n\n      return addr;\n    },\n\n    findReward(delegator, validator) {\n      const reward = this.rewards[delegator]?.rewards.find(x => x.validator_address === validator) || null;\n\n      if (reward) {\n        return tokenFormatter(reward.reward, this.ibcDenoms);\n      }\n\n      return '-';\n    },\n\n    getPrice(denom) {\n      const quote = this.$store.state.chains.quotes[denom];\n      return quote ? quote[this.currency2] : 0;\n    },\n\n    toCurrency(token) {\n      let profit = 0;\n      token.split(', ').forEach(r => {\n        const t = r.trim().replace(/,/, '').split(' ');\n        profit += Number(t[0]) * this.getPrice(t[1]);\n      });\n      return numberWithCommas(profit.toFixed(2));\n    },\n\n    init() {\n      this.accounts = getLocalAccounts();\n      const chains = getLocalChains();\n\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(acc => {\n          this.accounts[acc].address.forEach(add => {\n            const chain = chains[add.chain];\n            this.$http.getStakingReward(add.addr, chain).then(res => {\n              this.rewards[add.addr] = res;\n              res.total.forEach(t => {\n                if (t.denom.startsWith('ibc')) {\n                  this.$http.getIBCDenomTrace(t.denom, chain).then(denom => {\n                    this.$set(this.ibcDenoms, t.denom, denom);\n                  });\n                }\n              });\n            });\n            this.$http.getStakingDelegations(add.addr, chain).then(res => {\n              if (res.delegation_responses && res.delegation_responses.length > 0) {\n                const delegation = res.delegation_responses.map(x => {\n                  const x2 = x;\n                  x2.keyname = acc;\n                  x2.chain = chain;\n                  return x2;\n                });\n                this.delegations = this.delegations.concat(delegation);\n              }\n            }).catch(() => {});\n          });\n        });\n      }\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}