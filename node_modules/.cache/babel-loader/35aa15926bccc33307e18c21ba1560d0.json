{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { isToday } from './utils';\nexport var kFormatter = function kFormatter(num) {\n  return num > 999 ? \"\".concat((num / 1000).toFixed(1), \"k\") : num;\n};\nexport var title = function title(value) {\n  var replacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  if (!value) return '';\n  var str = value.toString();\n  var arr = str.split(replacer);\n  var capitalizedArray = [];\n  arr.forEach(function (word) {\n    var capitalized = word.charAt(0).toUpperCase() + word.slice(1);\n    capitalizedArray.push(capitalized);\n  });\n  return capitalizedArray.join(' ');\n};\nexport var avatarText = function avatarText(value) {\n  if (!value) return '';\n  var nameArray = value.split(' ');\n  return nameArray.map(function (word) {\n    return word.charAt(0).toUpperCase();\n  }).join('');\n};\n/**\n * Format and return date in Humanize format\n * Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n * Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\n\nexport var formatDate = function formatDate(value) {\n  var formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n/**\n * Return short human friendly month representation of date\n * Can also convert date to only time if date is of today (Better UX)\n * @param {String} value date to format\n * @param {Boolean} toTimeForCurrentDay Shall convert to time if day is today/current\n */\n\nexport var formatDateToMonthShort = function formatDateToMonthShort(value) {\n  var toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var date = new Date(value);\n  var formatting = {\n    month: 'short',\n    day: 'numeric'\n  };\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n  }\n\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n}; // Strip all the tags from markup and return plain text\n\nexport var filterTags = function filterTags(value) {\n  return value.replace(/<\\/?[^>]+(>|$)/g, '');\n};","map":null,"metadata":{},"sourceType":"module"}