{"ast":null,"code":"import _typeof from \"/root/explorer/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport router from '@/router';\nimport { isObject } from '@core/utils/utils';\nimport { computed } from '@vue/composition-api';\n/**\n * Return which component to render based on it's data/context\n * @param {Object} item nav menu item\n */\n\nexport var resolveVerticalNavMenuItemComponent = function resolveVerticalNavMenuItemComponent(item) {\n  if (item.header) return 'vertical-nav-menu-header';\n  if (item.children) return 'vertical-nav-menu-group';\n  return 'vertical-nav-menu-link';\n};\n/**\n * Return which component to render based on it's data/context\n * @param {Object} item nav menu item\n */\n\nexport var resolveHorizontalNavMenuItemComponent = function resolveHorizontalNavMenuItemComponent(item) {\n  if (item.children) return 'horizontal-nav-menu-group';\n  return 'horizontal-nav-menu-link';\n};\n/**\n * Return route name for navigation link\n * If link is string then it will assume it is route-name\n * IF link is object it will resolve the object and will return the link\n * @param {Object, String} link navigation link object/string\n */\n\nexport var resolveNavDataRouteName = function resolveNavDataRouteName(link) {\n  if (isObject(link.route)) {\n    var _router$resolve = router.resolve(link.route),\n        route = _router$resolve.route;\n\n    return route.name;\n  }\n\n  return link.route;\n};\n/**\n * Check if nav-link is active\n * @param {Object} link nav-link object\n */\n\nexport var isNavLinkActive = function isNavLinkActive(link) {\n  // only select one active nav\n  if (link.route && link.route.name === 'dashboard' && link.title !== link.route.name) return false; // Matched routes array of current route\n\n  var matchedRoutes = router.currentRoute.matched; // Check if provided route matches route's matched route\n\n  var resolveRoutedName = resolveNavDataRouteName(link);\n  if (!resolveRoutedName) return false;\n  var chainCompare = true;\n\n  var p1 = _typeof(router.currentRoute.params);\n\n  var p2 = _typeof(link.route.params);\n\n  if (p1 === p2) {\n    chainCompare = router.currentRoute.params.chain === link.route.params.chain;\n  }\n\n  if (chainCompare) {\n    localStorage.setItem('selected_chain', link.route.params.chain);\n  }\n\n  return matchedRoutes.some(function (route) {\n    var actived = route.name === resolveRoutedName && chainCompare || route.meta.navActiveLink === resolveRoutedName;\n    return actived;\n  });\n};\n/**\n * Check if nav group is\n * @param {Array} children Group children\n */\n\nexport var isNavGroupActive = function isNavGroupActive(children) {\n  // Matched routes array of current route\n  var matchedRoutes = router.currentRoute.matched;\n  return children.some(function (child) {\n    // If child have children => It's group => Go deeper(recursive)\n    if (child.children) {\n      return isNavGroupActive(child.children);\n    } // else it's link => Check for matched Route\n\n\n    return isNavLinkActive(child, matchedRoutes);\n  });\n};\n/**\n * Return b-link props to use\n * @param {Object, String} item navigation routeName or route Object provided in navigation data\n */\n// prettier-ignore\n\nexport var navLinkProps = function navLinkProps(item) {\n  return computed(function () {\n    var props = {}; // If route is string => it assumes => Create route object from route name\n    // If route is not string => It assumes it's route object => returns route object\n\n    if (item.route) props.to = typeof item.route === 'string' ? {\n      name: item.route\n    } : item.route;else {\n      props.href = item.href;\n      props.target = '_blank';\n      props.rel = 'nofollow';\n    }\n    if (!props.target) props.target = item.target || null;\n    return props;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}