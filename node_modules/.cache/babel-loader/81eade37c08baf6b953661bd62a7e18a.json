{"ast":null,"code":"import { getCurrentInstance } from '@vue/composition-api';\n/**\n * Returns ability result if ACL is configured or else just return true\n * Useful if you don't know if ACL is configured or not\n * Used in @core files to handle absence of ACL without errors\n * @param {String} action CASL Actions // https://casl.js.org/v4/en/guide/intro#basics\n * @param {String} subject CASL Subject // https://casl.js.org/v4/en/guide/intro#basics\n */\n\nexport const can = (action, subject) => {\n  const vm = getCurrentInstance().proxy;\n  return vm.$can ? vm.$can(action, subject) : true;\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport const canViewVerticalNavMenuLink = item => can(item.action, item.resource);\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\n\nexport const canViewVerticalNavMenuGroup = item => {\n  // ! This same logic is used in canViewHorizontalNavMenuGroup and canViewHorizontalNavMenuHeaderGroup. So make sure to update logic in them as well\n  const hasAnyVisibleChild = item.children.some(i => can(i.action, i.resource)); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport const canViewVerticalNavMenuHeader = item => can(item.action, item.resource);\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport const canViewHorizontalNavMenuLink = item => can(item.action, item.resource);\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport const canViewHorizontalNavMenuHeaderLink = item => can(item.action, item.resource);\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\n\nexport const canViewHorizontalNavMenuGroup = item => {\n  // ? Same logic as canViewVerticalNavMenuGroup\n  const hasAnyVisibleChild = item.children.some(i => can(i.action, i.resource)); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n}; // eslint-disable-next-line arrow-body-style\n\nexport const canViewHorizontalNavMenuHeaderGroup = item => {\n  // ? Same logic as canViewVerticalNavMenuGroup but with extra content\n  // eslint-disable-next-line arrow-body-style\n  const hasAnyVisibleChild = item.children.some(grpOrItem => {\n    // If it have children => It's grp\n    // Call ACL function based on grp/link\n    return grpOrItem.children ? canViewHorizontalNavMenuGroup(grpOrItem) : canViewHorizontalNavMenuLink(grpOrItem);\n  }); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n};","map":null,"metadata":{},"sourceType":"module"}