{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BFormText } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport { coin } from '@cosmjs/amino';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormText: BFormText,\n    BFormSelectOption: BFormSelectOption,\n    vSelect: vSelect,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      targetChainId: '',\n      token: '',\n      amount: null,\n      recipient: null,\n      destination: {},\n      channels: [],\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    destinationOptions: function destinationOptions() {\n      if (!this.token && this.token === '') return [];\n      var options = this.channels.map(function (x) {\n        return {\n          port_id: x.port_id,\n          channel_id: x.channel_id,\n          label: \"\".concat(x.chain_id ? x.chain_id : '', \" \").concat(x.port_id, \"/\").concat(x.channel_id)\n        };\n      });\n\n      if (this.token.startsWith('ibc/')) {\n        var query = this.paths[this.token];\n        return query ? options.filter(function (x) {\n          return x.channel_id === query.channel_id;\n        }) : options;\n      }\n\n      return options;\n    },\n    msg: function msg() {\n      var timeout = dayjs().add(4, 'hour');\n      return [{\n        typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n        value: {\n          sourcePort: this.destination.port_id,\n          sourceChannel: this.destination.channel_id,\n          token: coin(Number(getUnitAmount(this.amount, this.token)), this.token),\n          sender: this.address,\n          receiver: this.recipient,\n          timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n        }\n      }];\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    selectedChain: function selectedChain() {\n      return this.$store.state.chains.selected;\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    },\n    paths: function paths() {\n      return this.$store.state.chains.ibcPaths;\n    },\n    valuation: function valuation() {\n      var amount = this.amount;\n      var d2 = this.printDenom();\n\n      if (amount && d2) {\n        var quote = this.$store.state.chains.quotes[d2];\n        var price = quote ? quote[this.currency] : 0;\n        return parseFloat((amount * price).toFixed(2));\n      }\n\n      return 0;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'IBC Transfer Tokens',\n      historyName: 'transfer'\n    });\n    this.setActionName();\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this = this;\n\n      this.destination = null;\n      this.channels = [];\n      this.token = '';\n      this.targetChainId = '';\n\n      if (this.address) {\n        this.$http.getIBCChannels(this.selectedChain, null).then(function (ret) {\n          var chans = ret.channels.filter(function (x) {\n            return x.state === 'STATE_OPEN';\n          }).map(function (x) {\n            return {\n              channel_id: x.channel_id,\n              port_id: x.port_id\n            };\n          });\n\n          _this.$set(_this, 'channels', chans);\n        });\n      }\n    },\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    tokenChange: function tokenChange() {\n      // eslint-disable-next-line prefer-destructuring\n      this.destination = this.destinationOptions[0];\n      this.recipient = null;\n      this.setActionName();\n      this.onChannelChange();\n    },\n    setActionName: function setActionName() {\n      this.$emit('update', {\n        actionName: this.token.startsWith('ibc') ? 'Withdraw' : 'Deposit'\n      });\n    },\n    format: function format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token);\n    },\n    onChannelChange: function onChannelChange() {\n      var _this2 = this;\n\n      this.$http.getIBCChannelClientState(this.destination.channel_id, this.destination.port_id, this.selectedChain).then(function (cs) {\n        _this2.targetChainId = cs.identified_client_state.client_state.chain_id;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}