{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BAvatar, BCardFooter, BRow, BCol, BCardTitle, BAlert, BBadge, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton } from 'bootstrap-vue';\nimport fetch from 'node-fetch';\nimport { consensusPubkeyToHexAddress, getLocalChains, getCachedValidators, toDay } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport DashboardCardHorizontal from './components/dashboard/DashboardCardHorizontal.vue';\nexport default {\n  components: {\n    BAlert,\n    BBadge,\n    BRow,\n    BCol,\n    BCard,\n    BCardBody,\n    BCardFooter,\n    BInputGroup,\n    BFormInput,\n    BInputGroupAppend,\n    BButton,\n    BAvatar,\n    BCardTitle,\n    vSelect,\n    DashboardCardHorizontal\n  },\n\n  data() {\n    const chains = getLocalChains();\n    return {\n      showPrevote: false,\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      chains,\n      vals: [],\n      positions: [],\n      updatetime: new Date(),\n      rpc: '',\n      height: '-',\n      round: '-',\n      step: '-',\n      rate: '-'\n    };\n  },\n\n  computed: {\n    selected() {\n      return this.$store.state.chains.selected.chain_name;\n    }\n\n  },\n\n  created() {\n    this.validators();\n    this.rpc = `${this.chains[this.selected].rpc[0]}/consensus_state`;\n    this.fetchPosition();\n    this.update();\n    this.timer = setInterval(this.update, 6000);\n  },\n\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n\n  methods: {\n    format: v => toDay(v, 'time'),\n\n    color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'dark' : 'primary';\n      }\n\n      return txt === 'nil-Vote' ? 'secondary' : 'success';\n    },\n\n    fetchPosition() {\n      const dumpurl = this.rpc.replace('consensus_state', 'dump_consensus_state');\n      fetch(dumpurl).then(data => {\n        this.httpstatus = data.status;\n        this.httpStatusText = data.httpStatusText;\n        return data.json();\n      }).then(res => {\n        this.positions = res.result.round_state.validators.validators;\n      });\n    },\n\n    update() {\n      this.rate = '0%';\n      this.updatetime = new Date();\n\n      if (this.httpstatus === 200) {\n        fetch(this.rpc).then(data => {\n          this.httpstatus = data.status;\n          this.httpStatusText = data.httpStatusText;\n          return data.json();\n        }).then(res => {\n          this.roundState = res.result.round_state;\n          const raw = this.roundState['height/round/step'].split('/'); // eslint-disable-next-line prefer-destructuring\n\n          this.height = raw[0]; // eslint-disable-next-line prefer-destructuring\n\n          this.round = raw[1]; // eslint-disable-next-line prefer-destructuring\n\n          this.step = raw[2]; // find the highest onboard rate\n\n          this.roundState.height_vote_set.forEach(element => {\n            const rate = Number(element.prevotes_bit_array.substring(element.prevotes_bit_array.length - 4));\n\n            if (rate > 0) {\n              this.rate = `${(rate * 100).toFixed()}%`;\n            }\n          });\n        }).catch(err => {\n          this.httpstatus = 500;\n          this.httpStatusText = err;\n        });\n      }\n    },\n\n    validators() {\n      const conf = this.chains[this.selected];\n      let vals = [];\n      this.$http.getValidatorList(conf).then(data => {\n        vals = data;\n      }).catch(() => {\n        vals = getCachedValidators(this.selected.chain_name) || [];\n      }).finally(() => {\n        this.vals = vals.map(x => {\n          const x2 = x;\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey);\n          return x2;\n        });\n      });\n    },\n\n    onchange() {\n      this.httpstatus = 200;\n      this.httpStatusText = '';\n      this.roundState = {}; // this.validators()\n    },\n\n    showName(i, text) {\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          const val = this.vals.find(x => x.hex === this.positions[i].address);\n          return val?.description?.moniker || i;\n        }\n\n        return i;\n      }\n\n      const txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '));\n      const sig = text.split(' ');\n      const val = this.vals.find(x => x.hex.startsWith(txt));\n      return `${val?.description?.moniker || txt} - ${sig[2]}`;\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}