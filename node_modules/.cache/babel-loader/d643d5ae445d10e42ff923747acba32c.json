{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VBTooltip, BTabs, BTab, BRow, BCol, BCard, BCardFooter, BBadge, BCardTitle, BProgress, BProgressBar, BTooltip, BAvatar } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { getLocalAccounts, getLocalChains, percent as _percent, ProposalTally, tokenFormatter } from '@/libs/utils';\nimport dayjs from 'dayjs';\nimport WalletUpgradeEvents from './WalletUpgradeEvents.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nexport default {\n  components: {\n    BAvatar: BAvatar,\n    BTab: BTab,\n    BTabs: BTabs,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardFooter: BCardFooter,\n    BCardTitle: BCardTitle,\n    BBadge: BBadge,\n    BProgress: BProgress,\n    BProgressBar: BProgressBar,\n    BTooltip: BTooltip,\n    WalletUpgradeEvents: WalletUpgradeEvents,\n    ObjectFieldComponent: ObjectFieldComponent\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple: Ripple\n  },\n  data: function data() {\n    return {\n      islive: true,\n      proposals: [],\n      descId: null,\n      tally: {},\n      // voters: [], // need to be query.\n      votes: [] // votes of voters\n\n    };\n  },\n  computed: {\n    list: function list() {\n      var _this = this;\n\n      return this.proposals.map(function (x) {\n        var x2 = x;\n        x2.tally = _this.tally[\"\".concat(x.chain.chain_name, \"-\").concat(x.id)] || new ProposalTally();\n        x2.votes = _this.votes.filter(function (v) {\n          return v.vote.proposal_id === x.id;\n        });\n        return x2;\n      }).sort(function (a, b) {\n        return dayjs(b.voting_start_time).unix() - dayjs(a.voting_start_time).unix();\n      });\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n  },\n  methods: {\n    description: function description(v) {\n      this.descId = v === this.descId ? null : v;\n    },\n    color: function color(v) {\n      switch (v) {\n        case 'VOTE_OPTION_YES':\n          return 'success';\n\n        case 'VOTE_OPTION_NO':\n          return 'warning';\n\n        case 'VOTE_OPTION_NOWITHVETO':\n          return 'danger';\n\n        case 'VOTE_OPTION_ABSTAIN':\n          return 'info';\n\n        default:\n          return 'danger';\n      }\n    },\n    keyname: function keyname(addr) {\n      var key = Object.values(this.accounts).find(function (k) {\n        return k.address.findIndex(function (a) {\n          return a.addr === addr;\n        }) > -1;\n      });\n      return key ? key.name : addr.substring(addr.length - 6);\n    },\n    formatType: function formatType(v) {\n      var txt = String(v).replace('Proposal', '');\n      var index = txt.lastIndexOf('.');\n      return index > 0 ? txt.substring(index + 1) : txt;\n    },\n    percent: function percent(v) {\n      return _percent(v);\n    },\n    formatDate: function formatDate(v) {\n      return dayjs(v).format('YYYY-MM-DD');\n    },\n    formatToken: function formatToken(v) {\n      return tokenFormatter(v, {});\n    },\n    formatOption: function formatOption(v) {\n      var start = String(v).lastIndexOf('_');\n\n      if (start > 0) {\n        return String(v).substring(start + 1);\n      }\n\n      return v;\n    },\n    init: function init() {\n      var _this2 = this;\n\n      this.accounts = getLocalAccounts();\n\n      if (this.accounts) {\n        var chains = getLocalChains();\n        var toQuery = {};\n        Object.keys(this.accounts).forEach(function (acc) {\n          _this2.accounts[acc].address.forEach(function (add) {\n            var conf = chains[add.chain];\n\n            if (conf) {\n              if (toQuery[add.chain]) {\n                toQuery[add.chain].addresses.push(add.addr);\n              } else {\n                toQuery[add.chain] = {\n                  conf: conf,\n                  addresses: [add.addr]\n                };\n              }\n            }\n          });\n        });\n        Object.values(toQuery).forEach(function (item) {\n          _this2.fetchProposals(item);\n        });\n      }\n    },\n    fetchProposals: function fetchProposals(item) {\n      var _this3 = this;\n\n      if (this.islive) {\n        var promise = Promise.resolve(); // identities.forEach(item => {\n        //   promise = promise.then(() => new Promise(resolve => {\n        //     this.avatar(item, resolve)\n        //   }))\n        // })\n\n        this.$http.getGovernanceListByStatus(2, item.conf).then(function (data) {\n          data.proposals.forEach(function (p) {\n            var p2 = p;\n            p2.chain = item.conf;\n\n            _this3.proposals.push(p2);\n\n            item.addresses.forEach(function (a) {\n              // this.fetchMyVote(p.id, a, item.conf)\n              // this.voters.push({ pid: p.id, addr: a, conf: item.conf })\n              promise = promise.then(function () {\n                return new Promise(function (resolve) {\n                  _this3.fetchMyVote(p.id, a, item.conf, resolve);\n                });\n              });\n            });\n          });\n\n          _this3.updateTally(data.proposals, item.conf);\n        }, function (err) {\n          throw new Error(err);\n        });\n      }\n    },\n    fetchMyVote: function fetchMyVote(pid, addr, conf, resolve) {\n      var _this4 = this;\n\n      if (this.islive) {\n        this.$http.getGovernanceProposalVote(pid, addr, conf).then(function (data) {\n          resolve();\n          var x = data;\n          x.keyname = _this4.keyname(data.vote.voter);\n\n          _this4.votes.push(x);\n        }).catch(function () {\n          resolve();\n        });\n      }\n    },\n    updateTally: function updateTally(voting, chain) {\n      var _this5 = this;\n\n      if (voting.length > 0) {\n        voting.forEach(function (p) {\n          return _this5.$http.getGovernanceTally(p.id, 0, chain).then(function (update) {\n            _this5.$set(_this5.tally, \"\".concat(chain.chain_name, \"-\").concat(p.id), update);\n          });\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}