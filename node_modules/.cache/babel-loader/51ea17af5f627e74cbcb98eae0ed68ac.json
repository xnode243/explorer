{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport fetch from 'node-fetch'; // import axios from 'axios'\n\nimport store from '@/store';\nimport compareVersions from 'compare-versions';\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx';\nimport { fromHex, toBase64 } from '@cosmjs/encoding';\nimport { Proposal, ProposalTally, Proposer, StakingPool, Votes, Deposit, Validator, StakingParameters, Block, ValidatorDistribution, StakingDelegation, WrapStdTx, getUserCurrency } from './utils';\nimport OsmosAPI from './osmos';\n\nfunction commonProcess(res) {\n  if (res && Object.keys(res).includes('result')) {\n    return res.result;\n  }\n\n  return res;\n} // 头像\n\n\nexport function keybase(identity) {\n  return fetch(`https://keybase.io/_/api/1.0/user/lookup.json?key_suffix=${identity}&fields=pictures`).then(res => res.json());\n}\nexport default class ChainFetch {\n  constructor() {\n    this.osmosis = new OsmosAPI();\n    this.EndpointVersion = {\n      certik: 'v1alpha1'\n    };\n  }\n\n  getEndpointVersion() {\n    return this.EndpointVersion[this.config.chain_name] || 'v1beta1';\n  }\n\n  getSelectedConfig() {\n    let chain = store.state.chains.selected;\n    const lschains = localStorage.getItem('chains');\n\n    if (lschains) {\n      chain = JSON.parse(lschains)[chain?.chain_name || 'cosmos'];\n    }\n\n    if (!chain.sdk_version) {\n      chain.sdk_version = '0.33';\n    }\n\n    this.config = chain;\n    return this.config;\n  }\n\n  isModuleLoaded(name) {\n    if (this.config.unload_module) {\n      return !this.config.unload_module.includes(name);\n    }\n\n    return true;\n  }\n\n  async getNodeInfo() {\n    return this.get('/cosmos/base/tendermint/v1beta1/node_info');\n  }\n\n  async getLatestBlock(config = null) {\n    const conf = config || this.getSelectedConfig();\n    const ver = conf.sdk_version || '0.41';\n\n    if (ver && compareVersions(ver, '0.45') < 1) {\n      return this.get('/blocks/latest', config).then(data => Block.create(data)).then(block => {\n        block.block.last_commit.signatures.map(s1 => {\n          const s = s1;\n          s.validator_address = toBase64(fromHex(s.validator_address));\n          return s;\n        });\n        return block;\n      });\n    }\n\n    return this.get('/cosmos/base/tendermint/v1beta1/blocks/latest', config).then(data => Block.create(data));\n  }\n\n  async getBlockByHeight(height, config = null) {\n    const conf = config || this.getSelectedConfig();\n    const ver = conf.sdk_version || '0.41';\n\n    if (ver && compareVersions(ver, '0.45') < 1) {\n      return this.get('/blocks/latest', config).then(data => Block.create(data)).then(block => {\n        block.block.last_commit.signatures.map(s1 => {\n          const s = s1;\n          s.validator_address = toBase64(fromHex(s.validator_address));\n          return s;\n        });\n        return block;\n      });\n    }\n\n    return this.get(`/cosmos/base/tendermint/v1beta1/blocks/${height}`, config).then(data => Block.create(data));\n  }\n\n  async getSlashingSigningInfo(config = null) {\n    return this.get('/cosmos/slashing/v1beta1/signing_infos?pagination.limit=500', config);\n  }\n\n  async getTxs(hash, config = null) {\n    const conf = config || this.getSelectedConfig();\n    const ver = conf.sdk_version || '0.41'; // /cosmos/tx/v1beta1/txs/{hash}\n\n    if (ver && compareVersions(ver, '0.40') < 1) {\n      return this.get(`/txs/${hash}`).then(data => WrapStdTx.create(data, ver));\n    }\n\n    return this.get(`/cosmos/tx/v1beta1/txs/${hash}`).then(data => WrapStdTx.create(data, ver));\n  }\n\n  async getTxsBySender(sender) {\n    return this.get(`/cosmos/tx/v1beta1/txs?events=message.sender='${sender}'&pagination.reverse=true&order_by=ORDER_BY_DESC`);\n  }\n\n  async getTxsByRecipient(recipient) {\n    return this.get(`/cosmos/tx/v1beta1/txs?message.recipient=${recipient}`);\n  }\n\n  async getTxsByHeight(height) {\n    return this.get(`/cosmos/tx/v1beta1/txs?events=tx.height=${height}`);\n  }\n\n  async getValidatorDistribution(address) {\n    // return this.get(`/distribution/validators/${address}`).then(data => {\n    //   const value = commonProcess(data)\n    //   const ret = ValidatorDistribution.create({\n    //     operator_address: address,\n    //     self_bond_rewards: value.self_bond_rewards,\n    //     val_commission: value.val_commission.commission,\n    //   })\n    //   return ret\n    // })\n    return Promise.all([this.get(`/cosmos/distribution/v1beta1/validators/${address}/commission`, null, true), this.get(`/cosmos/distribution/v1beta1/validators/${address}/outstanding_rewards`, null, true)]).then(data => {\n      const ret = ValidatorDistribution.create({\n        operator_address: address,\n        self_bond_rewards: data[1].rewards.rewards,\n        val_commission: data[0].commission.commission\n      });\n      return ret;\n    });\n  }\n\n  async getStakingDelegatorDelegation(delegatorAddr, validatorAddr) {\n    return this.get(`/cosmos/staking/v1beta1/validators/${validatorAddr}/delegations/${delegatorAddr}`).then(data => StakingDelegation.create(commonProcess(data).delegation_response));\n  }\n\n  async getBankTotal(denom) {\n    if (compareVersions(this.config.sdk_version, '0.46.5') > 0) {\n      return this.get(`/cosmos/bank/v1beta1/supply/by_denom?denom=${denom}`).then(data => commonProcess(data).amount);\n    }\n\n    if (compareVersions(this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/supply/total/${denom}`).then(data => ({\n        amount: commonProcess(data),\n        denom\n      }));\n    }\n\n    return this.get(`/cosmos/bank/v1beta1/supply/${denom}`).then(data => commonProcess(data).amount);\n  }\n\n  async getBankTotals() {\n    if (compareVersions(this.config.sdk_version, '0.40') < 0) {\n      return this.get('/supply/total').then(data => commonProcess(data));\n    }\n\n    return this.get('/cosmos/bank/v1beta1/supply').then(data => data.supply);\n  }\n\n  async getStakingPool() {\n    return this.get('/cosmos/staking/v1beta1/pool', null, true).then(data => new StakingPool().init(commonProcess(data.pool)));\n  }\n\n  async getMintingInflation() {\n    if (this.config.chain_name === 'evmos') {\n      return this.get('/evmos/inflation/v1/inflation_rate').then(data => Number(data.inflation_rate / 100 || 0));\n    }\n\n    if (this.config.chain_name === 'echelon') {\n      return this.get('/echelon/inflation/v1/inflation_rate').then(data => Number(data.inflation_rate / 100 || 0));\n    }\n\n    if (this.isModuleLoaded('minting')) {\n      return this.get('/cosmos/mint/v1beta1/inflation').then(data => Number(commonProcess(data.inflation)));\n    }\n\n    return 0;\n  }\n\n  async getStakingParameters() {\n    return this.get('/cosmos/staking/v1beta1/params', null, true).then(data => {\n      this.getSelectedConfig();\n      return StakingParameters.create(commonProcess(data.params), this.config.chain_name);\n    });\n  }\n\n  async getValidatorList(config = null) {\n    return this.get('/cosmos/staking/v1beta1/validators?pagination.limit=200&status=BOND_STATUS_BONDED', config, true).then(data => {\n      const vals = commonProcess(data.validators).map(i => new Validator().init(i));\n\n      try {\n        localStorage.setItem(`validators-${this.config.chain_name}`, JSON.stringify(vals));\n      } catch (err) {\n        // clear cache\n        for (let i = 0; i < localStorage.length; i += 1) {\n          const key = localStorage.key(i);\n\n          if (key.startsWith('validators')) {\n            localStorage.removeItem(key);\n          }\n        } // set again\n\n\n        localStorage.setItem(`validators-${this.config.chain_name}`, JSON.stringify(vals));\n      }\n\n      return vals;\n    });\n  }\n\n  async getValidatorUnbondedList() {\n    return this.get('/cosmos/staking/v1beta1/validators?pagination.limit=100&status=BOND_STATUS_UNBONDED', null, true).then(data => {\n      const result = commonProcess(data.validators);\n      const vals = result.validators ? result.validators : result;\n      return vals.map(i => new Validator().init(i));\n    });\n  }\n\n  async getValidatorListByStatus(status) {\n    return this.get(`/cosmos/staking/v1beta1/validators?status=${status}&pagination.limit=500`, null, true).then(data => {\n      const result = commonProcess(data);\n      const vals = result.validators ? result.validators : result;\n      return vals.map(i => new Validator().init(i));\n    });\n  }\n\n  async getValidatorListByHeight(height, offset) {\n    return this.get(`/cosmos/base/tendermint/v1beta1/validatorsets/${height}?pagination.limit=100&pagination.offset=${offset}`).then(data => commonProcess(data));\n  }\n\n  async getStakingValidator(address) {\n    return this.get(`/cosmos/staking/v1beta1/validators/${address}`, null, true).then(data => new Validator().init(commonProcess(data).validator));\n  }\n\n  async getSlashingParameters() {\n    if (this.isModuleLoaded('slashing')) {\n      return this.get('/cosmos/slashing/v1beta1/params').then(data => commonProcess(data.params));\n    }\n\n    return null;\n  }\n\n  async getMintParameters() {\n    if (this.config.chain_name === 'evmos') {\n      const result = await this.get('/evmos/inflation/v1/params').then(data => data.params);\n      await this.get('/evmos/inflation/v1/period').then(data => {\n        Object.entries(data).forEach(x => {\n          const k = x[0];\n          const v = x[1];\n          result[k] = v;\n        });\n      });\n      await this.get('/evmos/inflation/v1/total_supply').then(data => {\n        Object.entries(data).forEach(x => {\n          const k = x[0];\n          const v = x[1];\n          result[k] = v;\n        });\n      });\n      return result;\n    }\n\n    if (this.config.chain_name === 'echelon') {\n      const result = await this.get('/echelon/inflation/v1/params').then(data => data.params);\n      await this.get('/echelon/inflation/v1/period').then(data => {\n        Object.entries(data).forEach(x => {\n          const k = x[0];\n          const v = x[1];\n          result[k] = v;\n        });\n      });\n      await this.get('/echelon/inflation/v1/total_supply').then(data => {\n        Object.entries(data).forEach(x => {\n          const k = x[0];\n          const v = x[1];\n          result[k] = v;\n        });\n      });\n      return result;\n    }\n\n    if (this.isModuleLoaded('minting')) {\n      return this.get('/cosmos/mint/v1beta1/params').then(data => commonProcess(data.params));\n    }\n\n    return null;\n  }\n\n  async getDistributionParameters() {\n    return this.get('/cosmos/distribution/v1beta1/params', null, true).then(data => commonProcess(data.params));\n  }\n\n  async getGovernanceParameterDeposit() {\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/params/deposit`).then(data => commonProcess(data.deposit_params));\n  }\n\n  async getGovernanceParameterTallying() {\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/params/tallying`).then(data => commonProcess(data.tally_params));\n  }\n\n  async getGovernanceParameterVoting() {\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/params/voting`).then(data => commonProcess(data.voting_params));\n  }\n\n  async getGovernanceTally(pid, total, conf) {\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/proposals/${pid}/tally`, conf).then(data => new ProposalTally().init(commonProcess(data).tally, total));\n  }\n\n  getGovernance(pid) {\n    if (this.config.chain_name === 'shentu') {\n      return this.get(`/shentu/gov/v1alpha1/proposals/${pid}`).then(data => {\n        const p = new Proposal().init(commonProcess(data).proposal, 0);\n        return p;\n      });\n    }\n\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/proposals/${pid}`).then(data => {\n      const p = new Proposal().init(commonProcess(data).proposal, 0);\n      p.versionFixed(this.config.sdk_version);\n      return p;\n    });\n  }\n\n  async getGovernanceProposer(pid) {\n    if (this.config.chain_name === 'shentu') {\n      return this.get(`/shentu/gov/v1alpha1/${pid}/proposer`).then(data => new Proposer().init(commonProcess(data)));\n    }\n\n    return this.get(`/gov/proposals/${pid}/proposer`).then(data => new Proposer().init(commonProcess(data)));\n  }\n\n  async getGovernanceDeposits(pid) {\n    if (this.config.chain_name === 'shentu') {\n      return this.get(`/shentu/gov/v1alpha1/proposals/${pid}/deposits`).then(data => {\n        const result = commonProcess(data);\n        return Array.isArray(result) ? result.reverse().map(d => new Deposit().init(d)) : result;\n      });\n    }\n\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/proposals/${pid}/deposits`).then(data => {\n      const result = commonProcess(data);\n      return Array.isArray(result) ? result.reverse().map(d => new Deposit().init(d)) : result;\n    });\n  }\n\n  async getGovernanceVotes(pid, next = '', limit = 50) {\n    if (compareVersions(this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/cosmos/gov/v1beta1/proposals/${pid}/votes`).then(data => ({\n        votes: commonProcess(data).map(d => new Votes().init(d)),\n        pagination: {}\n      }));\n    }\n\n    if (this.config.chain_name === 'shentu') {\n      return this.get(`/shentu/gov/v1alpha1/proposals/${pid}/votes?pagination.key=${encodeURIComponent(next)}&pagination.limit=${limit}&pagination.reverse=true`);\n    }\n\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    return this.get(`/cosmos/gov/${ver}/proposals/${pid}/votes?pagination.key=${encodeURIComponent(next)}&pagination.limit=${limit}&pagination.reverse=true`);\n  }\n\n  async getGovernanceListByStatus(status, chain = null) {\n    const conf = chain || this.config;\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    const url = conf.chain_name === 'shentu' ? `/shentu/gov/v1alpha1/proposals?pagination.limit=100&proposal_status=${status}` : `/cosmos/gov/${ver}/proposals?pagination.limit=100&proposal_status=${status}`;\n    return this.get(url, conf).then(data => {\n      let proposals = commonProcess(data);\n\n      if (Array.isArray(proposals.proposals)) {\n        proposals = proposals.proposals;\n      }\n\n      const ret = [];\n\n      if (proposals) {\n        proposals.forEach(e => {\n          const g = new Proposal().init(e, 0);\n          g.versionFixed(this.config.sdk_version);\n          ret.push(g);\n        });\n      }\n\n      return {\n        proposals: ret,\n        pagination: data.pagination\n      };\n    });\n  }\n\n  async getGovernanceProposalVote(pid, voter, chain) {\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    const url = this.config.chain_name === 'shentu' ? `/shentu/gov/v1alpha1/proposals/${pid}/votes/${voter}` : `/cosmos/gov/${ver}/proposals/${pid}/votes/${voter}`;\n    return this.get(url, chain).then(data => {\n      if (data.code === 3) {\n        throw new Error('not found');\n      }\n\n      return data;\n    });\n  } /// does NOT return value as expected\n\n\n  async getUpgradeCurrentPlan(chain = null) {\n    return this.get('/cosmos/upgrade/v1beta1/current_plan', chain);\n  }\n\n  async getGovernanceList(next = '', chain = null) {\n    const key = next || '';\n    const ver = compareVersions(this.config.sdk_version, '0.46.5') < 0 ? 'v1beta1' : 'v1';\n    const url = this.config.chain_name === 'shentu' ? `/shentu/gov/v1alpha1/proposals?pagination.limit=20&pagination.reverse=true&pagination.key=${key}` : `/cosmos/gov/${ver}/proposals?pagination.limit=20&pagination.reverse=true&pagination.key=${key}`;\n    return this.get(url, chain).then(data => {\n      let proposals = commonProcess(data);\n\n      if (Array.isArray(proposals.proposals)) {\n        proposals = proposals.proposals;\n      }\n\n      const ret = [];\n\n      if (proposals) {\n        proposals.forEach(e => {\n          const g = new Proposal().init(e, 0);\n          g.versionFixed(this.config.sdk_version);\n          ret.push(g);\n        });\n      }\n\n      return {\n        proposals: ret,\n        pagination: data.pagination\n      };\n    });\n  }\n\n  async getAuthAccount(address, config = null) {\n    return this.get('/cosmos/auth/v1beta1/accounts/'.concat(address), config).then(data => {\n      const result = commonProcess(data);\n      return result;\n    });\n  }\n\n  async getBankAccountBalance(address) {\n    return this.get('/cosmos/bank/v1beta1/balances/'.concat(address)).then(data => commonProcess(data).balances);\n  }\n\n  async getStakingReward(address, config = null) {\n    if (compareVersions(config ? config.sdk_version : this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/distribution/delegators/${address}/rewards`, config, true).then(data => commonProcess(data));\n    }\n\n    return this.get(`/cosmos/distribution/v1beta1/delegators/${address}/rewards`, config, true).then(data => commonProcess(data));\n  }\n\n  async getValidatorSlashs(address, config = null) {\n    return this.get(`/cosmos/distribution/v1beta1/validators/${address}/slashes`, config, true).then(data => commonProcess(data));\n  }\n\n  async getStakingValidators(address) {\n    return this.get(`/cosmos/distribution/v1beta1/delegators/${address}/validators?pagination.size=200`, null, true).then(data => commonProcess(data.validators));\n  }\n\n  async getStakingDelegations(address, config = null) {\n    if (compareVersions(config ? config.sdk_version : this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/staking/delegators/${address}/delegations`, config, true).then(data => commonProcess(data).map(x => {\n        const xh = x;\n\n        if (!xh.delegation) {\n          xh.delegation = {\n            validator_address: x.validator_address,\n            delegator_address: x.delegator_address\n          };\n        }\n\n        return xh;\n      }));\n    }\n\n    return this.get(`/cosmos/staking/v1beta1/delegations/${address}`, config, true).then(data => commonProcess(data));\n  }\n\n  async getStakingRedelegations(address, config = null) {\n    if (compareVersions(config ? config.sdk_version : this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/staking/redelegations?delegator=${address}`, config, true).then(data => commonProcess(data));\n    }\n\n    return this.get(`/cosmos/staking/v1beta1/delegators/${address}/redelegations`, config, true).then(data => commonProcess(data));\n  }\n\n  async getStakingUnbonding(address, config = null) {\n    if (compareVersions(config ? config.sdk_version : this.config.sdk_version, '0.40') < 0) {\n      return this.get(`/staking/delegators/${address}/unbonding_delegations`, config, true).then(data => commonProcess(data));\n    }\n\n    return this.get(`/cosmos/staking/v1beta1/delegators/${address}/unbonding_delegations`, config, true).then(data => commonProcess(data));\n  }\n\n  async getBankBalances(address, config = null) {\n    return this.get('/cosmos/bank/v1beta1/balances/'.concat(address), config).then(data => commonProcess(data));\n  }\n\n  async getCommunityPool(config = null) {\n    return this.get('/cosmos/distribution/v1beta1/community_pool', config, true).then(data => commonProcess(data));\n  }\n\n  async getAllIBCDenoms(config = null) {\n    const conf = config || this.getSelectedConfig();\n    const sdkVersion = conf.sdk_version;\n\n    if (compareVersions(sdkVersion, '0.44.2') < 0) {\n      return this.get('/ibc/applications/transfer/v1beta1/denom_traces?pagination.limit=500', conf).then(data => commonProcess(data));\n    }\n\n    return this.get('/ibc/apps/transfer/v1/denom_traces?pagination.limit=500', conf).then(data => commonProcess(data));\n  }\n\n  async getIBCDenomTrace(hash, config = null) {\n    const h = hash.substring(hash.indexOf('/') + 1);\n    const sdkVersion = config ? config.sdk_version : this.config.sdk_version;\n\n    if (compareVersions(sdkVersion, '0.44.2') < 0) {\n      return this.get('/ibc/applications/transfer/v1beta1/denom_traces/'.concat(h), config).then(data => commonProcess(data));\n    }\n\n    return this.get('/ibc/apps/transfer/v1/denom_traces/'.concat(h), config).then(data => commonProcess(data));\n  }\n\n  async getIBCChannels(config = null, key = null) {\n    if (key) {\n      return this.get('/ibc/core/channel/v1/channels?pagination.key='.concat(key), config).then(data => commonProcess(data));\n    }\n\n    return this.get('/ibc/core/channel/v1/channels?pagination.limit=1000', config).then(data => commonProcess(data));\n  } // eslint-disable-next-line camelcase\n\n\n  async getIBCChannelClientState(channel_id, port_id, config = null) {\n    // eslint-disable-next-line camelcase\n    return this.get(`/ibc/core/channel/v1/channels/${channel_id}/ports/${port_id}/client_state`, config).then(data => commonProcess(data));\n  } // eslint-disable-next-line camelcase\n\n\n  async getIBCChannel(channel_id, port_id, config = null) {\n    // eslint-disable-next-line camelcase\n    return this.get(`/ibc/core/channel/v1/channels/${channel_id}/ports/${port_id}`, config).then(data => commonProcess(data));\n  }\n\n  static async getBankBalance(baseurl, address) {\n    return ChainFetch.fetch(baseurl, '/cosmos/bank/v1beta1/balances/'.concat(address)).then(data => commonProcess(data));\n  }\n\n  async getGravityPools() {\n    return this.get('/cosmos/liquidity/v1beta1/pools').then(data => commonProcess(data));\n  }\n\n  async getMarketChart(days = 14, coin = null) {\n    const conf = this.getSelectedConfig();\n    const currency = getUserCurrency();\n\n    if (conf.assets[0] && conf.assets[0].coingecko_id) {\n      return ChainFetch.fetch(' https://api.coingecko.com', `/api/v3/coins/${coin || conf.assets[0].coingecko_id}/market_chart?vs_currency=${currency}&days=${days}`);\n    }\n\n    return null;\n  }\n\n  async getCoinInfo(coin = null) {\n    const conf = this.getSelectedConfig();\n\n    if (conf.assets[0] && conf.assets[0].coingecko_id) {\n      return ChainFetch.fetch(' https://api.coingecko.com', `/api/v3/coins/${coin || conf.assets[0].coingecko_id}`);\n    }\n\n    return null;\n  } // CoinMarketCap\n\n\n  static async fetchCoinMarketCap(url) {\n    const host = 'https://price.ping.pub';\n    return fetch(host + url).then(response => response.json());\n  }\n\n  static async fetchTokenQuote(symbol) {\n    return ChainFetch.fetchCoinMarketCap(`/quote/${symbol}`);\n  } // Simulate Execution of tx\n\n\n  async simulate(bodyBytes, config = null) {\n    const txString = toBase64(TxRaw.encode(bodyBytes).finish());\n    const txRaw = {\n      tx_bytes: txString\n    };\n    return this.post('/cosmos/tx/v1beta1/simulate', txRaw, config);\n  } // Tx Submit\n\n\n  async broadcastTx(bodyBytes, config = null) {\n    const txbytes = bodyBytes.authInfoBytes ? TxRaw.encode(bodyBytes).finish() : bodyBytes;\n    const txString = toBase64(txbytes);\n    const txRaw = {\n      tx_bytes: txString,\n      mode: 'BROADCAST_MODE_SYNC' // BROADCAST_MODE_SYNC, BROADCAST_MODE_BLOCK, BROADCAST_MODE_ASYNC\n\n    };\n    return this.post('/cosmos/tx/v1beta1/txs', txRaw, config).then(res => {\n      if (res.code && res.code !== 0) {\n        throw new Error(res.message);\n      }\n\n      if (res.tx_response && res.tx_response.code !== 0) {\n        throw new Error(res.tx_response.raw_log);\n      }\n\n      return res;\n    });\n  }\n\n  async post(url = '', data = {}, config = null) {\n    if (!config) {\n      this.getSelectedConfig();\n    }\n\n    const conf = config || this.config;\n    const index = this.getApiIndex(config); // Default options are marked with *\n\n    const response = await fetch((Array.isArray(conf.api) ? conf.api[index] : conf.api) + url, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      // mode: 'cors', // no-cors, *cors, same-origin\n      // credentials: 'same-origin', // redirect: 'follow', // manual, *follow, error\n      // referrerPolicy: 'origin', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      headers: {\n        'Content-Type': 'text/plain',\n        Accept: '*/*',\n        'Accept-Encoding': 'gzip, deflate, br'\n      },\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    }); // const response = axios.post((config ? config.api : this.config.api) + url, data)\n\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n\n  async get(url, config = null, fetch_on_provider = false) {\n    if (!config) {\n      this.getSelectedConfig();\n    }\n\n    const conf = config || this.config;\n\n    if (fetch_on_provider && conf.provider_chain) {\n      return fetch(`${conf.provider_chain.api}${url}`).then(response => response.json());\n    }\n\n    const finalurl = (Array.isArray(conf.api) ? conf.api[this.getApiIndex(config)] : conf.api) + url; // finalurl = finalurl.replaceAll('v1beta1', this.getEndpointVersion())\n\n    return fetch(finalurl).then(response => response.json());\n  }\n\n  getApiIndex(config = null) {\n    const conf = config || this.config;\n    const index = Number(localStorage.getItem(`${conf.chain_name}-api-index`) || 0);\n    return index < conf.api.length ? index : 0;\n  }\n\n  async getUrl(url) {\n    this.getSelectedConfig();\n    return fetch(url).then(res => res.json());\n  }\n\n  static fetch(host, url) {\n    const ret = fetch((Array.isArray(host) ? host[0] : host) + url).then(response => response.json());\n    return ret;\n  }\n\n} // export default chainAPI","map":null,"metadata":{},"sourceType":"module"}