{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  name: 'Redelegate',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    vSelect,\n    BInputGroupAppend,\n    ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      selectedAddress: this.address,\n      unbundValidators: [],\n      validators: [],\n      toValidator: null,\n      token: '',\n      amount: null,\n      delegations: [],\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  computed: {\n    valOptions() {\n      let options = [];\n      const vals = this.validators.map(x => ({\n        value: x.operator_address,\n        label: `${x.description.moniker} (${Number(x.commission.rate) * 100}%)`\n      }));\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      const unbunded = this.unbundValidators.map(x => ({\n        value: x.operator_address,\n        label: `* ${x.description.moniker} (${Number(x.commission.rate) * 100}%)`\n      }));\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n\n    tokenOptions() {\n      const conf = this.$http.getSelectedConfig();\n      const decimal = conf.assets[0].exponent || '6';\n      if (!this.delegations) return [];\n      return this.delegations.filter(x => x.delegation.validator_address === this.validatorAddress).map(x => ({\n        value: x.balance.denom,\n        label: formatToken(x.balance, {}, decimal)\n      }));\n    },\n\n    msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',\n        value: {\n          delegatorAddress: this.address,\n          validatorSrcAddress: this.validatorAddress,\n          validatorDstAddress: this.toValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    }\n\n  },\n\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Redelegate Token',\n      historyName: 'redelegate'\n    });\n    this.loadData();\n  },\n\n  methods: {\n    loadData() {\n      this.$http.getValidatorList().then(v => {\n        this.validators = v;\n      });\n      this.$http.getValidatorUnbondedList().then(v => {\n        this.unbundValidators = v;\n      });\n      this.$http.getStakingDelegations(this.address).then(res => {\n        this.delegations = res.delegation_responses;\n        this.delegations.forEach(x => {\n          if (x.delegation.validator_address === this.validatorAddress) {\n            this.token = x.balance.denom;\n            this.$emit('update', {\n              feeDenom: x.balance.denom\n            });\n          }\n        });\n      });\n    },\n\n    format(v) {\n      return formatToken(v);\n    },\n\n    printDenom() {\n      return formatTokenDenom(this.token);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}