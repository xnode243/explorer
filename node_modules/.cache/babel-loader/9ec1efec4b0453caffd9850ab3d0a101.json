{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  name: 'UnbondDialogue',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    vSelect,\n    BInputGroupAppend,\n    ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      validators: [],\n      token: '',\n      amount: null,\n      delegations: [],\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  computed: {\n    valOptions() {\n      return this.validators.map(x => ({\n        value: x.operator_address,\n        label: `${x.description.moniker} (${Number(x.commission.rate) * 100}%)`\n      }));\n    },\n\n    tokenOptions() {\n      if (!this.delegations) return [];\n      return this.delegations.filter(x => x.delegation.validator_address === this.validatorAddress).map(x => ({\n        value: x.balance.denom,\n        label: formatToken(x.balance)\n      }));\n    },\n\n    msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgUndelegate',\n        value: {\n          delegatorAddress: this.address,\n          validatorAddress: this.validatorAddress,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    }\n\n  },\n\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Unbond Token',\n      historyName: 'unbond'\n    });\n    this.loadData();\n  },\n\n  methods: {\n    loadData() {\n      if (this.address) {\n        this.$http.getValidatorList().then(v => {\n          this.validators = v;\n        });\n      }\n\n      this.$http.getStakingDelegations(this.address).then(res => {\n        this.delegations = res.delegation_responses;\n        this.delegations.forEach(x => {\n          if (x.delegation.validator_address === this.validatorAddress) {\n            this.token = x.balance.denom;\n            this.$emit('update', {\n              feeDenom: x.balance.denom\n            });\n          }\n        });\n      });\n    },\n\n    printDenom() {\n      return formatTokenDenom(this.token);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}