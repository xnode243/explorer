{"ast":null,"code":"import { pathToString } from '@cosmjs/crypto';\nimport { fromHex } from '@cosmjs/encoding';\nimport { ethToEvmos } from '@tharsis/address-converter';\nexport default class MetaMaskSigner {\n  static create(hdpath) {\n    const signer = new MetaMaskSigner();\n    signer.hdpath = pathToString(hdpath).replace('m/', '').replace('/60/', \"/60'/\");\n    signer.ethereum = window.ethereum;\n    return signer;\n  }\n\n  async getAccounts() {\n    // eth_accounts, eth_requestAccounts\n    return this.ethereum.request({\n      method: 'eth_accounts'\n    }).then(data => data.map(x => ({\n      pubkey: fromHex(x.substring(2)),\n      // should set to public key\n      address: ethToEvmos(x),\n      algo: 'ethsecp256k1'\n    })));\n  }\n\n  async sign(signer, eipToSign) {\n    return this.ethereum.request({\n      method: 'eth_signTypedData_v4',\n      params: [signer, JSON.stringify(eipToSign)]\n    });\n  } // signAmino: (signerAddress: string, signDoc: StdSignDoc) => Promise<AminoSignResponse>;\n\n\n}","map":null,"metadata":{},"sourceType":"module"}