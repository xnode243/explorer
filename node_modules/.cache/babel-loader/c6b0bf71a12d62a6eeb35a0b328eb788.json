{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, BCard, BButton, BPopover, BTable, BSpinner } from 'bootstrap-vue';\nimport { CoinGeckoMap, getPairName } from '@/libs/osmos';\nimport { formatTokenDenom } from '@/libs/utils';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport Place from './components/KlineTrade/Place.vue'; // import Kline from './components/kline/index.vue'\n\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BButton,\n    BPopover,\n    BTable,\n    BSpinner,\n    Place,\n    BCard,\n    FeatherIcon\n  },\n\n  beforeRouteUpdate(to, from, next) {\n    const {\n      poolid\n    } = to.params;\n    this.init(poolid);\n    next(); // }\n  },\n\n  data() {\n    return {\n      loading: true,\n      error: '',\n      base: '',\n      target: '',\n      fields: ['pair', 'price', 'change'],\n      show: false,\n      pools: [],\n      current: {},\n      denomTrace: [],\n      klineData: [],\n      marketData: {},\n      high24: 0,\n      low24: 0\n    };\n  },\n\n  computed: {\n    pairs() {\n      const pairs = this.pools.map(x => {\n        const pair = x.poolAssets.map(t => {\n          if (t.token.denom.startsWith('ibc/')) {\n            return formatTokenDenom(this.denomTrace[t.token.denom] ? this.denomTrace[t.token.denom].base_denom : ' ');\n          }\n\n          return formatTokenDenom(t.token.denom);\n        });\n        return {\n          id: x.id,\n          pair,\n          price: this.getPrice(pair),\n          change: this.getChanges(pair)\n        };\n      });\n      return pairs;\n    },\n\n    latestPrice() {\n      return this.getPrice([this.base, this.target]);\n    },\n\n    changesIn24H() {\n      return this.getChanges([this.base, this.target]);\n    },\n\n    marketChartData() {\n      if (this.marketData && this.marketData.prices) {\n        const labels = this.marketData.prices.map(x => x[0]);\n        const data = this.marketData.prices.map(x => x[1]);\n        return {\n          labels,\n          datasets: [{\n            label: 'Price',\n            data,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1,\n            pointStyle: 'dash',\n            barThickness: 15\n          }]\n        };\n      }\n\n      return {\n        labels: [],\n        datasets: []\n      };\n    }\n\n  },\n\n  created() {\n    const {\n      poolid\n    } = this.$route.params;\n    this.$http.osmosis.getDenomTraces().then(x => {\n      this.denomTrace = x;\n      this.$http.osmosis.getPools().then(pools => {\n        this.pools = pools;\n        this.init(poolid);\n      });\n    });\n  },\n\n  methods: {\n    getPrice(symbol) {\n      const p1 = this.$store.state.chains.quotes[symbol[0]];\n      const p2 = this.$store.state.chains.quotes[symbol[1]];\n      return p1 && p2 ? (p1.usd / p2.usd).toFixed(4) : '-';\n    },\n\n    getChanges(symbol) {\n      const p1 = this.$store.state.chains.quotes[symbol[0]];\n      const p2 = this.$store.state.chains.quotes[symbol[1]];\n      return p1 && p2 ? (p1.usd_24h_change / p2.usd_24h_change).toFixed(2) : '-';\n    },\n\n    init(poolid) {\n      this.high24 = 0;\n      this.low24 = 0;\n      this.current = this.pools.find(p => p.id === poolid) || this.pools[0];\n      this.base = getPairName(this.current, this.denomTrace, 'base');\n      this.target = getPairName(this.current, this.denomTrace, 'target');\n      this.$http.osmosis.getMarketData(CoinGeckoMap[this.base], CoinGeckoMap[this.target]).then(res => {\n        this.marketData = res;\n        this.loading = false;\n        const start = Date.now() - 8.64e+7;\n        res.prices.forEach(x => {\n          if (x[0] > start) {\n            if (x[1] > this.high24) {\n              // eslint-disable-next-line prefer-destructuring\n              this.high24 = x[1];\n            }\n\n            if (x[1] < this.low24 || this.low24 === 0) {\n              // eslint-disable-next-line prefer-destructuring\n              this.low24 = x[1];\n            }\n          }\n        });\n      }).catch(e => {\n        this.error = `This feature is not avalable in your country. \\n这个功能尚未对你的国家开放。${e}`;\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}