{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardBody, BCardFooter, BButton, BTable, BTableSimple, BTr, BTd, BCardTitle, BCardHeader, BProgressBar, BProgress, BTooltip, BBadge, BFormSelect, BFormSelectOption, BInputGroup, BInputGroupPrepend } from 'bootstrap-vue';\nimport FlipCountdown from 'vue2-flip-countdown'; // import fetch from 'node-fetch'\n\nimport { getCachedValidators, getStakingValidatorByAccount, percent, tokenFormatter } from '@/libs/utils';\nimport { Proposal, Proposer } from '@/libs/data';\nimport dayjs from 'dayjs';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue'; // import { formatToken } from '@/libs/data/data'\n\nexport default {\n  components: {\n    BCard,\n    BCardTitle,\n    BCardBody,\n    BCardFooter,\n    BButton,\n    BTable,\n    BTableSimple,\n    BCardHeader,\n    BTr,\n    BTd,\n    BProgressBar,\n    BProgress,\n    BTooltip,\n    BBadge,\n    BFormSelect,\n    BFormSelectOption,\n    BInputGroup,\n    BInputGroupPrepend,\n    ObjectFieldComponent,\n    FlipCountdown,\n    OperationModal\n  },\n\n  data() {\n    return {\n      blocktime: 6,\n      tallyParam: null,\n      latest: {},\n      next: null,\n      proposal: new Proposal(),\n      proposer: new Proposer(),\n      totalPower: 0,\n      deposits: [],\n      votes: [],\n      operationModalType: '',\n      from: '../gov',\n      votes_fields: [{\n        key: 'voter',\n        sortable: true,\n        formatter: v => this.formatAddress(v)\n      }, {\n        key: 'option',\n        sortable: true,\n        formatter: value => {\n          switch (value) {\n            case 1:\n            case 'VOTE_OPTION_YES':\n              return 'Yes';\n\n            case 2:\n            case 'VOTE_OPTION_ABSTAIN':\n              return 'Abstain';\n\n            case 3:\n            case 'VOTE_OPTION_NO':\n              return 'No';\n\n            case 4:\n            case 'VOTE_OPTION_NO_WITH_VETO':\n              return 'No With Veto';\n\n            default:\n              return value;\n          }\n        }\n      }],\n      deposit_fields: [{\n        key: 'depositor',\n        formatter: v => this.formatAddress(v)\n      }, {\n        key: 'amount',\n        sortable: true,\n        formatter: tokenFormatter\n      }]\n    };\n  },\n\n  computed: {\n    upgradeTime() {\n      if (this.proposal.type.indexOf('SoftwareUpgrade') > 0) {\n        if (Number(this.proposal?.contents.plan.height || 0) > 0 && this.latest?.block) {\n          const blocks = Number(this.proposal.contents.plan.height) - Number(this.latest.block?.header?.height || 0);\n\n          if (blocks > 0) {\n            const endtime = dayjs().add(blocks * this.blocktime, 'second').format('YYYY-MM-DD HH:mm:ss');\n            return endtime;\n          }\n        }\n\n        return dayjs(this.proposal.contents.plan.time).format('YYYY-MM-DD HH:mm:ss');\n      }\n\n      return '0001-01-01 00:00:00';\n    }\n\n  },\n\n  created() {\n    this.$http.getGovernanceParameterTallying().then(res => {\n      this.tallyParam = res;\n    });\n    const pid = this.$route.params.proposalid;\n\n    if (this.$route.query.from) {\n      this.from = this.$route.query.from;\n    }\n\n    this.$http.getLatestBlock().then(res => {\n      this.latest = res;\n    });\n    this.$http.getGovernance(pid).then(p => {\n      if (p.status === 2) {\n        this.$http.getStakingPool().then(pool => {\n          this.totalPower = pool.bondedToken;\n          this.$http.getGovernanceTally(pid, 0).then(t => p.updateTally(t));\n        });\n      }\n\n      this.proposal = p;\n    });\n\n    if (!getCachedValidators()) {\n      this.$http.getValidatorList();\n    } // this.$http.getGovernanceProposer(pid).then(res => {\n    //   this.proposer = res\n    // })\n\n\n    this.$http.getGovernanceDeposits(pid).then(res => {\n      this.deposits = res;\n    }).catch(() => {});\n    this.$http.getGovernanceVotes(pid).then(res => {\n      this.votes = res;\n      this.next = res.pagination ? res.pagination.next_key : null;\n    });\n  },\n\n  methods: {\n    scaleWidth(p) {\n      if (this.tallyParam) {\n        if (p.status === 2) {\n          return Number(this.tallyParam.quorum) * Number(this.tallyParam.threshold) * (1 - p.tally.abstain) * 100;\n        }\n\n        return Number(this.tallyParam.threshold) * (1 - p.tally.abstain) * 100;\n      }\n\n      return 50;\n    },\n\n    percent: v => percent(v),\n    formatDate: v => dayjs(v).format('YYYY-MM-DD HH:mm'),\n    formatToken: v => tokenFormatter(v, {}),\n\n    loadVotes() {\n      if (this.next) {\n        const pid = this.$route.params.proposalid;\n        const {\n          next\n        } = this;\n        this.next = null;\n        this.$http.getGovernanceVotes(pid, next).then(res => {\n          this.$set(this.votes, 'votes', this.votes.votes.concat(res.votes));\n          this.next = res.pagination ? res.pagination.next_key : null;\n        });\n      }\n    },\n\n    formatAddress(v) {\n      return getStakingValidatorByAccount(this.$http.config.chain_name, v);\n    },\n\n    openModal(type) {\n      this.operationModalType = type;\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}