{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BSkeleton, BSkeletonWrapper, BInputGroupAppend, BTabs, BTab, BFormGroup, BFormSelect, BFormSelectOption, BRow, BCol, VBTooltip, BFormInput, BCard, BAlert, BFormCheckbox, BButton, BBadge, BInputGroup, BInputGroupPrepend } from 'bootstrap-vue';\nimport { consensusPubkeyToHexAddress, getCachedValidators, timeIn, toDay } from '@/libs/utils';\nimport { fromBech32, fromHex, toBase64 } from '@cosmjs/encoding';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BCard: BCard,\n    BAlert: BAlert,\n    BButton: BButton,\n    BBadge: BBadge,\n    BFormCheckbox: BFormCheckbox,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    BInputGroup: BInputGroup,\n    BSkeleton: BSkeleton,\n    BSkeletonWrapper: BSkeletonWrapper,\n    BInputGroupPrepend: BInputGroupPrepend,\n    BInputGroupAppend: BInputGroupAppend,\n    BTabs: BTabs,\n    BTab: BTab\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    var chain = this.$route.params.chain;\n    var pinned = localStorage.getItem('pinned') ? localStorage.getItem('pinned').split(',') : '';\n    return {\n      height: 0,\n      loading: true,\n      missedFilter: false,\n      pinned: pinned,\n      chain: chain,\n      query: '',\n      validators: [],\n      missing: {},\n      blocks: Array.from('0'.repeat(50)).map(function (x) {\n        return {\n          sigs: {},\n          height: Number(x)\n        };\n      }),\n      syncing: false,\n      latestTime: '',\n      threshold: 10,\n      proposers: {},\n      absentValsInBlock: {},\n      numOfBlock: 1000,\n      temp: 0,\n      frequency: 6000\n    };\n  },\n  computed: {\n    uptime: function uptime() {\n      var _this = this;\n\n      var vals = this.query ? this.validators.filter(function (x) {\n        return String(x.description.moniker).indexOf(_this.query) > -1;\n      }) : this.validators;\n      vals.sort(function (a, b) {\n        return b.delegator_shares - a.delegator_shares;\n      });\n      var rets = vals.map(function (x) {\n        return {\n          validator: x.description,\n          address: _this.hex2base64(consensusPubkeyToHexAddress(x.consensus_pubkey))\n        };\n      });\n\n      if (this.missedFilter) {\n        return rets.filter(function (x) {\n          return _this.missing[x.address].missed_blocks_counter > 0;\n        });\n      }\n\n      return rets;\n    },\n    // Compose data for group by proposer\n    proposerViewData: function proposerViewData() {\n      var _this2 = this;\n\n      var valCounter = {};\n      this.validators.forEach(function (x) {\n        valCounter[_this2.hex2base64(consensusPubkeyToHexAddress(x.consensus_pubkey))] = {\n          name: x.description.moniker,\n          counter: 0,\n          proposed: 0\n        };\n      });\n      Object.keys(this.proposers).forEach(function (height) {\n        var num = _this2.absentValsInBlock[height] || 0;\n\n        if (valCounter[_this2.proposers[height]]) {\n          if (num > _this2.threshold) {\n            valCounter[_this2.proposers[height]].counter += 1; // (num >= Number(this.threshold) ? 1 : 0)\n          }\n\n          valCounter[_this2.proposers[height]].proposed += 1;\n        }\n      });\n      return Object.values(valCounter).sort(function (a, b) {\n        return b.counter - a.counter;\n      });\n    },\n    h: function h() {\n      return this.height;\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    var cached = JSON.parse(getCachedValidators(this.$route.params.chain));\n\n    if (cached) {\n      this.validators = cached;\n    }\n\n    this.fetchMissingInfo();\n    this.$http.getValidatorList().then(function (res) {\n      _this3.validators = res;\n    });\n    this.initBlocks();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.blocks = []; // clear running tasks if it is not finish\n\n    this.syncing = false;\n    clearInterval(this.timer);\n  },\n  methods: {\n    fetchMissingInfo: function fetchMissingInfo() {\n      var _this4 = this;\n\n      this.$http.getSlashingSigningInfo().then(function (res) {\n        if (res.info) {\n          res.info.forEach(function (x) {\n            if (x.address) {\n              var hex = toBase64(fromBech32(x.address).data);\n              _this4.missing[hex] = x;\n            }\n          });\n        }\n      });\n    },\n    pinValidator: function pinValidator() {\n      localStorage.setItem('pinned', this.pinned);\n    },\n    initBlocks: function initBlocks() {\n      var _this5 = this;\n\n      this.$http.getLatestBlock().then(function (d) {\n        var height = d.block.last_commit.height;\n\n        if (timeIn(d.block.header.time, 3, 'm')) {\n          _this5.syncing = true;\n        } else {\n          _this5.syncing = false;\n        }\n\n        _this5.latestTime = toDay(d.block.header.time, 'long');\n        var blocks = []; // update height\n\n        var promise = Promise.resolve();\n\n        var _loop = function _loop(i) {\n          blocks.unshift({\n            sigs: {},\n            height: i > 0 ? i : 0\n          });\n          promise = promise.then(function () {\n            return new Promise(function (resolve) {\n              if (i > _this5.blocks[0].height && i > 0) {\n                // filter useless loading\n                _this5.fetch_status(i, resolve);\n              } else {\n                resolve();\n              }\n            });\n          });\n        };\n\n        for (var i = height - 1; i > height - 48; i -= 1) {\n          _loop(i);\n        }\n\n        var sigs = _this5.initColor();\n\n        d.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        blocks.push({\n          sigs: sigs,\n          height: height\n        });\n        _this5.blocks = blocks;\n        _this5.timer = setInterval(_this5.fetch_latest, _this5.frequency);\n        _this5.loading = false;\n      });\n    },\n    initColor: function initColor() {\n      var _this6 = this;\n\n      var sigs = {};\n      this.validators.forEach(function (x) {\n        sigs[_this6.hex2base64(consensusPubkeyToHexAddress(x.consensus_pubkey))] = 'bg-danger';\n      });\n      return sigs;\n    },\n    onFrequencyChange: function onFrequencyChange() {\n      clearInterval(this.timer);\n      this.timer = setInterval(this.fetch_latest, this.frequency);\n    },\n    hex2base64: function hex2base64(v) {\n      return toBase64(fromHex(v));\n    },\n    fetch_status: function fetch_status(height, resolve) {\n      var _this7 = this;\n\n      this.$http.getBlockByHeight(height).then(function (res) {\n        resolve();\n\n        var block = _this7.blocks.find(function (b) {\n          return b.height === height;\n        }); // update valiators states\n\n\n        if (block) {\n          var sigs = _this7.initColor();\n\n          res.block.last_commit.signatures.forEach(function (x) {\n            if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n          });\n\n          _this7.$set(block, 'sigs', sigs);\n        } // update proposer states\n\n\n        _this7.count(res.block);\n      });\n    },\n    /// count how many absent valiators in a block\n    count: function count(block) {\n      var count = block.last_commit.signatures.reduce(function (p, c) {\n        return c.block_id_flag !== 'BLOCK_ID_FLAG_COMMIT' ? p + 1 : p;\n      }, 0); // Notes: block.header.height == last_commint.height + 1\n\n      this.$set(this.proposers, block.header.height, block.header.proposer_address);\n      this.$set(this.absentValsInBlock, block.last_commit.height, count);\n\n      if (count >= this.threshold) {\n        this.temp += 1;\n      }\n    },\n    fetch_latest: function fetch_latest() {\n      var _this8 = this;\n\n      this.$http.getLatestBlock().then(function (res) {\n        var sigs = _this8.initColor();\n\n        res.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        _this8.height = Number(res.block.header.height);\n\n        if (_this8.height % 100 === 0) {\n          // update the missing number each 100\n          _this8.fetchMissingInfo();\n        }\n\n        var block = _this8.blocks.find(function (b) {\n          return b.height === res.block.last_commit.height;\n        });\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (_this8.blocks.length >= 50) _this8.blocks.shift();\n\n          _this8.blocks.push({\n            sigs: sigs,\n            height: res.block.last_commit.height\n          });\n        }\n\n        _this8.count(res.block);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}