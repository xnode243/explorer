{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BTable, BCardTitle, BButton } from 'bootstrap-vue';\nimport { fromBase64 } from '@cosmjs/encoding';\nimport { decodeTxRaw } from '@cosmjs/proto-signing';\nimport Tx from '@/libs/data/tx';\nimport { abbrMessage, tokenFormatter } from '@/libs/utils';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nimport ArrayFieldComponent from './components/ArrayFieldComponent.vue';\nexport default {\n  components: {\n    BButton: BButton,\n    BCard: BCard,\n    BTable: BTable,\n    BCardTitle: BCardTitle,\n    ObjectFieldComponent: ObjectFieldComponent,\n    ArrayFieldComponent: ArrayFieldComponent\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    var height = to.params.height;\n\n    if (height > 0 && height !== from.params.height) {\n      this.initData(height);\n      next();\n    }\n  },\n  data: function data() {\n    return {\n      block: {\n        block: {\n          header: {},\n          data: {},\n          evidence: {}\n        }\n      },\n      txs: null,\n      height: 0,\n      fields: [{\n        key: 'hash'\n      }, {\n        key: 'fee',\n        formatter: function formatter(v) {\n          return tokenFormatter(v);\n        }\n      }, {\n        key: 'messages',\n        formatter: function formatter(v) {\n          return abbrMessage(v);\n        }\n      }, {\n        key: 'memo'\n      }]\n    };\n  },\n  created: function created() {\n    var height = this.$route.params.height;\n    this.initData(height);\n  },\n  methods: {\n    initData: function initData(height) {\n      var _this = this;\n\n      this.height = height;\n      this.$http.getBlockByHeight(height).then(function (res) {\n        _this.block = res;\n        var txs = res.block.data.txs;\n        if (txs === null) return;\n        var array = [];\n\n        for (var i = 0; i < txs.length; i += 1) {\n          var tx = new Tx();\n\n          try {\n            var origin = decodeTxRaw(fromBase64(txs[i]));\n            tx = Tx.create(origin);\n          } catch (e) {// catch errors\n          }\n\n          tx.setHash(txs[i]);\n          array.push(tx);\n        }\n\n        if (array.length > 0) _this.txs = array;\n      });\n    },\n    goblock: function goblock(height) {\n      this.$router.push({\n        name: 'block',\n        params: {\n          height: height\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}