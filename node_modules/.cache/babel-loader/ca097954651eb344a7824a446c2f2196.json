{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BButton, BAvatar, BRow, BCol, BTable, BCardFooter, VBTooltip, VBModal, BBadge, BPagination } from 'bootstrap-vue';\nimport { percent, formatToken, StakingParameters, Validator, operatorAddressToAccount, consensusPubkeyToHexAddress, toDay, abbrMessage, abbrAddress } from '@/libs/utils';\nimport { keybase } from '@/libs/fetch';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport StakingAddressComponent from './components/staking/StakingAddressComponent.vue';\nimport StakingCommissionComponent from './components/staking/StakingCommissionComponent.vue';\nimport StakingRewardComponent from './components/staking/StakingRewardComponent.vue';\nexport default {\n  components: {\n    BCard: BCard,\n    BButton: BButton,\n    BRow: BRow,\n    BCol: BCol,\n    BAvatar: BAvatar,\n    BCardFooter: BCardFooter,\n    BBadge: BBadge,\n    BPagination: BPagination,\n    BTable: BTable,\n    StakingAddressComponent: StakingAddressComponent,\n    StakingCommissionComponent: StakingCommissionComponent,\n    StakingRewardComponent: StakingRewardComponent,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    return {\n      commission: {\n        series: [90],\n        completed: 89,\n        inProgress: 64\n      },\n      selfDelegation: {\n        balance: {\n          amount: 0\n        }\n      },\n      latestHeight: 0,\n      accountAddress: '-',\n      hexAddress: '-',\n      stakingPool: {},\n      mintInflation: 0,\n      stakingParameter: new StakingParameters(),\n      validator: new Validator(),\n      address: null,\n      userData: {},\n      blocks: Array.from('0'.repeat(100)).map(function (x) {\n        return [Boolean(x), Number(x)];\n      }),\n      distribution: {},\n      transactions: {}\n    };\n  },\n  computed: {\n    txs: function txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(function (x) {\n          return {\n            height: Number(x.height),\n            txhash: x.txhash,\n            msgs: abbrMessage(x.tx.body.messages),\n            time: toDay(x.timestamp)\n          };\n        });\n      }\n\n      return [];\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getStakingPool().then(function (res) {\n      _this.stakingPool = res;\n    });\n    this.$http.getStakingParameters().then(function (res) {\n      _this.stakingParameter = res;\n    });\n    this.$http.getMintingInflation().then(function (res) {\n      _this.mintInflation = res;\n    });\n    this.address = this.$route.params.address;\n    this.initial();\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this2.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this3 = this;\n\n      this.$http.getStakingValidator(this.address).then(function (data) {\n        _this3.validator = data;\n\n        _this3.processAddress(data.operator_address, data.consensus_pubkey);\n\n        _this3.$http.getTxsBySender(_this3.accountAddress).then(function (res) {\n          _this3.transactions = res;\n        });\n\n        var identity = data.description.identity;\n        keybase(identity).then(function (d) {\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            _this3.$set(_this3.validator, 'avatar', d.them[0].pictures.primary.url);\n\n            _this3.$store.commit('cacheAvatar', {\n              identity: identity,\n              url: d.them[0].pictures.primary.url\n            });\n          }\n        });\n      });\n      this.$http.getValidatorDistribution(this.address).then(function (res) {\n        _this3.distribution = res;\n      });\n    },\n    pageload: function pageload(v) {\n      var _this4 = this;\n\n      this.$http.getTxsBySender(this.accountAddress, v).then(function (res) {\n        _this4.transactions = res;\n      });\n    },\n    formatHash: abbrAddress,\n    timeFormat: function timeFormat(value) {\n      return toDay(value);\n    },\n    percentFormat: function percentFormat(value) {\n      return percent(value);\n    },\n    processAddress: function processAddress(operAddress, consensusPubkey) {\n      var _this5 = this;\n\n      this.accountAddress = operatorAddressToAccount(operAddress);\n      this.hexAddress = consensusPubkeyToHexAddress(consensusPubkey);\n      this.$http.getStakingDelegatorDelegation(this.accountAddress, operAddress).then(function (d) {\n        _this5.selfDelegation = d;\n      });\n    },\n    tokenFormatter: function tokenFormatter(token) {\n      return formatToken({\n        amount: token,\n        denom: this.stakingParameter.bond_denom\n      });\n    },\n    apr: function apr(rate) {\n      return \"\".concat(percent((1 - rate) * this.mintInflation), \" %\");\n    },\n    fetch_status: function fetch_status(item, lastHeight) {\n      var _this6 = this;\n\n      return this.$http.getBlockByHeight(item[1]).then(function (res) {\n        if (item[1] !== lastHeight) {\n          var sigs = res.block.last_commit.signatures.find(function (s) {\n            return s.validator_address === _this6.hexAddress;\n          });\n\n          var block = _this6.blocks.find(function (b) {\n            return b[1] === item[1];\n          });\n\n          if (typeof block !== 'undefined') {\n            _this6.$set(block, 0, typeof sigs !== 'undefined');\n          }\n        }\n      });\n    },\n    fetch_latest: function fetch_latest() {\n      var _this7 = this;\n\n      this.$http.getLatestBlock().then(function (res) {\n        var sigs = res.block.last_commit.signatures.find(function (s) {\n          return s.validator_address === _this7.hexAddress;\n        });\n\n        var block = _this7.blocks.find(function (b) {\n          return b[1] === res.block.last_commit.height;\n        });\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (_this7.blocks.length > 999) _this7.blocks.shift();\n\n          _this7.blocks.push([typeof sigs !== 'undefined', res.block.last_commit.height]);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}