{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, VBTooltip, BAlert } from 'bootstrap-vue';\nimport { consensusPubkeyToHexAddress, getCachedValidators, getLocalChains } from '@/libs/utils';\nimport { fromHex, toBase64 } from '@cosmjs/encoding';\nimport UptimeMyChainBlocks from './UptimeMyChainBlocks.vue';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BAlert: BAlert,\n    UptimeMyChainBlocks: UptimeMyChainBlocks\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    var _this = this;\n\n    var pinned = (localStorage.getItem('pinned') || '').split(',').map(function (x) {\n      return x.split('#');\n    }).reduce(function (a1, b) {\n      var a = a1;\n\n      if (a[b[0]]) {\n        a[b[0]].push(b[1]);\n      } else {\n        a[b[0]] = [b[1]];\n      }\n\n      return a;\n    }, {});\n\n    if (this.$route.query.validators) {\n      pinned = JSON.parse(this.$route.query.validators);\n    }\n\n    var chainVals = {};\n\n    if (pinned) {\n      var configs = getLocalChains();\n      Object.keys(pinned).forEach(function (x) {\n        var cached = JSON.parse(getCachedValidators(x));\n\n        if (cached) {\n          var validators = [];\n          pinned[x].forEach(function (address) {\n            var val = cached.find(function (v) {\n              return address === _this.hex2base64(consensusPubkeyToHexAddress(v.consensus_pubkey));\n            });\n            if (val) validators.push({\n              address: address,\n              validator: val.description\n            });\n          });\n          chainVals[x] = validators;\n        } else {\n          _this.$http.getValidatorList(configs[x]).then(function (vals) {\n            var validators = [];\n            pinned[x].forEach(function (address) {\n              var val = vals.find(function (v) {\n                return address === _this.hex2base64(consensusPubkeyToHexAddress(v.consensus_pubkey));\n              });\n              if (val) validators.push({\n                address: address,\n                validator: val.description\n              });\n            });\n\n            _this.$set(_this.chainVals, x, validators);\n          });\n        }\n      });\n    }\n\n    return {\n      chainVals: chainVals\n    };\n  },\n  methods: {\n    hex2base64: function hex2base64(v) {\n      return toBase64(fromHex(v));\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}