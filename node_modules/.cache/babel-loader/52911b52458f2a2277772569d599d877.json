{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find-index.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable, BCard, BCardHeader, BCardTitle, VBTooltip, BTab, BTabs } from 'bootstrap-vue';\nimport { getCachedValidators, getStakingValidatorByHex, toDay, abbr, abbrMessage, tokenFormatter } from '@/libs/utils';\nimport { decodeTxRaw } from '@cosmjs/proto-signing';\nimport { fromBase64 } from '@cosmjs/encoding';\nimport Tx from '@/libs/data/tx'; // import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BTab: BTab,\n    BTabs: BTabs,\n    BCard: BCard,\n    BTable: BTable,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    return {\n      islive: true,\n      blocks: [],\n      txs: [],\n      list_fields: [{\n        key: 'height',\n        sortable: true\n      }, {\n        key: 'hash',\n        thClass: 'd-none d-lg-block',\n        tdClass: 'd-none d-lg-block text-truncate'\n      }, {\n        key: 'proposer',\n        tdClass: 'text-truncate'\n      }, {\n        key: 'txs'\n      }, {\n        key: 'time',\n        thClass: 'd-none d-md-block',\n        tdClass: 'd-none d-md-block'\n      }],\n      txFields: [{\n        key: 'hash'\n      }, {\n        key: 'time',\n        formatter: function formatter(v) {\n          return toDay(v, 'from');\n        }\n      }, {\n        key: 'fee',\n        formatter: function formatter(v) {\n          return tokenFormatter(v);\n        }\n      }, {\n        key: 'messages',\n        formatter: function formatter(v) {\n          return abbrMessage(v);\n        }\n      }, {\n        key: 'memo'\n      }]\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getLatestBlock().then(function (res) {\n      _this.blocks.push(res);\n\n      var list = [];\n      var height = res.block.header.height;\n\n      for (var i = 1; i < 10; i += 1) {\n        list.push(height - i);\n      }\n\n      if (!getCachedValidators()) {\n        _this.$http.getValidatorList();\n      }\n\n      var promise = Promise.resolve();\n      list.forEach(function (item) {\n        promise = promise.then(function () {\n          return new Promise(function (resolve) {\n            _this.$http.getBlockByHeight(item).then(function (b) {\n              resolve();\n\n              _this.blocks.push(b);\n\n              if (_this.txs.length < 20) {\n                _this.extractTx(b, 'tail');\n              }\n            });\n          });\n        });\n      });\n      _this.timer = setInterval(_this.fetch, 6000);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n    clearInterval(this.timer);\n  },\n  methods: {\n    length: function length(v) {\n      return Array.isArray(v) ? v.length : 0;\n    },\n    shortHash: function shortHash(v) {\n      return abbr(v);\n    },\n    formatTime: function formatTime(v) {\n      return toDay(v, 'from');\n    },\n    formatProposer: function formatProposer(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    },\n    fetch: function fetch() {\n      var _this2 = this;\n\n      this.$http.getLatestBlock().then(function (b) {\n        var has = _this2.blocks.findIndex(function (x) {\n          return x.block.header.height === b.block.header.height;\n        });\n\n        if (has < 0) {\n          _this2.blocks.unshift(b);\n\n          _this2.extractTx(b);\n        }\n\n        if (_this2.blocks.length > 200) _this2.blocks.pop();\n      });\n    },\n    extractTx: function extractTx(block) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'head';\n      var txs = block.block.data.txs;\n      if (txs === null) return;\n\n      for (var i = 0; i < txs.length; i += 1) {\n        var tx = new Tx();\n\n        try {\n          var origin = decodeTxRaw(fromBase64(txs[i]));\n          tx = Tx.create(origin);\n          tx.time = block.block.header.time;\n        } catch (e) {// catch errors\n        }\n\n        tx.setHash(txs[i]);\n\n        if (direction === 'head') {\n          this.txs.unshift(tx);\n\n          if (this.txs.length > 200) {\n            this.txs.pop();\n          }\n        } else if (this.txs.length < 100) {\n          this.txs.push(tx);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}