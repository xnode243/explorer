{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { $themeColors } from '@themeConfig';\nimport dayjs from 'dayjs';\nimport { BCard, BAvatar, BPopover, BTable, BRow, BCol, BTableSimple, BTr, BTd, BTbody, BCardHeader, BCardTitle, BButton, BCardBody, VBModal, BButtonGroup, VBTooltip, BPagination } from 'bootstrap-vue';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport Ripple from 'vue-ripple-directive';\nimport VueQr from 'vue-qr';\nimport { formatToken, formatTokenAmount, formatTokenDenom, getStakingValidatorOperator, percent, tokenFormatter, toDay, toDuration, abbrMessage, abbrAddress, getUserCurrency, getUserCurrencySign, numberWithCommas, toETHAddress } from '@/libs/utils';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nimport ChartComponentDoughnut from './components/charts/ChartComponentDoughnut.vue';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BAvatar: BAvatar,\n    BPopover: BPopover,\n    BTable: BTable,\n    FeatherIcon: FeatherIcon,\n    VueQr: VueQr,\n    BTableSimple: BTableSimple,\n    BTbody: BTbody,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BButton: BButton,\n    BButtonGroup: BButtonGroup,\n    BTr: BTr,\n    BTd: BTd,\n    BPagination: BPagination,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    ObjectFieldComponent: ObjectFieldComponent,\n    ChartComponentDoughnut: ChartComponentDoughnut,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip,\n    Ripple: Ripple\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    var _this = this;\n\n    // const { address } = this.$route.params\n    var address = to.params.address;\n\n    if (address !== from.params.hash) {\n      this.address = address;\n      this.$http.getAuthAccount(this.address).then(function (acc) {\n        _this.account = acc;\n\n        _this.initial();\n\n        _this.$http.getTxsBySender(_this.address).then(function (res) {\n          _this.transactions = res;\n        });\n      }).catch(function (err) {\n        _this.error = err;\n      });\n      next();\n    }\n  },\n  data: function data() {\n    var address = this.$route.params.address;\n    return {\n      currency: getUserCurrencySign(),\n      selectedValidator: '',\n      totalCurrency: 0,\n      address: address,\n      account: null,\n      assets: [],\n      reward: [],\n      delegations: [],\n      redelegations: [],\n      unbonding: [],\n      quotes: {},\n      transactions: [],\n      stakingParameters: {},\n      operationModalType: '',\n      error: null\n    };\n  },\n  computed: {\n    accountTitle: function accountTitle() {\n      if (this.account && this.account.type) {\n        return this.account.type.substring(this.account.type.indexOf('/') + 1);\n      }\n\n      return 'Profile';\n    },\n    txs: function txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(function (x) {\n          return {\n            height: Number(x.height),\n            txhash: x.txhash,\n            msgs: abbrMessage(x.tx.body.messages),\n            time: toDay(x.timestamp)\n          };\n        });\n      }\n\n      return [];\n    },\n    assetTable: function assetTable() {\n      var _this2 = this;\n\n      var total = [];\n      var sum = 0;\n      var sumCurrency = 0;\n      total = total.concat(this.assets.map(function (x) {\n        var xh = x;\n        xh.type = 'Balance';\n        xh.color = 'success';\n        xh.icon = 'CreditCardIcon';\n        xh.currency = _this2.formatCurrency(xh.amount, xh.denom);\n        sumCurrency += xh.currency;\n        sum += Number(xh.amount);\n        return xh;\n      }));\n      var stakingDenom = '';\n\n      if (this.delegations && this.delegations.length > 0) {\n        var temp = 0;\n        this.delegations.forEach(function (x) {\n          var xh = x.balance;\n          temp += Number(xh.amount);\n          sumCurrency += _this2.formatCurrency(xh.amount, xh.denom);\n          sum += Number(xh.amount);\n          stakingDenom = xh.denom;\n        });\n        total.push({\n          type: 'Delegation',\n          color: 'primary',\n          icon: 'LockIcon',\n          amount: temp,\n          denom: stakingDenom,\n          currency: this.formatCurrency(temp, stakingDenom)\n        });\n      }\n\n      if (this.reward.total) {\n        total = total.concat(this.reward.total.map(function (x) {\n          var xh = x;\n          xh.type = 'Reward';\n          xh.color = 'warning';\n          xh.icon = 'TrendingUpIcon';\n          xh.currency = _this2.formatCurrency(xh.amount, xh.denom);\n          sumCurrency += xh.currency;\n          sum += Number(xh.amount);\n          return xh;\n        }));\n      }\n\n      if (this.unbonding) {\n        var tmp1 = 0;\n        this.unbonding.forEach(function (x) {\n          x.entries.forEach(function (e) {\n            tmp1 += Number(e.balance);\n          });\n        });\n        if (this.stakingParameters) stakingDenom = this.stakingParameters.bond_denom;\n        var unbonding = this.formatCurrency(tmp1, stakingDenom);\n        sumCurrency += unbonding;\n        sum += tmp1;\n        total.push({\n          type: 'unbonding',\n          color: 'danger',\n          icon: 'TrendingDownIcon',\n          denom: stakingDenom,\n          amount: tmp1,\n          percent: 0,\n          currency: unbonding\n        });\n      }\n\n      total = total.map(function (x) {\n        var xh = x;\n        xh.percent = percent(Number(x.amount) / sum);\n        return xh;\n      });\n      return {\n        items: total,\n        currency: parseFloat(sumCurrency.toFixed(2))\n      };\n    },\n    chartData: function chartData() {\n      var data = this.assetTable.items.reduce(function (t, c) {\n        var th = t;\n\n        if (t[c.type]) {\n          th[c.type] += Number(c.amount);\n        } else {\n          th[c.type] = Number(c.amount);\n        }\n\n        return th;\n      }, []);\n      return {\n        datasets: [{\n          labels: Object.keys(data),\n          data: Object.values(data),\n          backgroundColor: [$themeColors.success, $themeColors.primary, $themeColors.warning, $themeColors.danger, $themeColors.info],\n          borderWidth: 0,\n          pointStyle: 'rectRounded'\n        }]\n      };\n    },\n    deleTable: function deleTable() {\n      var _this3 = this;\n\n      var re = [];\n      var conf = this.$http.getSelectedConfig();\n      var decimal = conf.assets[0].exponent || '6';\n\n      if (this.reward.rewards && this.delegations && this.delegations.length > 0) {\n        this.delegations.forEach(function (e) {\n          var reward = _this3.reward.rewards.find(function (r) {\n            return r.validator_address === e.delegation.validator_address;\n          });\n\n          re.push({\n            validator: {\n              moniker: getStakingValidatorOperator(_this3.$http.config.chain_name, e.delegation.validator_address, 8),\n              address: e.delegation.validator_address\n            },\n            token: formatToken(e.balance, {}, decimal),\n            reward: tokenFormatter(reward.reward, _this3.denoms),\n            action: e.delegation.validator_address\n          });\n        });\n      }\n\n      return re;\n    },\n    accTable: function accTable() {\n      var table = {};\n\n      if (this.account && this.account.type === 'cosmos-sdk/PeriodicVestingAccount') {\n        table = this.account.value;\n      }\n\n      return table;\n    },\n    denoms: function denoms() {\n      return this.$store.state.chains.denoms;\n    },\n    isEthAddr: function isEthAddr() {\n      return JSON.stringify(this.account).indexOf('PubKeyEthSecp256k1') > 0;\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n\n    this.$http.getAuthAccount(this.address).then(function (acc) {\n      _this4.account = acc.account;\n\n      _this4.initial();\n\n      _this4.$http.getTxsBySender(_this4.address).then(function (res) {\n        _this4.transactions = res;\n      });\n\n      _this4.$http.getStakingParameters().then(function (res) {\n        _this4.stakingParameters = res;\n      });\n    }).catch(function (err) {\n      _this4.error = err;\n    });\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this5.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this6 = this;\n\n      this.$http.getBankAccountBalance(this.address).then(function (bal) {\n        _this6.assets = bal;\n      });\n      this.$http.getStakingReward(this.address).then(function (res) {\n        _this6.reward = res;\n      });\n      this.$http.getStakingDelegations(this.address).then(function (res) {\n        _this6.delegations = res.delegation_responses || res;\n      });\n      this.$http.getStakingUnbonding(this.address).then(function (res) {\n        _this6.unbonding = res.unbonding_responses || res;\n      });\n    },\n    formatNumber: function formatNumber(v) {\n      return numberWithCommas(v);\n    },\n    pageload: function pageload(v) {\n      var _this7 = this;\n\n      this.$http.getTxsBySender(this.address, v).then(function (res) {\n        _this7.transactions = res;\n      });\n    },\n    selectValue: function selectValue(v, type) {\n      this.selectedValidator = v;\n      this.setOperationModalType(type);\n    },\n    setOperationModalType: function setOperationModalType(type) {\n      this.operationModalType = type;\n    },\n    formatHash: abbrAddress,\n    formatDenom: function formatDenom(v) {\n      return formatTokenDenom(this.denoms[v] ? this.denoms[v] : v);\n    },\n    formatAmount: function formatAmount(v) {\n      var dec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var denom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'uatom';\n      var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return formatTokenAmount(v, dec, denom, format);\n    },\n    formatToken: function formatToken(v) {\n      return tokenFormatter(v, this.denoms);\n    },\n    formatCurrency: function formatCurrency(amount, denom) {\n      var qty = this.formatAmount(amount, 2, denom, false);\n      var d2 = this.formatDenom(denom);\n      var userCurrency = getUserCurrency();\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[userCurrency];\n        return parseFloat((qty * price).toFixed(2));\n      }\n\n      return 0;\n    },\n    formatDate: function formatDate(v) {\n      return dayjs(v).format('YYYY-MM-DD HH:mm:ss');\n    },\n    formatTime: function formatTime(v) {\n      return toDay(Number(v) * 1000);\n    },\n    formatLength: function formatLength(v) {\n      return toDuration(Number(v) * 1000);\n    },\n    copy: function copy() {\n      var _this8 = this;\n\n      this.$copyText(this.address).then(function () {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, function (e) {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: \"Failed to copy address! \".concat(e),\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    },\n    ethaddress: function ethaddress() {\n      return toETHAddress(this.address);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}