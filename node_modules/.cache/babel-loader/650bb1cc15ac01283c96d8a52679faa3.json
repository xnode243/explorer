{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BFormText } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport { coin } from '@cosmjs/amino';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BInputGroupAppend,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormText,\n    BFormSelectOption,\n    vSelect,\n    ValidationProvider\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    balance: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      targetChainId: '',\n      token: '',\n      amount: null,\n      recipient: null,\n      destination: {},\n      channels: [],\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  computed: {\n    destinationOptions() {\n      if (!this.token && this.token === '') return [];\n      const options = this.channels.map(x => ({\n        port_id: x.port_id,\n        channel_id: x.channel_id,\n        label: `${x.chain_id ? x.chain_id : ''} ${x.port_id}/${x.channel_id}`\n      }));\n\n      if (this.token.startsWith('ibc/')) {\n        const query = this.paths[this.token];\n        return query ? options.filter(x => x.channel_id === query.channel_id) : options;\n      }\n\n      return options;\n    },\n\n    msg() {\n      const timeout = dayjs().add(4, 'hour');\n      return [{\n        typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n        value: {\n          sourcePort: this.destination.port_id,\n          sourceChannel: this.destination.channel_id,\n          token: coin(Number(getUnitAmount(this.amount, this.token)), this.token),\n          sender: this.address,\n          receiver: this.recipient,\n          timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n        }\n      }];\n    },\n\n    balanceOptions() {\n      return this.setupBalance();\n    },\n\n    selectedChain() {\n      return this.$store.state.chains.selected;\n    },\n\n    IBCDenom() {\n      return this.$store.state.chains.denoms;\n    },\n\n    paths() {\n      return this.$store.state.chains.ibcPaths;\n    },\n\n    valuation() {\n      const {\n        amount\n      } = this;\n      const d2 = this.printDenom();\n\n      if (amount && d2) {\n        const quote = this.$store.state.chains.quotes[d2];\n        const price = quote ? quote[this.currency] : 0;\n        return parseFloat((amount * price).toFixed(2));\n      }\n\n      return 0;\n    }\n\n  },\n\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'IBC Transfer Tokens',\n      historyName: 'transfer'\n    });\n    this.setActionName();\n    this.loadData();\n  },\n\n  methods: {\n    loadData() {\n      this.destination = null;\n      this.channels = [];\n      this.token = '';\n      this.targetChainId = '';\n\n      if (this.address) {\n        this.$http.getIBCChannels(this.selectedChain, null).then(ret => {\n          const chans = ret.channels.filter(x => x.state === 'STATE_OPEN').map(x => ({\n            channel_id: x.channel_id,\n            port_id: x.port_id\n          }));\n          this.$set(this, 'channels', chans);\n        });\n      }\n    },\n\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n\n    tokenChange() {\n      // eslint-disable-next-line prefer-destructuring\n      this.destination = this.destinationOptions[0];\n      this.recipient = null;\n      this.setActionName();\n      this.onChannelChange();\n    },\n\n    setActionName() {\n      this.$emit('update', {\n        actionName: this.token.startsWith('ibc') ? 'Withdraw' : 'Deposit'\n      });\n    },\n\n    format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    },\n\n    printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token);\n    },\n\n    onChannelChange() {\n      this.$http.getIBCChannelClientState(this.destination.channel_id, this.destination.port_id, this.selectedChain).then(cs => {\n        this.targetChainId = cs.identified_client_state.client_state.chain_id;\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}