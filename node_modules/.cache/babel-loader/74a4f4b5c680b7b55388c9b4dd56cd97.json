{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable } from 'bootstrap-vue';\nimport { getStakingValidatorByHex, isHexAddress, isToken, percent, toDay, tokenFormatter } from '@/libs/utils';\nexport default {\n  name: 'ArrayFieldComponent',\n  components: {\n    BTable: BTable\n  },\n  props: {\n    tablefield: {\n      type: [Array, Object],\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  computed: {\n    items: function items() {\n      if (this.tablefield.length > 0 && typeof this.tablefield[0] === 'string') {\n        return this.tablefield.map(function (x) {\n          return {\n            array: x\n          };\n        });\n      }\n\n      return this.tablefield;\n    }\n  },\n  methods: {\n    eval_value: function eval_value(value) {\n      if (typeof value === 'string') {\n        return JSON.parse(value);\n      }\n\n      return value;\n    },\n    isTokenField: function isTokenField(value) {\n      return isToken(value);\n    },\n    isArrayText: function isArrayText(value) {\n      var has = String(value).startsWith('[') && String(value).endsWith(']');\n      return has;\n    },\n    formatText: function formatText(value) {\n      var reg = /^\\d{4}.\\d{1,2}.\\d{1,2}T\\d{2}:\\d{2}:.+Z$/;\n      var percentage = /^0\\.\\d+/;\n\n      if (reg.test(value)) {\n        return toDay(value);\n      }\n\n      if (percentage.test(value)) {\n        return \"\".concat(percent(value), \"%\");\n      } // if (value.length > 40) {\n      //   return value.substring(0, 40).concat('...')\n      // }\n\n\n      return value;\n    },\n    formatTokens: function formatTokens(value) {\n      return tokenFormatter(value);\n    },\n    isHex: function isHex(value) {\n      return isHexAddress(value);\n    },\n    formatHexAddress: function formatHexAddress(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}