{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// This will be populated in `beforeCreate` hook\nimport { $themeColors, $themeBreakpoints, $themeConfig } from '@themeConfig';\nimport { provideToast } from 'vue-toastification/composition';\nimport { watch } from '@vue/composition-api';\nimport useAppConfig from '@core/app-config/useAppConfig';\nimport { useWindowSize, useCssVar } from '@vueuse/core';\nimport store from '@/store';\n\nconst LayoutVertical = () => import('@/layouts/vertical/LayoutVertical.vue');\n\nconst LayoutFull = () => import('@/layouts/full/LayoutFull.vue');\n\nexport default {\n  components: {\n    // Layouts\n    LayoutVertical,\n    LayoutFull\n  },\n\n  setup() {\n    const {\n      skin,\n      skinClasses\n    } = useAppConfig(); // If skin is dark when initialized => Add class to body\n\n    if (skin.value === 'dark') document.body.classList.add('dark-layout'); // Provide toast for Composition API usage\n    // This for those apps/components which uses composition API\n    // Demos will still use Options API for ease\n\n    provideToast({\n      hideProgressBar: true,\n      closeOnClick: false,\n      closeButton: false,\n      icon: false,\n      timeout: 3000,\n      transition: 'Vue-Toastification__fade'\n    }); // Set Window Width in store\n\n    store.commit('app/UPDATE_WINDOW_WIDTH', window.innerWidth);\n    const {\n      width: windowWidth\n    } = useWindowSize();\n    watch(windowWidth, val => {\n      store.commit('app/UPDATE_WINDOW_WIDTH', val);\n    });\n    return {\n      skinClasses\n    };\n  },\n\n  // ! We can move this computed: layout & contentLayoutType once we get to use Vue 3\n  // Currently, router.currentRoute is not reactive and doesn't trigger any change\n  computed: {\n    layout() {\n      if (!this.$route.name || this.$route.meta.layout === 'full') return 'layout-full';\n      return `layout-${this.contentLayoutType}`;\n    },\n\n    contentLayoutType() {\n      return this.$store.state.appConfig.layout.type;\n    }\n\n  },\n\n  beforeCreate() {\n    // Set colors in theme\n    const colors = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']; // eslint-disable-next-line no-plusplus\n\n    for (let i = 0, len = colors.length; i < len; i++) {\n      $themeColors[colors[i]] = useCssVar(`--${colors[i]}`, document.documentElement).value.trim();\n    } // Set Theme Breakpoints\n\n\n    const breakpoints = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']; // eslint-disable-next-line no-plusplus\n\n    for (let i = 0, len = breakpoints.length; i < len; i++) {\n      $themeBreakpoints[breakpoints[i]] = Number(useCssVar(`--breakpoint-${breakpoints[i]}`, document.documentElement).value.slice(0, -2));\n    } // Set RTL\n\n\n    const {\n      isRTL\n    } = $themeConfig.layout;\n    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  },\n\n  created() {\n    store.dispatch('chains/getQuotes');\n    store.dispatch('chains/getAllIBCDenoms', this);\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}