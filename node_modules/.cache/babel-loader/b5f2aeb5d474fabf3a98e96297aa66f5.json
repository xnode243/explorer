{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getLocalAccounts, getLocalChains } from '@/libs/utils';\nimport { BRow, BCol, BCard, BCardTitle, BAvatar, VBTooltip } from 'bootstrap-vue';\nimport FlipCountdown from 'vue2-flip-countdown';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'WalletUpgradeEvents',\n  components: {\n    BAvatar,\n    BRow,\n    BCol,\n    BCard,\n    BCardTitle,\n    FlipCountdown\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  props: {\n    content: {\n      type: String,\n      default: () => ''\n    }\n  },\n\n  data() {\n    return {\n      proposals: [],\n      latest: {}\n    };\n  },\n\n  computed: {\n    list() {\n      return this.proposals.filter(x => [2, 3].includes(x.status)).map(x => {\n        const x2 = x;\n        x2.countdown = this.estmatetime(x.chain.chain_name, x.contents.plan);\n        x2.variant = dayjs().isAfter(dayjs(x2.countdown)) ? 'dark' : '';\n        return x2;\n      }).sort((a, b) => dayjs(b.voting_end_time).unix() - dayjs(a.voting_end_time).unix());\n    }\n\n  },\n\n  mounted() {\n    const accounts = getLocalAccounts();\n\n    if (accounts) {\n      const chains = getLocalChains();\n      const toQuery = {};\n      Object.keys(accounts).forEach(acc => {\n        accounts[acc].address.forEach(add => {\n          const conf = chains[add.chain];\n\n          if (conf) {\n            toQuery[add.chain] = conf;\n          }\n        });\n      });\n      Object.values(toQuery).forEach(item => {\n        this.fetchProposals(item);\n      });\n    }\n  },\n\n  methods: {\n    estmatetime(chainname, plan) {\n      if (plan.height > 0) {\n        const latest = this.latest[chainname];\n\n        if (latest) {\n          const gap = plan.height - this.latest[chainname].height;\n\n          if (gap > 0) {\n            return dayjs().add(gap * 6, 'second').format('YYYY-MM-DD hh:mm:ss');\n          }\n        }\n\n        return '1990-01-01';\n      }\n\n      return dayjs(plan.time).format('YYYY-MM-DD hh:mm:ss');\n    },\n\n    fetchProposals(item) {\n      this.$http.getGovernanceList('', item).then(data => {\n        data.proposals.forEach(p => {\n          const type = p.contents['@type'];\n\n          if (type.indexOf('SoftwareUpgradeProposal') > 0) {\n            const p2 = p;\n            p2.chain = item;\n\n            if (dayjs(p.voting_end_time).add(15, 'day').isAfter(dayjs())) {\n              this.proposals.push(p2);\n            }\n          }\n        });\n      }, err => {\n        throw new Error(err);\n      });\n      this.$http.getLatestBlock(item).then(b => {\n        this.$set(this.latest, item.chain_name, b.block.header);\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}