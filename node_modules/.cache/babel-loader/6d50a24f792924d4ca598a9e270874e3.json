{"ast":null,"code":"/*\n * @Description: file\n * @Autor: dingyiming\n * @Date: 2021-11-20 15:26:27\n * @LastEditors: dingyiming\n * @LastEditTime: 2021-11-20 15:33:07\n */\nimport { isTestnet } from '@/libs/utils';\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nlet chains = {};\nconst coingecko = {};\n\nlet configs = require.context('../../chains/mainnet', false, /\\.json$/);\n\nif (isTestnet()) {\n  configs = require.context('../../chains/testnet', false, /\\.json$/);\n}\n\nconst update = {};\nconfigs.keys().forEach(k => {\n  const c = configs(k);\n  c.chain_name = String(c.chain_name).toLowerCase();\n  update[c.chain_name] = c;\n\n  if (Array.isArray(c.assets)) {\n    c.assets.forEach(x => {\n      if (x.coingecko_id && x.coingecko_id !== '') coingecko[x.coingecko_id] = String(x.symbol).toUpperCase();\n    });\n  }\n});\nchains = update;\nlocalStorage.setItem('chains', JSON.stringify(update));\nconst selected = chains.cosmos;\nconst avatarcache = localStorage.getItem('avatars');\nexport default {\n  namespaced: true,\n  state: {\n    config: chains,\n    selected,\n    avatars: avatarcache ? JSON.parse(avatarcache) : {},\n    height: 0,\n    ibcChannels: {},\n    quotes: {},\n    defaultWallet: localStorage.getItem('default-wallet'),\n    denoms: {},\n    ibcPaths: {}\n  },\n  getters: {\n    getchains: state => state.chains,\n    getAvatarById: state => id => state.avatars[id]\n  },\n  mutations: {\n    setup_sdk_version(state, info) {\n      state.chains.config[info.chain_name].sdk_version = info.version;\n    },\n\n    select(state, args) {\n      state.chains.selected = state.chains.config[args.chain_name];\n    },\n\n    cacheAvatar(state, args) {\n      state.chains.avatars[args.identity] = args.url;\n      localStorage.setItem('avatars', JSON.stringify(state.chains.avatars));\n    },\n\n    setHeight(state, height) {\n      state.chains.height = height;\n    },\n\n    setChannels(state, {\n      chain,\n      channels\n    }) {\n      state.chains.ibcChannels[chain] = channels;\n    },\n\n    setQuotes(state, quotes) {\n      state.quotes = quotes;\n    },\n\n    setDefaultWallet(state, defaultWallet) {\n      if (defaultWallet && defaultWallet.length > 0) {\n        localStorage.setItem('default-wallet', defaultWallet);\n        state.chains.defaultWallet = defaultWallet;\n      } else {\n        state.chains.defaultWallet = null;\n      }\n    },\n\n    setIBCDenoms(state, denoms) {\n      state.denoms = { ...state.denoms,\n        ...denoms\n      };\n    },\n\n    setIBCPaths(state, paths) {\n      state.ibcPaths = paths;\n    }\n\n  },\n  actions: {\n    async getQuotes(context) {\n      // fetch('https://price.ping.pub/quotes').then(data => data.json()).then(data => {\n      //   context.commit('setQuotes', data)\n      // })\n      const keys = Object.keys(coingecko);\n\n      if (keys.length > 0) {\n        const currencies = 'usd,cny,eur,jpy,krw,sgd,hkd';\n        fetch(`https://api.coingecko.com/api/v3/simple/price?include_24hr_change=true&vs_currencies=${currencies}&ids=${keys.join(',')}`).then(data => data.json()).then(data => {\n          // use symbol as key instead of coingecko id\n          const quotes = {};\n\n          if (data && Object.keys(data)) {\n            Object.keys(data).forEach(k => {\n              quotes[coingecko[k]] = data[k];\n            });\n          }\n\n          context.commit('setQuotes', quotes);\n        });\n      }\n    },\n\n    async getAllIBCDenoms(context, _this) {\n      _this.$http.getAllIBCDenoms().then(x => {\n        const denomsMap = {};\n        const pathsMap = {};\n        x.denom_traces.forEach(trace => {\n          const hash = toHex(sha256(new TextEncoder().encode(`${trace.path}/${trace.base_denom}`)));\n          const ibcDenom = `ibc/${hash.toUpperCase()}`;\n          denomsMap[ibcDenom] = trace.base_denom;\n          const path = trace.path.split('/');\n\n          if (path.length >= 2) {\n            pathsMap[ibcDenom] = {\n              channel_id: path[path.length - 1],\n              port_id: path[path.length - 2]\n            };\n          }\n        });\n        context.commit('setIBCDenoms', denomsMap);\n        context.commit('setIBCPaths', pathsMap);\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}