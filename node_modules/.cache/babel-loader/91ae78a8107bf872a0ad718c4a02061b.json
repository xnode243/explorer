{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormSelectOption,\n    vSelect,\n    BInputGroupAppend,\n    ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    },\n    balance: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      selectedAddress: this.address,\n      availableAddress: [],\n      validators: [],\n      unbundValidators: [],\n      selectedValidator: this.validatorAddress,\n      token: '',\n      amount: null,\n      selectedChain: '',\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  computed: {\n    valOptions() {\n      let options = [];\n      const vals = this.validators.map(x => ({\n        value: x.operator_address,\n        label: `${x.description.moniker} (${Number(x.commission.rate) * 100}%)`\n      }));\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      const unbunded = this.unbundValidators.map(x => ({\n        value: x.operator_address,\n        label: `* ${x.description.moniker} (${Number(x.commission.rate) * 100}%)`\n      }));\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n\n    balanceOptions() {\n      return this.setupBalance();\n    },\n\n    msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n        value: {\n          delegatorAddress: this.selectedAddress,\n          validatorAddress: this.selectedValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    },\n\n    IBCDenom() {\n      return this.$store.state.chains.denoms;\n    }\n\n  },\n\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Delegate Token',\n      historyName: 'delegate'\n    });\n    this.loadData();\n  },\n\n  methods: {\n    loadData() {\n      this.$http.getValidatorList().then(v => {\n        this.validators = v;\n\n        if (!this.selectedValidator) {\n          const r = Math.random();\n          const index = (r * v.length).toFixed();\n          this.selectedValidator = v[index].operator_address;\n        }\n      });\n      this.$http.getValidatorUnbondedList().then(v => {\n        this.unbundValidators = v;\n      });\n    },\n\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n\n    printDenom() {\n      return formatTokenDenom(this.token);\n    },\n\n    format(v) {\n      const conf = this.$http.getSelectedConfig();\n      const decimal = conf.assets[0].exponent || '6';\n      return formatToken(v, this.IBCDenom, decimal);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}