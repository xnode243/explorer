{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// This will be populated in `beforeCreate` hook\nimport { $themeColors, $themeBreakpoints, $themeConfig } from '@themeConfig';\nimport { provideToast } from 'vue-toastification/composition';\nimport { watch } from '@vue/composition-api';\nimport useAppConfig from '@core/app-config/useAppConfig';\nimport { useWindowSize, useCssVar } from '@vueuse/core';\nimport store from '@/store';\n\nvar LayoutVertical = function LayoutVertical() {\n  return import('@/layouts/vertical/LayoutVertical.vue');\n};\n\nvar LayoutFull = function LayoutFull() {\n  return import('@/layouts/full/LayoutFull.vue');\n};\n\nexport default {\n  components: {\n    // Layouts\n    LayoutVertical: LayoutVertical,\n    LayoutFull: LayoutFull\n  },\n  setup: function setup() {\n    var _useAppConfig = useAppConfig(),\n        skin = _useAppConfig.skin,\n        skinClasses = _useAppConfig.skinClasses; // If skin is dark when initialized => Add class to body\n\n\n    if (skin.value === 'dark') document.body.classList.add('dark-layout'); // Provide toast for Composition API usage\n    // This for those apps/components which uses composition API\n    // Demos will still use Options API for ease\n\n    provideToast({\n      hideProgressBar: true,\n      closeOnClick: false,\n      closeButton: false,\n      icon: false,\n      timeout: 3000,\n      transition: 'Vue-Toastification__fade'\n    }); // Set Window Width in store\n\n    store.commit('app/UPDATE_WINDOW_WIDTH', window.innerWidth);\n\n    var _useWindowSize = useWindowSize(),\n        windowWidth = _useWindowSize.width;\n\n    watch(windowWidth, function (val) {\n      store.commit('app/UPDATE_WINDOW_WIDTH', val);\n    });\n    return {\n      skinClasses: skinClasses\n    };\n  },\n  // ! We can move this computed: layout & contentLayoutType once we get to use Vue 3\n  // Currently, router.currentRoute is not reactive and doesn't trigger any change\n  computed: {\n    layout: function layout() {\n      if (!this.$route.name || this.$route.meta.layout === 'full') return 'layout-full';\n      return \"layout-\".concat(this.contentLayoutType);\n    },\n    contentLayoutType: function contentLayoutType() {\n      return this.$store.state.appConfig.layout.type;\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    // Set colors in theme\n    var colors = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']; // eslint-disable-next-line no-plusplus\n\n    for (var i = 0, len = colors.length; i < len; i++) {\n      $themeColors[colors[i]] = useCssVar(\"--\".concat(colors[i]), document.documentElement).value.trim();\n    } // Set Theme Breakpoints\n\n\n    var breakpoints = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']; // eslint-disable-next-line no-plusplus\n\n    for (var _i = 0, _len = breakpoints.length; _i < _len; _i++) {\n      $themeBreakpoints[breakpoints[_i]] = Number(useCssVar(\"--breakpoint-\".concat(breakpoints[_i]), document.documentElement).value.slice(0, -2));\n    } // Set RTL\n\n\n    var isRTL = $themeConfig.layout.isRTL;\n    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  },\n  created: function created() {\n    store.dispatch('chains/getQuotes');\n    store.dispatch('chains/getAllIBCDenoms', this);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}