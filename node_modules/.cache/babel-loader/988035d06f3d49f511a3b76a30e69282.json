{"ast":null,"code":"import { extend, localize } from 'vee-validate';\nimport { required as rule_required, email as rule_email, min as rule_min, confirmed as rule_confirmed, regex as rule_regex, between as rule_between, alpha as rule_alpha, integer as rule_integer, digits as rule_digits, alpha_dash as rule_alpha_dash, alpha_num as rule_alpha_num, length as rule_length } from 'vee-validate/dist/rules';\nimport ar from 'vee-validate/dist/locale/ar.json';\nimport en from 'vee-validate/dist/locale/en.json'; // eslint-disable-next-line object-curly-newline\n\nimport { validatorPositive, validatorUrlValidator, validatorPassword, validatorCreditCard } from './validators'; // ////////////////////////////////////////////////////////\n// General\n// ////////////////////////////////////////////////////////\n\nexport var required = extend('required', rule_required);\nexport var email = extend('email', rule_email);\nexport var min = extend('min', rule_min);\nexport var confirmed = extend('confirmed', rule_confirmed);\nexport var regex = extend('regex', rule_regex);\nexport var between = extend('between', rule_between);\nexport var alpha = extend('alpha', rule_alpha);\nexport var integer = extend('integer', rule_integer);\nexport var digits = extend('digits', rule_digits);\nexport var alphaDash = extend('alpha-dash', rule_alpha_dash);\nexport var alphaNum = extend('alpha-num', rule_alpha_num);\nexport var length = extend('length', rule_length);\nexport var positive = extend('positive', {\n  validate: validatorPositive,\n  message: 'Please enter positive number!'\n});\nexport var credit = extend('credit-card', {\n  validate: validatorCreditCard,\n  message: 'It is not valid credit card!'\n});\nexport var password = extend('password', {\n  validate: validatorPassword,\n  message: 'Your {_field_} must contain at least one uppercase, one lowercase, one special character and one digit'\n});\nexport var url = extend('url', {\n  validate: validatorUrlValidator,\n  message: 'URL is invalid'\n}); // Install English and Arabic localizations.\n\nlocalize({\n  en: {\n    messages: en.messages,\n    names: {\n      email: 'Email',\n      password: 'Password'\n    },\n    fields: {\n      password: {\n        min: '{_field_} is too short, you want to get hacked?'\n      }\n    }\n  },\n  ar: {\n    messages: ar.messages,\n    names: {\n      email: 'البريد الإلكتروني',\n      password: 'كلمة السر'\n    },\n    fields: {\n      password: {\n        min: 'كلمة السر قصيرة جداً سيتم اختراقك'\n      }\n    }\n  }\n}); // ////////////////////////////////////////////////////////\n// NOTE:\n// Quasar validation for reference only\n// Remove this note once development is finished and make sure to\n// to convert all of them in veevalidate version\n// ////////////////////////////////////////////////////////\n// export const required = (val) => {\n//   return (val && val.length > 0) || '*Field is required'\n// }\n// export const required_obj = (obj) => {\n//   if (obj === null || obj === undefined) return '*Field is required'\n//   return (Object.entries(obj).length > 0 && obj.constructor === Object) || '*Field is required'\n// }\n// export const no_blank_spaces_arr = (arr) => {\n//   return arr.every(val => (val.trim() && val.trim().length > 0)) || 'Blank Spaces are not allowed'\n// }\n// export const url = val => {\n//   // If blank return\n//   if (val === undefined || val === null || val.length === 0) return true\n//   // Used\n//   // https://stackoverflow.com/questions/4314741/url-regex-validation\n//   // Other\n//   // https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\n//   // https://www.w3resource.com/javascript-exercises/javascript-regexp-exercise-9.php\n//   // https://www.geeksforgeeks.org/how-to-validate-url-using-regular-expression-in-javascript/\n//   /* eslint-disable no-useless-escape */\n//   const re = /^(http[s]?:\\/\\/){0,1}(www\\.){0,1}[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,5}[\\.]{0,1}/\n//   /* eslint-enable no-useless-escape */\n//   return re.test(val) || 'URL is invalid'\n// }\n// export const date = val => {\n//   // If blank return\n//   if (val === undefined || val === null || val.length === 0) return true\n//   // https://github.com/quasarframework/quasar/blob/dev/ui/src/utils/patterns.js\n//   return /^-?[\\d]+\\/[0-1]\\d\\/[0-3]\\d$/.test(val) || 'Date is invalid'\n// }\n// export const max = (val, max) => {\n//   // If blank return\n//   if (val === undefined || val === null) return true\n//   return val.length <= max || `More than ${max} characters are not allowed`\n// }\n// export const max_arr = (val, max) => {\n//   return val.length <= max || `More than ${max} values are not allowed`\n// }\n// export const min = (val, min) => {\n//   // If blank return\n//   if (val === undefined || val === null || val.length === 0) return true\n//   return val.length >= min || `Minimum ${min} characters are required`\n// }\n// export const num_range = (val, min, max) => {\n//   // If blank return\n//   if (val === undefined || val === null || val.length === 0) return true\n//   const msg = 'Value is invalid'\n//   if (min === null) return val <= max || msg\n//   else if (max === null) return val >= min || msg\n//   else return (val >= min && val <= max) || msg\n// }","map":null,"metadata":{},"sourceType":"module"}