{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BAvatar, BCardFooter, BRow, BCol, BCardTitle, BAlert, BBadge, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton } from 'bootstrap-vue';\nimport fetch from 'node-fetch';\nimport { consensusPubkeyToHexAddress, getLocalChains, getCachedValidators, toDay } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport DashboardCardHorizontal from './components/dashboard/DashboardCardHorizontal.vue';\nexport default {\n  components: {\n    BAlert: BAlert,\n    BBadge: BBadge,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardBody: BCardBody,\n    BCardFooter: BCardFooter,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BInputGroupAppend: BInputGroupAppend,\n    BButton: BButton,\n    BAvatar: BAvatar,\n    BCardTitle: BCardTitle,\n    vSelect: vSelect,\n    DashboardCardHorizontal: DashboardCardHorizontal\n  },\n  data: function data() {\n    var chains = getLocalChains();\n    return {\n      showPrevote: false,\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      chains: chains,\n      vals: [],\n      positions: [],\n      updatetime: new Date(),\n      rpc: '',\n      height: '-',\n      round: '-',\n      step: '-',\n      rate: '-'\n    };\n  },\n  computed: {\n    selected: function selected() {\n      return this.$store.state.chains.selected.chain_name;\n    }\n  },\n  created: function created() {\n    this.validators();\n    this.rpc = \"\".concat(this.chains[this.selected].rpc[0], \"/consensus_state\");\n    this.fetchPosition();\n    this.update();\n    this.timer = setInterval(this.update, 6000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    format: function format(v) {\n      return toDay(v, 'time');\n    },\n    color: function color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'dark' : 'primary';\n      }\n\n      return txt === 'nil-Vote' ? 'secondary' : 'success';\n    },\n    fetchPosition: function fetchPosition() {\n      var _this = this;\n\n      var dumpurl = this.rpc.replace('consensus_state', 'dump_consensus_state');\n      fetch(dumpurl).then(function (data) {\n        _this.httpstatus = data.status;\n        _this.httpStatusText = data.httpStatusText;\n        return data.json();\n      }).then(function (res) {\n        _this.positions = res.result.round_state.validators.validators;\n      });\n    },\n    update: function update() {\n      var _this2 = this;\n\n      this.rate = '0%';\n      this.updatetime = new Date();\n\n      if (this.httpstatus === 200) {\n        fetch(this.rpc).then(function (data) {\n          _this2.httpstatus = data.status;\n          _this2.httpStatusText = data.httpStatusText;\n          return data.json();\n        }).then(function (res) {\n          _this2.roundState = res.result.round_state;\n\n          var raw = _this2.roundState['height/round/step'].split('/'); // eslint-disable-next-line prefer-destructuring\n\n\n          _this2.height = raw[0]; // eslint-disable-next-line prefer-destructuring\n\n          _this2.round = raw[1]; // eslint-disable-next-line prefer-destructuring\n\n          _this2.step = raw[2]; // find the highest onboard rate\n\n          _this2.roundState.height_vote_set.forEach(function (element) {\n            var rate = Number(element.prevotes_bit_array.substring(element.prevotes_bit_array.length - 4));\n\n            if (rate > 0) {\n              _this2.rate = \"\".concat((rate * 100).toFixed(), \"%\");\n            }\n          });\n        }).catch(function (err) {\n          _this2.httpstatus = 500;\n          _this2.httpStatusText = err;\n        });\n      }\n    },\n    validators: function validators() {\n      var _this3 = this;\n\n      var conf = this.chains[this.selected];\n      var vals = [];\n      this.$http.getValidatorList(conf).then(function (data) {\n        vals = data;\n      }).catch(function () {\n        vals = getCachedValidators(_this3.selected.chain_name) || [];\n      }).finally(function () {\n        _this3.vals = vals.map(function (x) {\n          var x2 = x;\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey);\n          return x2;\n        });\n      });\n    },\n    onchange: function onchange() {\n      this.httpstatus = 200;\n      this.httpStatusText = '';\n      this.roundState = {}; // this.validators()\n    },\n    showName: function showName(i, text) {\n      var _this4 = this,\n          _val$description2;\n\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          var _val$description;\n\n          var _val = this.vals.find(function (x) {\n            return x.hex === _this4.positions[i].address;\n          });\n\n          return (_val === null || _val === void 0 ? void 0 : (_val$description = _val.description) === null || _val$description === void 0 ? void 0 : _val$description.moniker) || i;\n        }\n\n        return i;\n      }\n\n      var txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '));\n      var sig = text.split(' ');\n      var val = this.vals.find(function (x) {\n        return x.hex.startsWith(txt);\n      });\n      return \"\".concat((val === null || val === void 0 ? void 0 : (_val$description2 = val.description) === null || _val$description2 === void 0 ? void 0 : _val$description2.moniker) || txt, \" - \").concat(sig[2]);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}