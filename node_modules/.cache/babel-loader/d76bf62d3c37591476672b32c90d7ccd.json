{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BFormText } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign } from '@/libs/utils';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormText: BFormText,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    toAddress: {\n      type: String,\n      default: ''\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      token: '',\n      amount: null,\n      recipient: this.toAddress,\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n        value: {\n          fromAddress: this.address,\n          toAddress: this.recipient,\n          amount: [{\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }]\n        }\n      }];\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    },\n    valuation: function valuation() {\n      var amount = this.amount;\n\n      if (amount) {\n        var d2 = this.printDenom();\n        var quote = this.$store.state.chains.quotes[d2];\n        var price = quote ? quote[this.currency] : 0;\n        return parseFloat((amount * price).toFixed(2));\n      }\n\n      return 0;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Transfer Tokens',\n      historyName: 'send'\n    });\n  },\n  methods: {\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    format: function format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}