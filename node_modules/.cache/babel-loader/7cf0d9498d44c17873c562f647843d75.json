{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BInputGroupAppend, BFormSelectOption } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nexport default {\n  name: 'DepositDialogue',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BInputGroupAppend,\n    BFormSelectOption,\n    ValidationProvider\n  },\n  props: {\n    proposalId: {\n      type: Number,\n      required: true\n    },\n    proposalTitle: {\n      type: String,\n      required: true\n    },\n    balance: {\n      type: Array,\n      default: () => []\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      token: null,\n      amount: '',\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  computed: {\n    msg() {\n      return [{\n        typeUrl: '/cosmos.gov.v1beta1.MsgDeposit',\n        value: {\n          depositor: this.address,\n          proposalId: String(this.proposalId),\n          amount: [{\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }]\n        }\n      }];\n    },\n\n    balanceOptions() {\n      return this.setupBalance();\n    }\n\n  },\n\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Deposit',\n      historyName: 'deposit'\n    });\n  },\n\n  methods: {\n    printDenom() {\n      return formatTokenDenom(this.token);\n    },\n\n    format(v) {\n      return formatToken(v);\n    },\n\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}