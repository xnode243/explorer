{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueQr from 'vue-qr';\nimport { BCard, BCardHeader, BCardBody, BFormInput, BButton } from 'bootstrap-vue';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport { getLocalAccounts } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nexport default {\n  components: {\n    BButton,\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BFormInput,\n    VueQr,\n    OperationModal\n  },\n\n  data() {\n    const {\n      address\n    } = this.$route.params;\n    return {\n      address\n    };\n  },\n\n  computed: {\n    fromAddress() {\n      const key = this.$store?.state?.chains?.defaultWallet;\n\n      if (key) {\n        const accounts = getLocalAccounts() || {};\n        const account = Object.entries(accounts).map(v => ({\n          wallet: v[0],\n          address: v[1].address.find(x => x.chain === this.$store.state.chains.selected.chain_name)\n        })).filter(v => v.address).find(x => x.wallet === key);\n\n        if (account) {\n          return account.address.addr;\n        }\n      }\n\n      return null;\n    }\n\n  },\n  methods: {\n    copy() {\n      this.$copyText(this.address).then(() => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, e => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: `Failed to copy address! ${e}`,\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}