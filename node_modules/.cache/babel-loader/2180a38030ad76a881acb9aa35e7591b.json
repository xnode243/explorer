{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardHeader, BCardTitle, BCardBody, VBModal, BRow, BCol, BAvatar, BButton, BDropdown, BDropdownItem, VBTooltip } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport { chartColors, formatNumber, formatTokenAmount, formatTokenDenom, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, setUserCurrency } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport AppCollapse from '@core/components/app-collapse/AppCollapse.vue';\nimport AppCollapseItem from '@core/components/app-collapse/AppCollapseItem.vue';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ChartComponentDoughnut from './components/charts/ChartComponentDoughnut.vue';\nimport EchartScatter from './components/charts/EchartScatter.vue';\nexport default {\n  components: {\n    BAvatar: BAvatar,\n    BCard: BCard,\n    BRow: BRow,\n    BButton: BButton,\n    BCol: BCol,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCardTitle: BCardTitle,\n    BDropdown: BDropdown,\n    BDropdownItem: BDropdownItem,\n    // eslint-disable-next-line vue/no-unused-components\n    VBTooltip: VBTooltip,\n    FeatherIcon: FeatherIcon,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    ChartComponentDoughnut: ChartComponentDoughnut,\n    AppCollapse: AppCollapse,\n    AppCollapseItem: AppCollapseItem,\n    EchartScatter: EchartScatter,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    'b-modal': VBModal,\n    Ripple: Ripple\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency(),\n      selectedAddress: '',\n      selectedName: '',\n      transferWindow: false,\n      accounts: [],\n      balances: {},\n      delegations: {},\n      ibcDenom: {},\n      quotes: {},\n      operationModalType: '',\n      selectedChainName: '',\n      options: {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        // responsive: true,\n        title: {\n          display: true,\n          text: 'Token Portfolio'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        },\n        scales: {\n          yAxes: [{\n            // type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            type: 'logarithmic',\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n            ticks: {\n              min: 0,\n              autoskipping: true,\n              display: true,\n              maxTicksLimit: 7,\n              callback: function callback(val) {\n                return formatNumber(val, true, 0);\n              },\n              color: 'red'\n            },\n            offset: true,\n            gridLines: {\n              display: true,\n              offsetGridLines: false\n            }\n          }, {\n            type: 'linear',\n            // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: false,\n            position: 'right',\n            id: 'y-axis-2',\n            gridLines: {\n              drawOnChartArea: true\n            }\n          }]\n        }\n      }\n    };\n  },\n  computed: {\n    calculateTotal: function calculateTotal() {\n      var total = 0;\n\n      if (this.calculateByDenom.value) {\n        Object.values(this.calculateByDenom.value).forEach(function (i) {\n          total += i;\n        });\n      }\n\n      return numberWithCommas(parseFloat(total.toFixed(2)));\n    },\n    scatters: function scatters() {\n      var _this = this;\n\n      var total = [];\n\n      if (this.calculateByDenom.qty) {\n        Object.entries(this.calculateByDenom.qty).forEach(function (i) {\n          var price = _this.getPrice(i[0], 'usd'); // x, y, circle\n\n\n          total.push([Math.sqrt(i[1]), i[1] * price, price, i[0]]);\n        });\n      }\n\n      return total.sort(function (a, b) {\n        return b[2] - a[2];\n      });\n    },\n    calculateTotalChange: function calculateTotalChange() {\n      var _this2 = this;\n\n      var total = 0;\n\n      if (this.calculateByDenom.value) {\n        Object.entries(this.calculateByDenom.value).forEach(function (i) {\n          total += i[1] * _this2.getChanges(i[0]) * 0.01;\n        });\n      }\n\n      return parseFloat(total.toFixed(2));\n    },\n    calculateByDenom: function calculateByDenom() {\n      var _this3 = this;\n\n      var v = Object.values(this.balances);\n      var total = {};\n      var qty = {};\n\n      if (v) {\n        v.forEach(function (tokens) {\n          tokens.forEach(function (x) {\n            var denom = _this3.formatDenom(x.denom);\n\n            if (total[denom]) {\n              total[denom] += _this3.formatCurrency(x.amount, x.denom);\n            } else {\n              total[denom] = _this3.formatCurrency(x.amount, x.denom);\n            }\n\n            if (qty[denom]) {\n              qty[denom] += _this3.formatAmount(x.amount, x.denom, false);\n            } else {\n              qty[denom] = _this3.formatAmount(x.amount, x.denom, false);\n            }\n          });\n        });\n      }\n\n      var d = Object.values(this.delegations);\n\n      if (d) {\n        d.forEach(function (tokens) {\n          tokens.forEach(function (x) {\n            var denom = _this3.formatDenom(x.denom);\n\n            if (total[denom]) {\n              total[denom] += _this3.formatCurrency(x.amount, x.denom);\n            } else {\n              total[denom] = _this3.formatCurrency(x.amount, x.denom);\n            }\n\n            if (qty[denom]) {\n              qty[denom] += _this3.formatAmount(x.amount, x.denom, false);\n            } else {\n              qty[denom] = _this3.formatAmount(x.amount, x.denom, false);\n            }\n          });\n        });\n      }\n\n      return {\n        value: total,\n        qty: qty\n      };\n    },\n    calculateChartDoughnut: function calculateChartDoughnut() {\n      var total = this.calculateByDenom;\n      var labels = [];\n      var data = [];\n      Object.entries(total.value).sort(function (a, b) {\n        return b[1] - a[1];\n      }).forEach(function (i) {\n        labels.push(i[0]);\n        data.push(i[1]);\n      });\n      return {\n        datasets: [{\n          labels: labels,\n          data: data,\n          backgroundColor: chartColors(),\n          borderWidth: 0,\n          pointStyle: 'rectRounded'\n        }]\n      };\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    refreshPrice: function refreshPrice() {\n      this.$store.dispatch('chains/getQuotes');\n    },\n    init: function init() {\n      var _this4 = this;\n\n      this.balances = {};\n      this.delegations = {};\n      this.accounts = getLocalAccounts();\n      var chains = getLocalChains();\n\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(function (acc) {\n          _this4.accounts[acc].address.forEach(function (add) {\n            _this4.$http.getBankBalances(add.addr, chains[add.chain]).then(function (res) {\n              var balances = res.balances;\n\n              if (balances && balances.length > 0) {\n                _this4.$set(_this4.balances, add.addr, balances);\n\n                balances.forEach(function (token) {\n                  if (token.denom.startsWith('ibc')) {\n                    _this4.$http.getIBCDenomTrace(token.denom, chains[add.chain]).then(function (denom) {\n                      _this4.$set(_this4.ibcDenom, token.denom, denom);\n                    });\n                  }\n                });\n              }\n            });\n\n            _this4.$http.getStakingDelegations(add.addr, chains[add.chain]).then(function (res) {\n              if (res.delegation_responses) {\n                var delegation = res.delegation_responses.map(function (x) {\n                  return x.balance;\n                }).reduce(function (t, c) {\n                  var t1 = t;\n\n                  if (t1[c.denom]) {\n                    t1[c.denom] += Number(c.amount);\n                  } else {\n                    t1[c.denom] = Number(c.amount);\n                  }\n\n                  return t1;\n                }, {});\n\n                _this4.$set(_this4.delegations, add.addr, Object.keys(delegation).map(function (x) {\n                  return {\n                    amount: String(delegation[x]),\n                    denom: x\n                  };\n                }));\n              }\n            }).catch(function () {});\n          });\n        });\n      }\n    },\n    setCurrency: function setCurrency(c) {\n      setUserCurrency(c);\n      this.currency2 = c;\n      this.currency = getUserCurrencySign();\n    },\n    transfer: function transfer(type, addr, chain) {\n      this.operationModalType = type;\n      this.selectedAddress = addr;\n      this.selectedChainName = chain;\n    },\n    completeAdd: function completeAdd() {\n      this.init();\n      this.$bvModal.hide('add-account');\n    },\n    formatDenom: function formatDenom(v) {\n      if (!v) return '';\n      var denom = v.startsWith('ibc') ? this.ibcDenom[v] : v;\n      return formatTokenDenom(denom);\n    },\n    formatTotalChange: function formatTotalChange(v) {\n      return numberWithCommas(v);\n    },\n    formatAmount: function formatAmount(v) {\n      var denom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'uatom';\n      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!v) return '';\n      var denom2 = denom.startsWith('ibc') ? this.ibcDenom[denom] : denom;\n      return formatTokenAmount(v, 2, denom2, format);\n    },\n    formatAddr: function formatAddr(v) {\n      return v.substring(0, 10).concat('...', v.substring(v.length - 10));\n    },\n    formatCurrency: function formatCurrency(amount, denom) {\n      var qty = this.formatAmount(amount, denom, false);\n      return parseFloat((qty * this.getPrice(denom)).toFixed(2));\n    },\n    priceColor: function priceColor(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[\"\".concat(this.currency2, \"_24h_change\")];\n        return price > 0 ? 'text-success' : 'text-danger';\n      }\n\n      return '';\n    },\n    getPrice: function getPrice(denom) {\n      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n      return quote ? quote[currency || this.currency2 || 'usd'] || 0 : 0;\n    },\n    getChanges: function getChanges(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[\"\".concat(this.currency2, \"_24h_change\")];\n        return price || 0;\n      }\n\n      return 0;\n    },\n    formatChanges: function formatChanges(denom) {\n      var price = this.getChanges(denom);\n\n      if (price > 0) {\n        return \"+\".concat(parseFloat(price.toFixed(2)), \"%\");\n      }\n\n      return '0';\n    },\n    formatPrice: function formatPrice(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[this.currency2];\n        return price;\n      }\n\n      return 0;\n    },\n    formatBalance: function formatBalance(v) {\n      var _this5 = this;\n\n      var total = 0;\n      var balance = this.balances[v];\n\n      if (balance) {\n        var ret = balance.map(function (x) {\n          return _this5.formatCurrency(x.amount, x.denom);\n        }).reduce(function (t, c) {\n          return t + c;\n        });\n        total += ret;\n      }\n\n      var delegations = this.delegations[v];\n\n      if (delegations) {\n        var _ret = delegations.map(function (x) {\n          return _this5.formatCurrency(x.amount, x.denom);\n        }).reduce(function (t, c) {\n          return t + c;\n        }, 0);\n\n        total += _ret;\n      }\n\n      return numberWithCommas(parseFloat(total.toFixed(2)));\n    },\n    formatBalanceChanges: function formatBalanceChanges(v) {\n      var _this6 = this;\n\n      var total = 0;\n      var balance = this.balances[v];\n\n      if (balance) {\n        var ret = balance.map(function (x) {\n          return _this6.formatCurrency(x.amount, x.denom) * _this6.getChanges(x.denom) * 0.01;\n        }).reduce(function (t, c) {\n          return t + c;\n        });\n        total += ret;\n      }\n\n      var delegations = this.delegations[v];\n\n      if (delegations) {\n        var _ret2 = delegations.map(function (x) {\n          return _this6.formatCurrency(x.amount, x.denom) * _this6.getChanges(x.denom) * 0.01;\n        }).reduce(function (t, c) {\n          return t + c;\n        }, 0);\n\n        total += _ret2;\n      }\n\n      return total > 0 ? \"+\".concat(parseFloat(total.toFixed(2))) : parseFloat(total.toFixed(2));\n    },\n    formatBalanceChangesColor: function formatBalanceChangesColor(v) {\n      var total = this.formatBalanceChanges(v);\n      return total > 0 ? 'text-success' : 'text-danger';\n    },\n    removeAddress: function removeAddress(v) {\n      var _this7 = this;\n\n      Object.keys(this.accounts).forEach(function (key) {\n        var item = _this7.accounts[key];\n        var newAddrs = item.address.filter(function (a) {\n          return a.addr !== v;\n        });\n\n        if (newAddrs.length > 0) {\n          _this7.$delete(_this7.balances, v);\n\n          _this7.$delete(_this7.delegations, v);\n\n          _this7.$set(item, 'address', newAddrs);\n\n          localStorage.setItem('accounts', JSON.stringify(_this7.accounts));\n        } else {\n          delete _this7.accounts[key];\n          localStorage.setItem('accounts', JSON.stringify(_this7.accounts));\n\n          _this7.init();\n        }\n      });\n    },\n    disconnect: function disconnect(key) {\n      delete this.accounts[key];\n      localStorage.setItem('accounts', JSON.stringify(this.accounts));\n      this.init();\n    },\n    updateDefaultWallet: function updateDefaultWallet(v) {\n      this.$store.commit('setDefaultWallet', v);\n    },\n    copy: function copy(v) {\n      var _this8 = this;\n\n      this.$copyText(v).then(function () {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, function (e) {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: \"Failed to copy address! \".concat(e),\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}