{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { $themeColors } from '@themeConfig';\nimport dayjs from 'dayjs';\nimport { BCard, BAvatar, BPopover, BTable, BRow, BCol, BTableSimple, BTr, BTd, BTbody, BCardHeader, BCardTitle, BButton, BCardBody, VBModal, BButtonGroup, VBTooltip, BPagination } from 'bootstrap-vue';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport Ripple from 'vue-ripple-directive';\nimport VueQr from 'vue-qr';\nimport { formatToken, formatTokenAmount, formatTokenDenom, getStakingValidatorOperator, percent, tokenFormatter, toDay, toDuration, abbrMessage, abbrAddress, getUserCurrency, getUserCurrencySign, numberWithCommas, toETHAddress } from '@/libs/utils';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nimport ChartComponentDoughnut from './components/charts/ChartComponentDoughnut.vue';\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BCard,\n    BAvatar,\n    BPopover,\n    BTable,\n    FeatherIcon,\n    VueQr,\n    BTableSimple,\n    BTbody,\n    BCardHeader,\n    BCardTitle,\n    BCardBody,\n    BButton,\n    BButtonGroup,\n    BTr,\n    BTd,\n    BPagination,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent,\n    ObjectFieldComponent,\n    ChartComponentDoughnut,\n    OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip,\n    Ripple\n  },\n\n  beforeRouteUpdate(to, from, next) {\n    // const { address } = this.$route.params\n    const {\n      address\n    } = to.params;\n\n    if (address !== from.params.hash) {\n      this.address = address;\n      this.$http.getAuthAccount(this.address).then(acc => {\n        this.account = acc;\n        this.initial();\n        this.$http.getTxsBySender(this.address).then(res => {\n          this.transactions = res;\n        });\n      }).catch(err => {\n        this.error = err;\n      });\n      next();\n    }\n  },\n\n  data() {\n    const {\n      address\n    } = this.$route.params;\n    return {\n      currency: getUserCurrencySign(),\n      selectedValidator: '',\n      totalCurrency: 0,\n      address,\n      account: null,\n      assets: [],\n      reward: [],\n      delegations: [],\n      redelegations: [],\n      unbonding: [],\n      quotes: {},\n      transactions: [],\n      stakingParameters: {},\n      operationModalType: '',\n      error: null\n    };\n  },\n\n  computed: {\n    accountTitle() {\n      if (this.account && this.account.type) {\n        return this.account.type.substring(this.account.type.indexOf('/') + 1);\n      }\n\n      return 'Profile';\n    },\n\n    txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(x => ({\n          height: Number(x.height),\n          txhash: x.txhash,\n          msgs: abbrMessage(x.tx.body.messages),\n          time: toDay(x.timestamp)\n        }));\n      }\n\n      return [];\n    },\n\n    assetTable() {\n      let total = [];\n      let sum = 0;\n      let sumCurrency = 0;\n      total = total.concat(this.assets.map(x => {\n        const xh = x;\n        xh.type = 'Balance';\n        xh.color = 'success';\n        xh.icon = 'CreditCardIcon';\n        xh.currency = this.formatCurrency(xh.amount, xh.denom);\n        sumCurrency += xh.currency;\n        sum += Number(xh.amount);\n        return xh;\n      }));\n      let stakingDenom = '';\n\n      if (this.delegations && this.delegations.length > 0) {\n        let temp = 0;\n        this.delegations.forEach(x => {\n          const xh = x.balance;\n          temp += Number(xh.amount);\n          sumCurrency += this.formatCurrency(xh.amount, xh.denom);\n          sum += Number(xh.amount);\n          stakingDenom = xh.denom;\n        });\n        total.push({\n          type: 'Delegation',\n          color: 'primary',\n          icon: 'LockIcon',\n          amount: temp,\n          denom: stakingDenom,\n          currency: this.formatCurrency(temp, stakingDenom)\n        });\n      }\n\n      if (this.reward.total) {\n        total = total.concat(this.reward.total.map(x => {\n          const xh = x;\n          xh.type = 'Reward';\n          xh.color = 'warning';\n          xh.icon = 'TrendingUpIcon';\n          xh.currency = this.formatCurrency(xh.amount, xh.denom);\n          sumCurrency += xh.currency;\n          sum += Number(xh.amount);\n          return xh;\n        }));\n      }\n\n      if (this.unbonding) {\n        let tmp1 = 0;\n        this.unbonding.forEach(x => {\n          x.entries.forEach(e => {\n            tmp1 += Number(e.balance);\n          });\n        });\n        if (this.stakingParameters) stakingDenom = this.stakingParameters.bond_denom;\n        const unbonding = this.formatCurrency(tmp1, stakingDenom);\n        sumCurrency += unbonding;\n        sum += tmp1;\n        total.push({\n          type: 'unbonding',\n          color: 'danger',\n          icon: 'TrendingDownIcon',\n          denom: stakingDenom,\n          amount: tmp1,\n          percent: 0,\n          currency: unbonding\n        });\n      }\n\n      total = total.map(x => {\n        const xh = x;\n        xh.percent = percent(Number(x.amount) / sum);\n        return xh;\n      });\n      return {\n        items: total,\n        currency: parseFloat(sumCurrency.toFixed(2))\n      };\n    },\n\n    chartData() {\n      const data = this.assetTable.items.reduce((t, c) => {\n        const th = t;\n\n        if (t[c.type]) {\n          th[c.type] += Number(c.amount);\n        } else {\n          th[c.type] = Number(c.amount);\n        }\n\n        return th;\n      }, []);\n      return {\n        datasets: [{\n          labels: Object.keys(data),\n          data: Object.values(data),\n          backgroundColor: [$themeColors.success, $themeColors.primary, $themeColors.warning, $themeColors.danger, $themeColors.info],\n          borderWidth: 0,\n          pointStyle: 'rectRounded'\n        }]\n      };\n    },\n\n    deleTable() {\n      const re = [];\n      const conf = this.$http.getSelectedConfig();\n      const decimal = conf.assets[0].exponent || '6';\n\n      if (this.reward.rewards && this.delegations && this.delegations.length > 0) {\n        this.delegations.forEach(e => {\n          const reward = this.reward.rewards.find(r => r.validator_address === e.delegation.validator_address);\n          re.push({\n            validator: {\n              moniker: getStakingValidatorOperator(this.$http.config.chain_name, e.delegation.validator_address, 8),\n              address: e.delegation.validator_address\n            },\n            token: formatToken(e.balance, {}, decimal),\n            reward: tokenFormatter(reward.reward, this.denoms),\n            action: e.delegation.validator_address\n          });\n        });\n      }\n\n      return re;\n    },\n\n    accTable() {\n      let table = {};\n\n      if (this.account && this.account.type === 'cosmos-sdk/PeriodicVestingAccount') {\n        table = this.account.value;\n      }\n\n      return table;\n    },\n\n    denoms() {\n      return this.$store.state.chains.denoms;\n    },\n\n    isEthAddr() {\n      return JSON.stringify(this.account).indexOf('PubKeyEthSecp256k1') > 0;\n    }\n\n  },\n\n  created() {\n    this.$http.getAuthAccount(this.address).then(acc => {\n      this.account = acc.account;\n      this.initial();\n      this.$http.getTxsBySender(this.address).then(res => {\n        this.transactions = res;\n      });\n      this.$http.getStakingParameters().then(res => {\n        this.stakingParameters = res;\n      });\n    }).catch(err => {\n      this.error = err;\n    });\n  },\n\n  mounted() {\n    const elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', () => {\n      this.initial();\n    });\n  },\n\n  methods: {\n    initial() {\n      this.$http.getBankAccountBalance(this.address).then(bal => {\n        this.assets = bal;\n      });\n      this.$http.getStakingReward(this.address).then(res => {\n        this.reward = res;\n      });\n      this.$http.getStakingDelegations(this.address).then(res => {\n        this.delegations = res.delegation_responses || res;\n      });\n      this.$http.getStakingUnbonding(this.address).then(res => {\n        this.unbonding = res.unbonding_responses || res;\n      });\n    },\n\n    formatNumber(v) {\n      return numberWithCommas(v);\n    },\n\n    pageload(v) {\n      this.$http.getTxsBySender(this.address, v).then(res => {\n        this.transactions = res;\n      });\n    },\n\n    selectValue(v, type) {\n      this.selectedValidator = v;\n      this.setOperationModalType(type);\n    },\n\n    setOperationModalType(type) {\n      this.operationModalType = type;\n    },\n\n    formatHash: abbrAddress,\n\n    formatDenom(v) {\n      return formatTokenDenom(this.denoms[v] ? this.denoms[v] : v);\n    },\n\n    formatAmount(v, dec = 2, denom = 'uatom', format = true) {\n      return formatTokenAmount(v, dec, denom, format);\n    },\n\n    formatToken(v) {\n      return tokenFormatter(v, this.denoms);\n    },\n\n    formatCurrency(amount, denom) {\n      const qty = this.formatAmount(amount, 2, denom, false);\n      const d2 = this.formatDenom(denom);\n      const userCurrency = getUserCurrency();\n      const quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        const price = quote[userCurrency];\n        return parseFloat((qty * price).toFixed(2));\n      }\n\n      return 0;\n    },\n\n    formatDate: v => dayjs(v).format('YYYY-MM-DD HH:mm:ss'),\n    formatTime: v => toDay(Number(v) * 1000),\n    formatLength: v => toDuration(Number(v) * 1000),\n\n    copy() {\n      this.$copyText(this.address).then(() => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, e => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: `Failed to copy address! ${e}`,\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    },\n\n    ethaddress() {\n      return toETHAddress(this.address);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}