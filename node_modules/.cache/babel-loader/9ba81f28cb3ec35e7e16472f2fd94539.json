{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, VBTooltip, BCard, BAlert, BCardTitle, BFormCheckbox, BBadge } from 'bootstrap-vue';\nimport { getLocalChains, timeIn, toDay } from '@/libs/utils';\nimport { fromBech32, toBase64 } from '@cosmjs/encoding';\nexport default {\n  name: 'Blocks',\n  components: {\n    BBadge,\n    BRow,\n    BCol,\n    BCard,\n    BAlert,\n    BCardTitle,\n    BFormCheckbox\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  props: {\n    chain: {\n      type: String,\n      default: null\n    },\n    validators: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    const chains = getLocalChains();\n    const pinned = localStorage.getItem('pinned') ? localStorage.getItem('pinned').split(',') : '';\n    return {\n      pinned,\n      config: chains[this.chain],\n      missing: {},\n      blocks: Array.from('0'.repeat(50)).map(x => ({\n        sigs: {},\n        height: Number(x)\n      })),\n      syncing: false,\n      latestTime: '',\n      height: '-'\n    };\n  },\n\n  computed: {\n    uptime() {\n      const vals = this.validators;\n      return vals;\n    }\n\n  },\n\n  created() {\n    this.initBlocks();\n    this.$http.getSlashingSigningInfo(this.config).then(res => {\n      if (res.info) {\n        res.info.forEach(x => {\n          if (x.address) {\n            const addr = toBase64(fromBech32(x.address).data);\n            this.missing[addr] = x;\n          }\n        });\n      }\n    });\n  },\n\n  beforeDestroy() {\n    this.blocks = []; // clear running tasks if it is not finish\n\n    this.syncing = false;\n    clearInterval(this.timer);\n  },\n\n  methods: {\n    pinValidator() {\n      localStorage.setItem('pinned', this.pinned);\n    },\n\n    initBlocks() {\n      this.$http.getLatestBlock(this.config).then(d => {\n        const {\n          height\n        } = d.block.last_commit;\n        this.height = height;\n\n        if (timeIn(d.block.header.time, 3, 'm')) {\n          this.syncing = true;\n        } else {\n          this.syncing = false;\n        }\n\n        this.latestTime = toDay(d.block.header.time, 'long');\n        const blocks = []; // update height\n\n        let promise = Promise.resolve();\n\n        for (let i = height - 1; i > height - 50; i -= 1) {\n          blocks.unshift({\n            sigs: {},\n            height: i > 0 ? i : 0\n          });\n\n          if (i > height - 48 && i > 0) {\n            promise = promise.then(() => new Promise(resolve => {\n              this.fetch_status(i, resolve);\n            }));\n          }\n        }\n\n        const sigs = this.initColor();\n        d.block.last_commit.signatures.forEach(x => {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        blocks.push({\n          sigs,\n          height\n        });\n        this.blocks = blocks;\n        this.timer = setInterval(this.fetch_latest, 6000);\n      });\n    },\n\n    initColor() {\n      const sigs = {};\n      this.validators.forEach(x => {\n        sigs[x.address] = 'bg-danger';\n      });\n      return sigs;\n    },\n\n    fetch_status(height, resolve) {\n      const block = this.blocks.find(b => b.height === height);\n\n      if (block) {\n        this.$http.getBlockByHeight(height, this.config).then(res => {\n          resolve();\n          const sigs = this.initColor();\n          res.block.last_commit.signatures.forEach(x => {\n            if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n          });\n          this.$set(block, 'sigs', sigs);\n        });\n      }\n    },\n\n    fetch_latest() {\n      this.$http.getLatestBlock(this.config).then(res => {\n        const sigs = this.initColor();\n        res.block.last_commit.signatures.forEach(x => {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        this.height = res.block.last_commit.height;\n        const block = this.blocks.find(b => b.height === res.block.last_commit.height);\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (this.blocks.length >= 50) this.blocks.shift();\n          this.blocks.push({\n            sigs,\n            height: res.block.last_commit.height\n          });\n        }\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}