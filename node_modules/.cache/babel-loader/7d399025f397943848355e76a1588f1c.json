{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.math.trunc.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.trim.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardTitle, BFormTextarea } from 'bootstrap-vue';\nimport { fromBase64, toHex } from '@cosmjs/encoding';\nexport default {\n  components: {\n    BCard: BCard,\n    BCardTitle: BCardTitle,\n    BFormTextarea: BFormTextarea\n  },\n  data: function data() {\n    var _this$$store$state$ch = this.$store.state.chains.selected,\n        rpc = _this$$store$state$ch.rpc,\n        snapshot_provider = _this$$store$state$ch.snapshot_provider;\n    var servers = '';\n\n    if (rpc && Array.isArray(rpc) && rpc.length > 0) {\n      var serv = rpc;\n\n      if (serv.length === 1) {\n        serv = serv.concat(serv);\n      }\n\n      servers = serv.map(function (x) {\n        var url = new URL(x);\n\n        if (url.port === '') {\n          return \"\".concat(url.protocol, \"//\").concat(url.hostname, \":\").concat(url.protocol.startsWith('https') ? '443' : '80');\n        }\n\n        return \"\".concat(url.protocol, \"//\").concat(url.hostname, \":\").concat(url.port);\n      }).join(',');\n    } // eslint-disable-next-line camelcase\n\n\n    var peers = snapshot_provider;\n    var providers = peers ? \"# Comma separated list of nodes to keep persistent connections to \\npersistent_peers = \\\"\".concat(peers, \"\\\" \") : 'OMG！ There is NO available providers, but you can try it.';\n    return {\n      app_version: '',\n      snapshot_provider: snapshot_provider,\n      servers: servers,\n      providers: providers,\n      height: 0,\n      hash: '',\n      error: [],\n      state: '',\n      valid: false,\n      daemon: '',\n      snapshot: \"[state-sync]\\n# snapshot-interval specifies the block interval at which local state sync snapshots are\\n# taken (0 to disable). Must be a multiple of pruning-keep-every.\\nsnapshot-interval = 1000\\n\\n# snapshot-keep-recent specifies the number of recent snapshots to keep and serve (0 to keep all). Each snapshot is about 500MiB\\nsnapshot-keep-recent = 2\"\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    var interval = 1000;\n    this.$http.getLatestBlock().then(function (l) {\n      var height = l.block.header.height;\n\n      if (height > interval * 3) {\n        _this.$http.getBlockByHeight(Math.trunc((height - 3 * interval) / interval) * interval).then(function (x) {\n          _this.hash = toHex(fromBase64(x.block_id.hash));\n          _this.height = x.block.header.height;\n          _this.state = \"[statesync]\\nenable = true\\nrpc_servers = \\\"\".concat(_this.servers, \"\\\"\\ntrust_height = \").concat(_this.height, \"\\ntrust_hash = \\\"\").concat(_this.hash, \"\\\"\\ntrust_period = \\\"168h\\\"  # 2/3 of unbonding time\");\n\n          _this.check();\n        });\n      }\n\n      _this.$http.getNodeInfo().then(function (res) {\n        _this.app_version = res.application_version.version;\n        _this.daemon = res.application_version.app_name;\n      }).catch();\n    });\n  },\n  methods: {\n    check: function check() {\n      var _this2 = this;\n\n      this.valid = true;\n      this.error = [];\n      this.state.split('\\n').forEach(function (element) {\n        var v = _this2.kv(element);\n\n        if (v[0] === 'trust_height' && Number(v[1]) < 1) {\n          _this2.valid = false;\n\n          _this2.error.push('Trust Height should be set.');\n        }\n\n        if (v[0] === 'trust_hash' && v[1].length < 10) {\n          _this2.valid = false;\n\n          _this2.error.push('Trust Hash is invalid.');\n        }\n\n        if (v[0] === 'rpc_servers') {\n          if (v[1].indexOf(',') > 1) {\n            v[1].replace(/\"/g, '').split(',').forEach(function (host) {\n              var re = /^(.)+:\\d+$/g;\n\n              if (!re.test(host)) {\n                _this2.valid = false;\n\n                _this2.error.push(\"\\\"\".concat(host, \"\\\" is not a valid host. Make sure that the port is added.\"));\n              }\n            }); // valid = true\n          } else {\n            _this2.valid = false;\n\n            _this2.error.push('No RPC serser is configured.');\n          }\n        }\n      });\n      return this.valid;\n    },\n    kv: function kv(line) {\n      if (line && line.indexOf('=') > 0) {\n        var s = line.split('=');\n        return [s[0].trim(), s[1].trim()];\n      }\n\n      return [];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}