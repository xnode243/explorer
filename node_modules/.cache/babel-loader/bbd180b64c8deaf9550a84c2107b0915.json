{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, BAlert, BCard } from 'bootstrap-vue';\nimport { formatNumber, formatTokenAmount, isToken, percent, timeIn, toDay, toDuration, tokenFormatter } from '@/libs/utils';\nimport ParametersModuleComponent from './components/parameters/ParametersModuleComponent.vue';\nimport ObjectFieldComponent from './components/ObjectFieldComponent.vue';\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BAlert,\n    BCard,\n    ParametersModuleComponent,\n    ObjectFieldComponent\n  },\n\n  data() {\n    return {\n      syncing: false,\n      latestTime: '',\n      marketData: null,\n      chain: {\n        title: '',\n        class: 'border-primary',\n        items: [{\n          subtitle: 'height',\n          icon: 'BoxIcon',\n          color: 'light-success'\n        }, {\n          subtitle: 'bonded_and_supply',\n          icon: 'DollarSignIcon',\n          color: 'light-danger'\n        }, {\n          subtitle: 'bonded_ratio',\n          icon: 'PercentIcon',\n          color: 'light-warning'\n        }, {\n          subtitle: 'inflation',\n          icon: 'TrendingUpIcon',\n          color: 'light-primary'\n        }]\n      },\n      staking: {\n        title: 'Staking Parameters',\n        items: []\n      },\n      distribution: {\n        title: 'Distribution Parameters',\n        items: []\n      },\n      slashing: {\n        title: 'Slashing Parameters',\n        items: null\n      },\n      mint: {\n        title: 'Mint Parameters',\n        items: null\n      },\n      gov: {\n        title: 'Governance Parameters',\n        items: []\n      },\n      appVersion: null,\n      nodeVersion: null\n    };\n  },\n\n  created() {\n    this.$http.getLatestBlock().then(res => {\n      const height = this.chain.items.findIndex(x => x.subtitle === 'height');\n      this.$set(this.chain, 'title', `Chain ID: ${res.block.header.chain_id}`);\n      this.$set(this.chain.items[height], 'title', res.block.header.height);\n\n      if (timeIn(res.block.header.time, 3, 'm')) {\n        this.syncing = true;\n      } else {\n        this.syncing = false;\n      }\n\n      this.latestTime = toDay(res.block.header.time, 'long');\n    });\n    this.$http.getStakingParameters().then(res => {\n      this.staking = this.normalize(res, 'Staking Parameters');\n      Promise.all([this.$http.getStakingPool(), this.$http.getBankTotal(res.bond_denom)]).then(pool => {\n        const bondedAndSupply = this.chain.items.findIndex(x => x.subtitle === 'bonded_and_supply');\n        this.$set(this.chain.items[bondedAndSupply], 'title', `${formatNumber(formatTokenAmount(pool[0].bondedToken, 2, res.bond_denom, false), true, 0)}/${formatNumber(formatTokenAmount(pool[1].amount, 2, res.bond_denom, false), true, 0)}`);\n        const bondedRatio = this.chain.items.findIndex(x => x.subtitle === 'bonded_ratio');\n        this.$set(this.chain.items[bondedRatio], 'title', `${percent(pool[0].bondedToken / pool[1].amount)}%`);\n      });\n    });\n    this.$http.getSlashingParameters().then(res => {\n      this.slashing = this.normalize(res, 'Slashing Parameters');\n    });\n    const conf = this.$http.getSelectedConfig();\n\n    if (conf.excludes && conf.excludes.indexOf('mint') > -1) {\n      this.mint = null;\n    } else {\n      this.$http.getMintingInflation().then(res => {\n        const chainIndex = this.chain.items.findIndex(x => x.subtitle === 'inflation');\n        this.$set(this.chain.items[chainIndex], 'title', `${percent(res)}%`);\n      });\n      this.$http.getMintParameters().then(res => {\n        this.mint = this.normalize(res, 'Minting Parameters');\n      });\n    }\n\n    this.$http.getDistributionParameters().then(res => {\n      this.distribution = this.normalize(res, 'Distribution Parameters');\n    });\n\n    if (conf.excludes && conf.excludes.indexOf('governance') > -1) {\n      this.gov.items = [];\n    } else {\n      Promise.all([this.$http.getGovernanceParameterDeposit(), this.$http.getGovernanceParameterTallying(), this.$http.getGovernanceParameterVoting()]).then(data => {\n        let items = [];\n        data.forEach(item => {\n          const values = this.normalize(item, '').items;\n          items = items.concat(values);\n        });\n        this.gov.items = items;\n        this.$set(this.gov, 'items', items);\n      });\n    }\n\n    this.$http.getNodeInfo().then(res => {\n      this.appVersion = res.application_version;\n      this.nodeVersion = res.default_node_info;\n    });\n  },\n\n  methods: {\n    normalize(data, title) {\n      if (!data) return null;\n      const items = this.makeItems(data);\n      return {\n        title,\n        items\n      };\n    },\n\n    makeItems(data) {\n      return Object.keys(data).map(k => {\n        if (isToken(data[k])) {\n          return {\n            title: tokenFormatter(data[k]),\n            subtitle: k\n          };\n        }\n\n        if (typeof data[k] === 'boolean') {\n          return {\n            title: data[k],\n            subtitle: k\n          };\n        }\n\n        return {\n          title: this.convert(data[k]),\n          subtitle: k\n        };\n      });\n    },\n\n    convert(v) {\n      if (typeof v === 'object') {\n        const v2 = {};\n        Object.entries(v).forEach(e => {\n          const k = e[0];\n          const x = e[1];\n          v2[k] = this.convert(x);\n        });\n        return v2;\n      }\n\n      const d = parseFloat(v);\n      if (d === 0) return '0';\n\n      if (d < 1.01) {\n        return `${percent(d)}%`;\n      }\n\n      if (d > 1000000000) {\n        return `${toDuration(d / 1000000)}`;\n      }\n\n      if (d > 0) {\n        return d.toFixed();\n      }\n\n      return v;\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}