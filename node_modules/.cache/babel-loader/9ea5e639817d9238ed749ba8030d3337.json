{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nimport { BAvatar, BModal, BRow, BCol, BInputGroup, BInputGroupAppend, BInputGroupPrepend, BFormInput, BFormGroup, BFormSelect, BForm, BFormRadioGroup, BFormRadio, BFormCheckbox } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getLocalAccounts, getUnitAmount, setLocalTxHistory, sign, timeIn } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport { coin } from '@cosmjs/amino';\nimport { getChainConfigForSymbol } from '@/libs/osmos';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BAvatar,\n    BModal,\n    BRow,\n    BCol,\n    BForm,\n    BInputGroup,\n    BInputGroupAppend,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormRadioGroup,\n    BFormRadio,\n    BFormCheckbox,\n    BInputGroupPrepend,\n    ValidationProvider,\n    ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent\n  },\n  props: {\n    symbol: {\n      type: String,\n      default: () => ''\n    },\n    denomTrace: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      address: '',\n      // from address for deposit / to address for withdraw\n      addressOptions: [],\n      chainId: '',\n      selectedChain: '',\n      balance: {},\n      token: '',\n      amount: null,\n      memo: '',\n      recipient: null,\n      fee: '800',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      error: null,\n      sequence: 1,\n      accountNumber: 0,\n      account: [],\n      IBCDenom: {},\n      gas: '200000',\n      advance: false,\n      paths: {},\n      destination: {},\n      channels: [],\n      timeoutHeight: {},\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash\n    };\n  },\n\n  methods: {\n    recipientAddress() {\n      const {\n        chain\n      } = this.$route.params;\n      const accounts = getLocalAccounts();\n      const current = this.$store.state.chains.defaultWallet;\n\n      if (accounts && accounts[current]) {\n        const acc = accounts[current].address.find(x => x.chain === chain);\n\n        if (acc) {\n          this.recipient = acc.addr;\n        }\n      }\n\n      this.selectedChain = getChainConfigForSymbol(this.symbol);\n    },\n\n    computeAccount() {\n      this.recipientAddress();\n      const accounts = getLocalAccounts();\n      this.addressOptions = [];\n\n      if (accounts) {\n        const values = Object.values(accounts);\n\n        for (let i = 0; i < values.length; i += 1) {\n          const addr = values[i].address.find(x => x.chain === this.selectedChain.chain_name);\n\n          if (addr) {\n            if (this.addressOptions.length === 0) this.address = addr.addr;\n            this.addressOptions.push({\n              value: addr.addr,\n              text: addr.addr\n            });\n          }\n        }\n      }\n\n      return [];\n    },\n\n    init() {\n      this.destination = null;\n      this.token = '';\n      this.computeAccount();\n      this.loadBalance();\n\n      if (this.denomTrace) {\n        const part = this.denomTrace.path.split('/');\n        this.$http.getIBCChannel(part[1], part[0]).then(data => {\n          this.destination = data.channel.counterparty;\n          this.timeoutHeight = data.proof_height;\n        });\n      }\n    },\n\n    loadBalance() {\n      if (this.address) {\n        this.$http.getBankBalances(this.address, this.selectedChain).then(res => {\n          if (res && res.length > 0) {\n            this.balance = res.find(x => formatTokenDenom(x.denom) === this.symbol);\n            this.denom = this.balance.denom;\n            this.feeDenom = this.balance.denom;\n          }\n        });\n        this.$http.getLatestBlock(this.selectedChain).then(ret => {\n          this.chainId = ret.block.header.chain_id;\n          const notSynced = timeIn(ret.block.header.time, 10, 'm');\n\n          if (notSynced) {\n            this.error = 'Client is not synced or blockchain is halted';\n          } else {\n            this.error = null;\n          }\n        });\n        this.$http.getAuthAccount(this.address, this.selectedChain).then(ret => {\n          if (ret.value.base_vesting_account) {\n            this.accountNumber = ret.value.base_vesting_account.base_account.account_number;\n            this.sequence = ret.value.base_vesting_account.base_account.sequence;\n            if (!this.sequence) this.sequence = 0;\n          } else {\n            this.accountNumber = ret.value.account_number;\n            this.sequence = ret.value.sequence ? ret.value.sequence : 0;\n          }\n        });\n      }\n    },\n\n    handleOk(bvModalEvt) {\n      // console.log('send')\n      // Prevent modal from closing\n      bvModalEvt.preventDefault(); // Trigger submit handler\n      // this.handleSubmit()\n\n      this.send().then(ret => {\n        // console.log(ret)\n        this.error = ret;\n      });\n    },\n\n    resetModal() {\n      this.feeDenom = '';\n      this.error = null;\n    },\n\n    format(v) {\n      return formatToken(v, {}, 6, false);\n    },\n\n    async send() {\n      if (!this.destination) {\n        this.error = 'You have to select a destination';\n        return;\n      }\n\n      const timeout = dayjs().add(4, 'hour');\n      const txMsgs = [{\n        typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n        value: {\n          sourcePort: this.destination.port_id,\n          sourceChannel: this.destination.channel_id,\n          token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n          sender: this.address,\n          receiver: this.recipient,\n          // timeoutHeight: {\n          //   revisionNumber: '0',\n          //   revisionHeight: '0',\n          // },\n          timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n        }\n      } // {\n      //   type: 'cosmos-sdk/MsgTransfer',\n      //   value: {\n      //     source_port: this.destination.port_id,\n      //     source_channel: this.destination.channel_id,\n      //     token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n      //     sender: this.address,\n      //     receiver: this.recipient,\n      //     timeout_height: {\n      //       revision_number: String(this.timeoutHeight.revision_number),\n      //       revision_height: String(200 + parseInt(this.timeoutHeight.revision_height, 10)),\n      //     },\n      //     timeout_timestamp: '0',\n      //   },\n      // },\n      ];\n      const txFee = {\n        amount: [{\n          amount: this.fee,\n          denom: this.feeDenom\n        }],\n        gas: this.gas\n      };\n      const signerData = {\n        accountNumber: this.accountNumber,\n        sequence: this.sequence,\n        chainId: this.chainId\n      };\n      sign(this.wallet, this.chainId, this.address, txMsgs, txFee, this.memo, signerData).then(bodyBytes => {\n        this.$http.broadcastTx(bodyBytes, this.selectedChain).then(res => {\n          setLocalTxHistory({\n            op: 'ibc_sender',\n            hash: res.txhash,\n            time: new Date()\n          });\n          this.$bvModal.hide('trading-deposte-window');\n          this.$toast({\n            component: ToastificationContent,\n            props: {\n              title: 'Transaction sent!',\n              icon: 'EditIcon',\n              variant: 'success'\n            }\n          });\n        }).catch(e => {\n          this.error = e;\n        });\n      }).catch(e => {\n        this.error = e;\n      }); // Send tokens\n      // return client.sendTokens(this.address, this.recipient, sendCoins, this.memo)\n      // return\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}