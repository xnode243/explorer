{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, VBTooltip, BAlert } from 'bootstrap-vue';\nimport { consensusPubkeyToHexAddress, getCachedValidators, getLocalChains } from '@/libs/utils';\nimport { fromHex, toBase64 } from '@cosmjs/encoding';\nimport UptimeMyChainBlocks from './UptimeMyChainBlocks.vue';\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BAlert,\n    UptimeMyChainBlocks\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n\n  data() {\n    let pinned = (localStorage.getItem('pinned') || '').split(',').map(x => x.split('#')).reduce((a1, b) => {\n      const a = a1;\n\n      if (a[b[0]]) {\n        a[b[0]].push(b[1]);\n      } else {\n        a[b[0]] = [b[1]];\n      }\n\n      return a;\n    }, {});\n\n    if (this.$route.query.validators) {\n      pinned = JSON.parse(this.$route.query.validators);\n    }\n\n    const chainVals = {};\n\n    if (pinned) {\n      const configs = getLocalChains();\n      Object.keys(pinned).forEach(x => {\n        const cached = JSON.parse(getCachedValidators(x));\n\n        if (cached) {\n          const validators = [];\n          pinned[x].forEach(address => {\n            const val = cached.find(v => address === this.hex2base64(consensusPubkeyToHexAddress(v.consensus_pubkey)));\n            if (val) validators.push({\n              address,\n              validator: val.description\n            });\n          });\n          chainVals[x] = validators;\n        } else {\n          this.$http.getValidatorList(configs[x]).then(vals => {\n            const validators = [];\n            pinned[x].forEach(address => {\n              const val = vals.find(v => address === this.hex2base64(consensusPubkeyToHexAddress(v.consensus_pubkey)));\n              if (val) validators.push({\n                address,\n                validator: val.description\n              });\n            });\n            this.$set(this.chainVals, x, validators);\n          });\n        }\n      });\n    }\n\n    return {\n      chainVals\n    };\n  },\n\n  methods: {\n    hex2base64(v) {\n      return toBase64(fromHex(v));\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}