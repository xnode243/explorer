import Vue from 'vue';
import { SubjectType, Generics, AnyAbility, Abilities, IfString, AbilityTuple } from '@casl/ability';
declare type AbilityCanProps<T extends Abilities, Else = IfString<T, {
    do: T;
} | {
    I: T;
}>> = T extends AbilityTuple ? {
    do: T[0];
    on: T[1];
    field?: string;
} | {
    I: T[0];
    a: Extract<T[1], SubjectType>;
    field?: string;
} | {
    I: T[0];
    an: Extract<T[1], SubjectType>;
    field?: string;
} | {
    I: T[0];
    this: Exclude<T[1], SubjectType>;
    field?: string;
} : Else;
export declare type AllCanProps<T extends AnyAbility> = AbilityCanProps<Generics<T>['abilities']> & {
    not?: boolean;
    passThrough?: boolean;
};
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {}, {}, {}, AllCanProps<AnyAbility>>;
export default _default;
