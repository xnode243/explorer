var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/* eslint-disable prefer-template */
import Transport from "@ledgerhq/hw-transport";
import { DisconnectedDevice, TransportOpenUserCancelled, } from "@ledgerhq/errors";
import { getBluetoothServiceUuids, getInfosForServiceUuid, } from "@ledgerhq/devices";
import { sendAPDU } from "@ledgerhq/devices/lib/ble/sendAPDU";
import { receiveAPDU } from "@ledgerhq/devices/lib/ble/receiveAPDU";
import { log } from "@ledgerhq/logs";
import { Observable, defer, merge, from } from "rxjs";
import { share, ignoreElements, first, map, tap } from "rxjs/operators";
import { monitorCharacteristic } from "./monitorCharacteristic";
var requiresBluetooth = function () {
    // $FlowFixMe
    var bluetooth = navigator.bluetooth;
    if (typeof bluetooth === "undefined") {
        throw new Error("web bluetooth not supported");
    }
    return bluetooth;
};
var availability = function () {
    return Observable.create(function (observer) {
        var bluetooth = requiresBluetooth();
        var onAvailabilityChanged = function (e) {
            observer.next(e.value);
        };
        bluetooth.addEventListener("availabilitychanged", onAvailabilityChanged);
        var unsubscribed = false;
        bluetooth.getAvailability().then(function (available) {
            if (!unsubscribed) {
                observer.next(available);
            }
        });
        return function () {
            unsubscribed = true;
            bluetooth.removeEventListener("availabilitychanged", onAvailabilityChanged);
        };
    });
};
var transportsCache = {};
var requestDeviceParam = function () { return ({
    filters: getBluetoothServiceUuids().map(function (uuid) { return ({
        services: [uuid]
    }); })
}); };
var retrieveService = function (device) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, service, infos;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!device.gatt)
                    throw new Error("bluetooth gatt not found");
                return [4 /*yield*/, device.gatt.getPrimaryServices()];
            case 1:
                _a = __read.apply(void 0, [_b.sent(), 1]), service = _a[0];
                if (!service)
                    throw new Error("bluetooth service not found");
                infos = getInfosForServiceUuid(service.uuid);
                if (!infos)
                    throw new Error("bluetooth service infos not found");
                return [2 /*return*/, [service, infos]];
        }
    });
}); };
function open(deviceOrId, needsReconnect) {
    return __awaiter(this, void 0, void 0, function () {
        var device, bluetooth, _a, service, infos, deviceModel, writeUuid, notifyUuid, _b, writeC, notifyC, notifyObservable, notif, transport, onDisconnect, beforeMTUTime, afterMTUTime;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(typeof deviceOrId === "string")) return [3 /*break*/, 2];
                    if (transportsCache[deviceOrId]) {
                        log("ble-verbose", "Transport in cache, using that.");
                        return [2 /*return*/, transportsCache[deviceOrId]];
                    }
                    bluetooth = requiresBluetooth();
                    return [4 /*yield*/, bluetooth.requestDevice(requestDeviceParam())];
                case 1:
                    // TODO instead we should "query" the device by its ID
                    device = _c.sent();
                    return [3 /*break*/, 3];
                case 2:
                    device = deviceOrId;
                    _c.label = 3;
                case 3:
                    if (!!device.gatt.connected) return [3 /*break*/, 5];
                    log("ble-verbose", "not connected. connecting...");
                    return [4 /*yield*/, device.gatt.connect()];
                case 4:
                    _c.sent();
                    _c.label = 5;
                case 5: return [4 /*yield*/, retrieveService(device)];
                case 6:
                    _a = __read.apply(void 0, [_c.sent(), 2]), service = _a[0], infos = _a[1];
                    deviceModel = infos.deviceModel, writeUuid = infos.writeUuid, notifyUuid = infos.notifyUuid;
                    return [4 /*yield*/, Promise.all([
                            service.getCharacteristic(writeUuid),
                            service.getCharacteristic(notifyUuid),
                        ])];
                case 7:
                    _b = __read.apply(void 0, [_c.sent(), 2]), writeC = _b[0], notifyC = _b[1];
                    notifyObservable = monitorCharacteristic(notifyC).pipe(tap(function (value) {
                        log("ble-frame", "<= " + value.toString("hex"));
                    }), share());
                    notif = notifyObservable.subscribe();
                    transport = new BluetoothTransport(device, writeC, notifyObservable, deviceModel);
                    if (!device.gatt.connected) {
                        throw new DisconnectedDevice();
                    }
                    // eslint-disable-next-line require-atomic-updates
                    transportsCache[transport.id] = transport;
                    onDisconnect = function (e) {
                        console.log("onDisconnect!", e);
                        delete transportsCache[transport.id];
                        transport.notYetDisconnected = false;
                        notif.unsubscribe();
                        device.removeEventListener("gattserverdisconnected", onDisconnect);
                        log("ble-verbose", "BleTransport(".concat(transport.id, ") disconnected"));
                        transport.emit("disconnect", e);
                    };
                    device.addEventListener("gattserverdisconnected", onDisconnect);
                    beforeMTUTime = Date.now();
                    _c.label = 8;
                case 8:
                    _c.trys.push([8, , 10, 14]);
                    return [4 /*yield*/, transport.inferMTU()];
                case 9:
                    _c.sent();
                    return [3 /*break*/, 14];
                case 10:
                    afterMTUTime = Date.now();
                    // workaround for #279: we need to open() again if we come the first time here,
                    // to make sure we do a disconnect() after the first pairing time
                    // because of a firmware bug
                    if (afterMTUTime - beforeMTUTime < 1000) {
                        needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.
                    }
                    if (!needsReconnect) return [3 /*break*/, 13];
                    return [4 /*yield*/, device.gatt.disconnect()];
                case 11:
                    _c.sent();
                    // necessary time for the bonding workaround
                    return [4 /*yield*/, new Promise(function (s) { return setTimeout(s, 4000); })];
                case 12:
                    // necessary time for the bonding workaround
                    _c.sent();
                    _c.label = 13;
                case 13: return [7 /*endfinally*/];
                case 14:
                    if (needsReconnect) {
                        return [2 /*return*/, open(device, false)];
                    }
                    return [2 /*return*/, transport];
            }
        });
    });
}
/**
 * react-native bluetooth BLE implementation
 * @example
 * import BluetoothTransport from "@ledgerhq/hw-transport-web-ble";
 */
var BluetoothTransport = /** @class */ (function (_super) {
    __extends(BluetoothTransport, _super);
    function BluetoothTransport(device, writeCharacteristic, notifyObservable, deviceModel) {
        var _this = _super.call(this) || this;
        _this.mtuSize = 20;
        _this.notYetDisconnected = true;
        _this.write = function (buffer) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        log("ble-frame", "=> " + buffer.toString("hex"));
                        return [4 /*yield*/, this.writeCharacteristic.writeValue(buffer)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        _this.id = device.id;
        _this.device = device;
        _this.writeCharacteristic = writeCharacteristic;
        _this.notifyObservable = notifyObservable;
        _this.deviceModel = deviceModel;
        log("ble-verbose", "BleTransport(".concat(String(_this.id), ") new instance"));
        return _this;
    }
    /**
     * Scan for Ledger Bluetooth devices.
     * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).
     */
    BluetoothTransport.listen = function (observer) {
        log("ble-verbose", "listen...");
        var unsubscribed;
        var bluetooth = requiresBluetooth();
        bluetooth.requestDevice(requestDeviceParam()).then(function (device) {
            if (!unsubscribed) {
                observer.next({
                    type: "add",
                    descriptor: device
                });
                observer.complete();
            }
        }, function (error) {
            observer.error(new TransportOpenUserCancelled(error.message));
        });
        function unsubscribe() {
            unsubscribed = true;
        }
        return {
            unsubscribe: unsubscribe
        };
    };
    /**
     * open a bluetooth device.
     */
    BluetoothTransport.open = function (deviceOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, open(deviceOrId, true)];
            });
        });
    };
    BluetoothTransport.prototype.inferMTU = function () {
        return __awaiter(this, void 0, void 0, function () {
            var mtu, mtuSize;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mtu = 23;
                        return [4 /*yield*/, this.exchangeAtomicImpl(function () { return __awaiter(_this, void 0, void 0, function () {
                                var e_1;
                                var _this = this;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, merge(this.notifyObservable.pipe(first(function (buffer) { return buffer.readUInt8(0) === 0x08; }), map(function (buffer) { return buffer.readUInt8(5); })), defer(function () { return from(_this.write(Buffer.from([0x08, 0, 0, 0, 0]))); }).pipe(ignoreElements())).toPromise()];
                                        case 1:
                                            mtu =
                                                (_b.sent()) + 3;
                                            return [3 /*break*/, 3];
                                        case 2:
                                            e_1 = _b.sent();
                                            log("ble-error", "inferMTU got " + String(e_1));
                                            this.device.gatt.disconnect();
                                            throw e_1;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        if (mtu > 23) {
                            mtuSize = mtu - 3;
                            log("ble-verbose", "BleTransport(".concat(String(this.id), ") mtu set to ").concat(String(mtuSize)));
                            this.mtuSize = mtuSize;
                        }
                        return [2 /*return*/, this.mtuSize];
                }
            });
        });
    };
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    BluetoothTransport.prototype.exchange = function (apdu) {
        return __awaiter(this, void 0, void 0, function () {
            var b;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.exchangeAtomicImpl(function () { return __awaiter(_this, void 0, void 0, function () {
                            var msgIn, data, msgOut, e_2;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 2, , 3]);
                                        msgIn = apdu.toString("hex");
                                        log("apdu", "=> ".concat(msgIn));
                                        return [4 /*yield*/, merge(this.notifyObservable.pipe(receiveAPDU), sendAPDU(this.write, apdu, this.mtuSize)).toPromise()];
                                    case 1:
                                        data = _b.sent();
                                        msgOut = data.toString("hex");
                                        log("apdu", "<= ".concat(msgOut));
                                        return [2 /*return*/, data];
                                    case 2:
                                        e_2 = _b.sent();
                                        log("ble-error", "exchange got " + String(e_2));
                                        if (this.notYetDisconnected) {
                                            // in such case we will always disconnect because something is bad.
                                            this.device.gatt.disconnect();
                                        }
                                        throw e_2;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        b = _b.sent();
                        return [2 /*return*/, b];
                }
            });
        });
    };
    BluetoothTransport.prototype.setScrambleKey = function () { };
    BluetoothTransport.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.exchangeBusyPromise) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.exchangeBusyPromise];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    var _a;
    _a = BluetoothTransport;
    BluetoothTransport.isSupported = function () {
        return Promise.resolve()
            .then(requiresBluetooth)
            .then(function () { return true; }, function () { return false; });
    };
    /**
     * observe event with { available: bool, type: string }
     * (available is generic, type is specific)
     * an event is emit once and then each time it changes
     */
    BluetoothTransport.observeAvailability = function (observer) {
        return availability().subscribe(observer);
    };
    BluetoothTransport.list = function () { return Promise.resolve([]); };
    /**
     * globally disconnect a bluetooth device by its id.
     */
    BluetoothTransport.disconnect = function (id) { return __awaiter(void 0, void 0, void 0, function () {
        var transport;
        return __generator(_a, function (_b) {
            log("ble-verbose", "user disconnect(".concat(id, ")"));
            transport = transportsCache[id];
            if (transport) {
                transport.device.gatt.disconnect();
            }
            return [2 /*return*/];
        });
    }); };
    return BluetoothTransport;
}(Transport));
export default BluetoothTransport;
//# sourceMappingURL=TransportWebBLE.js.map